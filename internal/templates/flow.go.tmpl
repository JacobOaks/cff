{{- $context := import "context" -}}
{{- $cff := import "go.uber.org/cff" -}}
{{- $flow := .Flow -}}
{{- with .Flow -}}
func(
	ctx {{ $context }}.Context,
	emitter {{ $cff }}.Emitter,
	{{ range .Inputs -}}
		v{{ typeHash .Type }} {{ type .Type }},
	{{- end }}
) (err error) {
	var (
		flowInfo = &{{ $cff }}.FlowInfo{
			{{ with $flow.Instrument -}}
				Flow: {{ expr .Name }},
			{{ end -}}
			File: {{ quote $flow.PosInfo.File}},
			Line: {{ $flow.PosInfo.Line }},
			Column: {{ $flow.PosInfo.Column}},
		}
		{{ if $flow.Instrument -}}
			flowEmitter = emitter.FlowInit(flowInfo)
		{{- else -}}
			flowEmitter = {{ $cff }}.NopFlowEmitter()
		{{- end }}

		// possibly unused
		_ = flowInfo
	)

	startTime := {{ import "time" }}.Now()
	defer func() { flowEmitter.FlowDone(ctx, time.Since(startTime)) }()

	{{ if $.Online -}}
		sched := {{ $cff }}.BeginFlow(
			{{- with .Concurrency -}}
				{{ expr . }}
			{{- else -}}
				0
			{{- end -}}

		)
	{{- end }}

	type task struct {
		emitter {{ $cff }}.TaskEmitter
		ran {{ $cff }}.AtomicBool
		run func({{ $context }}.Context) error
		{{- if $.Online }}
			job *{{ $cff }}.ScheduledJob
		{{- end }}
	}

	var tasks []*task
	defer func() {
		for _, t := range tasks {
			if !t.ran.Load() {
				t.emitter.TaskSkipped(ctx, err)
			}
		}
	}()

	{{ range $flow.TopoTasks }}
		{{ template "task.go.tmpl" . }}
		{{- if $.Online }}
			task{{ .Serial }}.job = sched.Enqueue(ctx, {{ $cff }}.Job{
				Run: task{{ .Serial }}.run,
				{{ if .DependsOn -}}
					Dependencies: []*{{ $cff }}.ScheduledJob{
						{{ range .DependsOn -}}
							task{{.Serial}}.job,
						{{ end -}}
					},
				{{- end }}
			})
		{{- end }}
		tasks = append(tasks, task{{ .Serial }})
	{{ end }}

	{{ if not $.Online }}
		schedule := [][]func({{ $context }}.Context) error{
			{{ range .Schedule -}}
				{
					{{- range . -}}
						{{ printf "task%d" .Serial }}.run,
					{{- end -}}
				},
			{{ end -}}
		}

		if err := {{ $cff }}.RunStaticTasks(ctx, schedule); err != nil {
			flowEmitter.FlowError(ctx, err)
			return err
		}
	{{ else }}
		if err := sched.Wait(ctx); err != nil {
			flowEmitter.FlowError(ctx, err)
			return err
		}
	{{ end }}

	{{ range .Outputs }}
		*({{ expr .Node }}) = v{{ typeHash .Type }} // {{ typeName .Type }}
	{{- end }}

	flowEmitter.FlowSuccess(ctx)
	return nil
}(
	{{ expr .Ctx }},
	{{ template "buildEmitter" $flow }},
	{{ range .Inputs -}}
		{{ expr .Node }},
	{{ end }}
)
{{- end -}}

{{- define "buildEmitter" -}}
	{{- $cff :=  import "go.uber.org/cff" -}}
	{{- with .Emitters -}}
		{{ $cff }}.EmitterStack(
			{{- range . -}}
				{{ expr . }},
			{{- end -}}
		)
	{{- else -}}
		{{ $cff }}.NopEmitter()
	{{- end -}}
{{- end -}}

{{- /* vim:set ft=gotexttmpl noet: */ -}}
