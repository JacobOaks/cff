{{- $context := import "context" -}}
{{- $cff := import "go.uber.org/cff" -}}
{{- $flow := .Flow -}}
{{- with .Flow -}}
func(
	ctx {{ $context }}.Context,
	emitter {{ $cff }}.Emitter,
	{{ range .Inputs -}}
		v{{ typeHash .Type }} {{ type .Type }},
	{{- end }}
) (err error) {
	var (
		flowInfo = &{{ $cff }}.FlowInfo{
			{{ with $flow.Instrument -}}
				Name: {{ expr .Name }},
			{{ end -}}
			File: {{ quote $flow.PosInfo.File}},
			Line: {{ $flow.PosInfo.Line }},
			Column: {{ $flow.PosInfo.Column}},
		}
		{{ if $flow.Instrument -}}
			flowEmitter = emitter.FlowInit(flowInfo)
		{{- else -}}
			flowEmitter = {{ $cff }}.NopFlowEmitter()
		{{- end }}

		schedInfo = &{{ $cff }}.SchedulerInfo{
			FlowInfo: flowInfo,
		}

		// possibly unused
		_ = flowInfo
	)

	startTime := {{ import "time" }}.Now()
	defer func() { flowEmitter.FlowDone(ctx, time.Since(startTime)) }()

	schedEmitter := emitter.SchedulerInit(schedInfo)

    sched := {{ $cff }}.BeginFlow(
        {{- with .Concurrency -}}
            {{ expr . }}
        {{- else -}}
            0
        {{- end -}}, schedEmitter,
    )

	type task struct {
		emitter {{ $cff }}.TaskEmitter
		ran {{ $cff }}.AtomicBool
		run func({{ $context }}.Context) error
        job *{{ $cff }}.ScheduledJob
	}

	var tasks []*task
	defer func() {
		for _, t := range tasks {
			if !t.ran.Load() {
				t.emitter.TaskSkipped(ctx, err)
			}
		}
	}()

	{{ range $flow.TopoTasks }}
		{{ template "task.go.tmpl" . }}
		tasks = append(tasks, task{{ .Serial }})
	{{ end }}

    if err := sched.Wait(ctx); err != nil {
        flowEmitter.FlowError(ctx, err)
        return err
    }

	{{ range .Outputs }}
		*({{ expr .Node }}) = v{{ typeHash .Type }} // {{ typeName .Type }}
	{{- end }}

	flowEmitter.FlowSuccess(ctx)
	return nil
}(
	{{ expr .Ctx }},
	{{ template "buildEmitter" $flow }},
	{{ range .Inputs -}}
		{{ expr .Node }},
	{{ end }}
)
{{- end -}}

{{- define "buildEmitter" -}}
	{{- $cff :=  import "go.uber.org/cff" -}}
	{{- with .Emitters -}}
		{{ $cff }}.EmitterStack(
			{{- range . -}}
				{{ expr . }},
			{{- end -}}
		)
	{{- else -}}
		{{ $cff }}.NopEmitter()
	{{- end -}}
{{- end -}}

{{- /* vim:set ft=gotexttmpl noet: */ -}}
