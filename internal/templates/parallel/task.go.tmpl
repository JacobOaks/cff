{{- $context := import "context" -}}
{{- $cff := import "go.uber.org/cff" -}}
{{- $t := printf "task%d" .Serial -}}

// {{ .PosInfo.File }}:{{ .PosInfo.Line }}:{{ .PosInfo.Column }}
{{ $t }} := new(task)
{{ $t }}.run = func(ctx {{ $context }}.Context) (err error) {
	defer func() {
		recovered := recover()
		if recovered != nil {
			err = {{ import "fmt" }}.Errorf("parallel function panic: %v", recovered)
		}
	}()

	{{ if .Function.HasError }} err = {{ end }}{{ template "callFunc" . }}
	return
}

sched.Enqueue(ctx, {{ $cff }}.Job{
	Run: task{{ .Serial }}.run,
})

{{- define "callFunc" -}}
	{{- expr .Function.Node }}({{- if .Function.WantCtx }}ctx,{{ end }})
{{- end -}}

{{- /* vim:set ft=gotexttmpl noet: */ -}}
