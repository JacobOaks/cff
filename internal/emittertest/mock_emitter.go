// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/cff (interfaces: Emitter,TaskEmitter,FlowEmitter,ParallelEmitter,SchedulerEmitter)

// Package emittertest is a generated GoMock package.
package emittertest

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	cff "go.uber.org/cff"
	scheduler "go.uber.org/cff/scheduler"
)

// MockEmitter is a mock of Emitter interface.
type MockEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockEmitterMockRecorder
}

// MockEmitterMockRecorder is the mock recorder for MockEmitter.
type MockEmitterMockRecorder struct {
	mock *MockEmitter
}

// NewMockEmitter creates a new mock instance.
func NewMockEmitter(ctrl *gomock.Controller) *MockEmitter {
	mock := &MockEmitter{ctrl: ctrl}
	mock.recorder = &MockEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmitter) EXPECT() *MockEmitterMockRecorder {
	return m.recorder
}

// FlowInit mocks base method.
func (m *MockEmitter) FlowInit(arg0 *cff.FlowInfo) cff.FlowEmitter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowInit", arg0)
	ret0, _ := ret[0].(cff.FlowEmitter)
	return ret0
}

// FlowInit indicates an expected call of FlowInit.
func (mr *MockEmitterMockRecorder) FlowInit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowInit", reflect.TypeOf((*MockEmitter)(nil).FlowInit), arg0)
}

// ParallelInit mocks base method.
func (m *MockEmitter) ParallelInit(arg0 *cff.ParallelInfo) cff.ParallelEmitter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParallelInit", arg0)
	ret0, _ := ret[0].(cff.ParallelEmitter)
	return ret0
}

// ParallelInit indicates an expected call of ParallelInit.
func (mr *MockEmitterMockRecorder) ParallelInit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParallelInit", reflect.TypeOf((*MockEmitter)(nil).ParallelInit), arg0)
}

// SchedulerInit mocks base method.
func (m *MockEmitter) SchedulerInit(arg0 *cff.SchedulerInfo) cff.SchedulerEmitter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchedulerInit", arg0)
	ret0, _ := ret[0].(cff.SchedulerEmitter)
	return ret0
}

// SchedulerInit indicates an expected call of SchedulerInit.
func (mr *MockEmitterMockRecorder) SchedulerInit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedulerInit", reflect.TypeOf((*MockEmitter)(nil).SchedulerInit), arg0)
}

// TaskInit mocks base method.
func (m *MockEmitter) TaskInit(arg0 *cff.TaskInfo, arg1 *cff.DirectiveInfo) cff.TaskEmitter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskInit", arg0, arg1)
	ret0, _ := ret[0].(cff.TaskEmitter)
	return ret0
}

// TaskInit indicates an expected call of TaskInit.
func (mr *MockEmitterMockRecorder) TaskInit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskInit", reflect.TypeOf((*MockEmitter)(nil).TaskInit), arg0, arg1)
}

// MockTaskEmitter is a mock of TaskEmitter interface.
type MockTaskEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockTaskEmitterMockRecorder
}

// MockTaskEmitterMockRecorder is the mock recorder for MockTaskEmitter.
type MockTaskEmitterMockRecorder struct {
	mock *MockTaskEmitter
}

// NewMockTaskEmitter creates a new mock instance.
func NewMockTaskEmitter(ctrl *gomock.Controller) *MockTaskEmitter {
	mock := &MockTaskEmitter{ctrl: ctrl}
	mock.recorder = &MockTaskEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskEmitter) EXPECT() *MockTaskEmitterMockRecorder {
	return m.recorder
}

// TaskDone mocks base method.
func (m *MockTaskEmitter) TaskDone(arg0 context.Context, arg1 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TaskDone", arg0, arg1)
}

// TaskDone indicates an expected call of TaskDone.
func (mr *MockTaskEmitterMockRecorder) TaskDone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskDone", reflect.TypeOf((*MockTaskEmitter)(nil).TaskDone), arg0, arg1)
}

// TaskError mocks base method.
func (m *MockTaskEmitter) TaskError(arg0 context.Context, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TaskError", arg0, arg1)
}

// TaskError indicates an expected call of TaskError.
func (mr *MockTaskEmitterMockRecorder) TaskError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskError", reflect.TypeOf((*MockTaskEmitter)(nil).TaskError), arg0, arg1)
}

// TaskErrorRecovered mocks base method.
func (m *MockTaskEmitter) TaskErrorRecovered(arg0 context.Context, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TaskErrorRecovered", arg0, arg1)
}

// TaskErrorRecovered indicates an expected call of TaskErrorRecovered.
func (mr *MockTaskEmitterMockRecorder) TaskErrorRecovered(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskErrorRecovered", reflect.TypeOf((*MockTaskEmitter)(nil).TaskErrorRecovered), arg0, arg1)
}

// TaskPanic mocks base method.
func (m *MockTaskEmitter) TaskPanic(arg0 context.Context, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TaskPanic", arg0, arg1)
}

// TaskPanic indicates an expected call of TaskPanic.
func (mr *MockTaskEmitterMockRecorder) TaskPanic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskPanic", reflect.TypeOf((*MockTaskEmitter)(nil).TaskPanic), arg0, arg1)
}

// TaskPanicRecovered mocks base method.
func (m *MockTaskEmitter) TaskPanicRecovered(arg0 context.Context, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TaskPanicRecovered", arg0, arg1)
}

// TaskPanicRecovered indicates an expected call of TaskPanicRecovered.
func (mr *MockTaskEmitterMockRecorder) TaskPanicRecovered(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskPanicRecovered", reflect.TypeOf((*MockTaskEmitter)(nil).TaskPanicRecovered), arg0, arg1)
}

// TaskSkipped mocks base method.
func (m *MockTaskEmitter) TaskSkipped(arg0 context.Context, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TaskSkipped", arg0, arg1)
}

// TaskSkipped indicates an expected call of TaskSkipped.
func (mr *MockTaskEmitterMockRecorder) TaskSkipped(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskSkipped", reflect.TypeOf((*MockTaskEmitter)(nil).TaskSkipped), arg0, arg1)
}

// TaskSuccess mocks base method.
func (m *MockTaskEmitter) TaskSuccess(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TaskSuccess", arg0)
}

// TaskSuccess indicates an expected call of TaskSuccess.
func (mr *MockTaskEmitterMockRecorder) TaskSuccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskSuccess", reflect.TypeOf((*MockTaskEmitter)(nil).TaskSuccess), arg0)
}

// MockFlowEmitter is a mock of FlowEmitter interface.
type MockFlowEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockFlowEmitterMockRecorder
}

// MockFlowEmitterMockRecorder is the mock recorder for MockFlowEmitter.
type MockFlowEmitterMockRecorder struct {
	mock *MockFlowEmitter
}

// NewMockFlowEmitter creates a new mock instance.
func NewMockFlowEmitter(ctrl *gomock.Controller) *MockFlowEmitter {
	mock := &MockFlowEmitter{ctrl: ctrl}
	mock.recorder = &MockFlowEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlowEmitter) EXPECT() *MockFlowEmitterMockRecorder {
	return m.recorder
}

// FlowDone mocks base method.
func (m *MockFlowEmitter) FlowDone(arg0 context.Context, arg1 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FlowDone", arg0, arg1)
}

// FlowDone indicates an expected call of FlowDone.
func (mr *MockFlowEmitterMockRecorder) FlowDone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowDone", reflect.TypeOf((*MockFlowEmitter)(nil).FlowDone), arg0, arg1)
}

// FlowError mocks base method.
func (m *MockFlowEmitter) FlowError(arg0 context.Context, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FlowError", arg0, arg1)
}

// FlowError indicates an expected call of FlowError.
func (mr *MockFlowEmitterMockRecorder) FlowError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowError", reflect.TypeOf((*MockFlowEmitter)(nil).FlowError), arg0, arg1)
}

// FlowSuccess mocks base method.
func (m *MockFlowEmitter) FlowSuccess(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FlowSuccess", arg0)
}

// FlowSuccess indicates an expected call of FlowSuccess.
func (mr *MockFlowEmitterMockRecorder) FlowSuccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowSuccess", reflect.TypeOf((*MockFlowEmitter)(nil).FlowSuccess), arg0)
}

// MockParallelEmitter is a mock of ParallelEmitter interface.
type MockParallelEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockParallelEmitterMockRecorder
}

// MockParallelEmitterMockRecorder is the mock recorder for MockParallelEmitter.
type MockParallelEmitterMockRecorder struct {
	mock *MockParallelEmitter
}

// NewMockParallelEmitter creates a new mock instance.
func NewMockParallelEmitter(ctrl *gomock.Controller) *MockParallelEmitter {
	mock := &MockParallelEmitter{ctrl: ctrl}
	mock.recorder = &MockParallelEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParallelEmitter) EXPECT() *MockParallelEmitterMockRecorder {
	return m.recorder
}

// ParallelDone mocks base method.
func (m *MockParallelEmitter) ParallelDone(arg0 context.Context, arg1 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ParallelDone", arg0, arg1)
}

// ParallelDone indicates an expected call of ParallelDone.
func (mr *MockParallelEmitterMockRecorder) ParallelDone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParallelDone", reflect.TypeOf((*MockParallelEmitter)(nil).ParallelDone), arg0, arg1)
}

// ParallelError mocks base method.
func (m *MockParallelEmitter) ParallelError(arg0 context.Context, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ParallelError", arg0, arg1)
}

// ParallelError indicates an expected call of ParallelError.
func (mr *MockParallelEmitterMockRecorder) ParallelError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParallelError", reflect.TypeOf((*MockParallelEmitter)(nil).ParallelError), arg0, arg1)
}

// ParallelSuccess mocks base method.
func (m *MockParallelEmitter) ParallelSuccess(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ParallelSuccess", arg0)
}

// ParallelSuccess indicates an expected call of ParallelSuccess.
func (mr *MockParallelEmitterMockRecorder) ParallelSuccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParallelSuccess", reflect.TypeOf((*MockParallelEmitter)(nil).ParallelSuccess), arg0)
}

// MockSchedulerEmitter is a mock of SchedulerEmitter interface.
type MockSchedulerEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerEmitterMockRecorder
}

// MockSchedulerEmitterMockRecorder is the mock recorder for MockSchedulerEmitter.
type MockSchedulerEmitterMockRecorder struct {
	mock *MockSchedulerEmitter
}

// NewMockSchedulerEmitter creates a new mock instance.
func NewMockSchedulerEmitter(ctrl *gomock.Controller) *MockSchedulerEmitter {
	mock := &MockSchedulerEmitter{ctrl: ctrl}
	mock.recorder = &MockSchedulerEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerEmitter) EXPECT() *MockSchedulerEmitterMockRecorder {
	return m.recorder
}

// EmitScheduler mocks base method.
func (m *MockSchedulerEmitter) EmitScheduler(arg0 scheduler.State) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitScheduler", arg0)
}

// EmitScheduler indicates an expected call of EmitScheduler.
func (mr *MockSchedulerEmitterMockRecorder) EmitScheduler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitScheduler", reflect.TypeOf((*MockSchedulerEmitter)(nil).EmitScheduler), arg0)
}
