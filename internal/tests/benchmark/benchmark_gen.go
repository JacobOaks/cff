//go:build !cff
// +build !cff

package benchmark

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/uber-go/tally"
	"go.uber.org/cff"
	"go.uber.org/zap"
)

func a() int64 {
	return 1
}

func b() int {
	return 1
}

func c(i int64, j int) float64 {
	return float64(i + int64(j))
}

// Baseline is a flow that has two concurrent tasks that do almost nothing, that is designed to try to measure
// the overhead incurred by cff.Flow
func Baseline() float64 {
	var res float64
	func() (err error) {

		_32_3 := context.Background()

		_33_15 := &res

		_34_12 := a

		_35_12 := b

		_36_12 := c
		ctx := _32_3
		emitter := cff.NopEmitter()

		var (
			flowInfo = &cff.FlowInfo{
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   31,
				Column: 2,
			}
			flowEmitter = cff.NopFlowEmitter()

			schedInfo = &cff.SchedulerInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			}

			// possibly unused
			_ = flowInfo
		)

		startTime := time.Now()
		defer func() { flowEmitter.FlowDone(ctx, time.Since(startTime)) }()

		schedEmitter := emitter.SchedulerInit(schedInfo)

		sched := cff.BeginFlow(
			cff.SchedulerParams{
				Emitter: schedEmitter,
			},
		)

		var tasks []*struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		}
		defer func() {
			for _, t := range tasks {
				if !t.ran.Load() {
					t.emitter.TaskSkipped(ctx, err)
				}
			}
		}()

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:34:12
		var (
			v1 int64
		)
		task0 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task0.emitter = cff.NopTaskEmitter()
		task0.run = func(ctx context.Context) (err error) {
			taskEmitter := task0.emitter
			startTime := time.Now()
			defer func() {
				if task0.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task0.ran.Store(true)

			v1 = _34_12()

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task0.job = sched.Enqueue(ctx, cff.Job{
			Run: task0.run,
		})
		tasks = append(tasks, task0)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:35:12
		var (
			v2 int
		)
		task1 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1.emitter = cff.NopTaskEmitter()
		task1.run = func(ctx context.Context) (err error) {
			taskEmitter := task1.emitter
			startTime := time.Now()
			defer func() {
				if task1.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1.ran.Store(true)

			v2 = _35_12()

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1.job = sched.Enqueue(ctx, cff.Job{
			Run: task1.run,
		})
		tasks = append(tasks, task1)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:36:12
		var (
			v3 float64
		)
		task2 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task2.emitter = cff.NopTaskEmitter()
		task2.run = func(ctx context.Context) (err error) {
			taskEmitter := task2.emitter
			startTime := time.Now()
			defer func() {
				if task2.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task2.ran.Store(true)

			v3 = _36_12(v1, v2)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task2.job = sched.Enqueue(ctx, cff.Job{
			Run: task2.run,
			Dependencies: []*cff.ScheduledJob{
				task0.job,
				task1.job,
			},
		})
		tasks = append(tasks, task2)

		if err := sched.Wait(ctx); err != nil {
			flowEmitter.FlowError(ctx, err)
			return err
		}

		*(_33_15) = v3 // float64

		flowEmitter.FlowSuccess(ctx)
		return nil
	}()
	return res
}

// BaselineNative is a re-implementation of the Simple flow that makes the most optimal use of Go synchronization primitives
// while still running the two tasks in parallel. It should serve as a baseline as comparison to the Simple function.
func BaselineNative() float64 {
	var aReturn int64
	var bReturn int
	var wg sync.WaitGroup

	wg.Add(2)
	go func() {
		aReturn = a()
		wg.Done()
	}()
	go func() {
		bReturn = b()
		wg.Done()
	}()
	wg.Wait()
	return c(aReturn, bReturn)
}

// Metrics is the same flow as Simple but with instrumentation added.
func Metrics(logger *zap.Logger, scope tally.Scope) float64 {
	var res float64
	func() (err error) {

		_65_3 := context.Background()

		_66_22 := "Metrics"

		_67_19 := cff.TallyEmitter(scope)

		_68_19 := cff.LogEmitter(logger)

		_69_15 := &res

		_71_4 := a

		_72_19 := "a"

		_75_4 := b

		_76_19 := "b"

		_79_4 := c

		_80_19 := "c"
		ctx := _65_3
		emitter := cff.EmitterStack(_67_19, _68_19)

		var (
			flowInfo = &cff.FlowInfo{
				Name:   _66_22,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   64,
				Column: 2,
			}
			flowEmitter = emitter.FlowInit(flowInfo)

			schedInfo = &cff.SchedulerInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			}

			// possibly unused
			_ = flowInfo
		)

		startTime := time.Now()
		defer func() { flowEmitter.FlowDone(ctx, time.Since(startTime)) }()

		schedEmitter := emitter.SchedulerInit(schedInfo)

		sched := cff.BeginFlow(
			cff.SchedulerParams{
				Emitter: schedEmitter,
			},
		)

		var tasks []*struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		}
		defer func() {
			for _, t := range tasks {
				if !t.ran.Load() {
					t.emitter.TaskSkipped(ctx, err)
				}
			}
		}()

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:71:4
		var (
			v1 int64
		)
		task3 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task3.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _72_19,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   71,
				Column: 4,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task3.run = func(ctx context.Context) (err error) {
			taskEmitter := task3.emitter
			startTime := time.Now()
			defer func() {
				if task3.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task3.ran.Store(true)

			v1 = _71_4()

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task3.job = sched.Enqueue(ctx, cff.Job{
			Run: task3.run,
		})
		tasks = append(tasks, task3)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:75:4
		var (
			v2 int
		)
		task4 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task4.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _76_19,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   75,
				Column: 4,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task4.run = func(ctx context.Context) (err error) {
			taskEmitter := task4.emitter
			startTime := time.Now()
			defer func() {
				if task4.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task4.ran.Store(true)

			v2 = _75_4()

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task4.job = sched.Enqueue(ctx, cff.Job{
			Run: task4.run,
		})
		tasks = append(tasks, task4)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:79:4
		var (
			v3 float64
		)
		task5 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task5.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _80_19,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   79,
				Column: 4,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task5.run = func(ctx context.Context) (err error) {
			taskEmitter := task5.emitter
			startTime := time.Now()
			defer func() {
				if task5.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task5.ran.Store(true)

			v3 = _79_4(v1, v2)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task5.job = sched.Enqueue(ctx, cff.Job{
			Run: task5.run,
			Dependencies: []*cff.ScheduledJob{
				task3.job,
				task4.job,
			},
		})
		tasks = append(tasks, task5)

		if err := sched.Wait(ctx); err != nil {
			flowEmitter.FlowError(ctx, err)
			return err
		}

		*(_69_15) = v3 // float64

		flowEmitter.FlowSuccess(ctx)
		return nil
	}()
	return res
}

// MetricsWithSharedEmitter uses the same tasks as Metrics, but defines
// two flows of the same name and the same tasks. This should measure the
// performance of any cache optimizations implemented in tally or log
// emitters.
func MetricsWithSharedEmitter(logger *zap.Logger, scope tally.Scope) float64 {
	var res float64

	emitter := cff.TallyEmitter(scope)
	logemit := cff.LogEmitter(logger)
	ctx := context.Background()

	func() (err error) {

		_98_3 := ctx

		_99_22 := "MetricsWithSharedEmitter"

		_100_19 := emitter

		_101_19 := logemit

		_102_15 := &res

		_103_12 := a

		_103_30 := "a"

		_104_12 := b

		_104_30 := "b"

		_105_12 := c

		_105_30 := "c"
		ctx := _98_3
		emitter := cff.EmitterStack(_100_19, _101_19)

		var (
			flowInfo = &cff.FlowInfo{
				Name:   _99_22,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   97,
				Column: 2,
			}
			flowEmitter = emitter.FlowInit(flowInfo)

			schedInfo = &cff.SchedulerInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			}

			// possibly unused
			_ = flowInfo
		)

		startTime := time.Now()
		defer func() { flowEmitter.FlowDone(ctx, time.Since(startTime)) }()

		schedEmitter := emitter.SchedulerInit(schedInfo)

		sched := cff.BeginFlow(
			cff.SchedulerParams{
				Emitter: schedEmitter,
			},
		)

		var tasks []*struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		}
		defer func() {
			for _, t := range tasks {
				if !t.ran.Load() {
					t.emitter.TaskSkipped(ctx, err)
				}
			}
		}()

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:103:12
		var (
			v1 int64
		)
		task6 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task6.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _103_30,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   103,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task6.run = func(ctx context.Context) (err error) {
			taskEmitter := task6.emitter
			startTime := time.Now()
			defer func() {
				if task6.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task6.ran.Store(true)

			v1 = _103_12()

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task6.job = sched.Enqueue(ctx, cff.Job{
			Run: task6.run,
		})
		tasks = append(tasks, task6)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:104:12
		var (
			v2 int
		)
		task7 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task7.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _104_30,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   104,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task7.run = func(ctx context.Context) (err error) {
			taskEmitter := task7.emitter
			startTime := time.Now()
			defer func() {
				if task7.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task7.ran.Store(true)

			v2 = _104_12()

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task7.job = sched.Enqueue(ctx, cff.Job{
			Run: task7.run,
		})
		tasks = append(tasks, task7)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:105:12
		var (
			v3 float64
		)
		task8 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task8.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _105_30,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   105,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task8.run = func(ctx context.Context) (err error) {
			taskEmitter := task8.emitter
			startTime := time.Now()
			defer func() {
				if task8.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task8.ran.Store(true)

			v3 = _105_12(v1, v2)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task8.job = sched.Enqueue(ctx, cff.Job{
			Run: task8.run,
			Dependencies: []*cff.ScheduledJob{
				task6.job,
				task7.job,
			},
		})
		tasks = append(tasks, task8)

		if err := sched.Wait(ctx); err != nil {
			flowEmitter.FlowError(ctx, err)
			return err
		}

		*(_102_15) = v3 // float64

		flowEmitter.FlowSuccess(ctx)
		return nil
	}()

	func() (err error) {

		_109_3 := ctx

		_110_22 := "MetricsWithSharedEmitter"

		_111_19 := emitter

		_112_19 := logemit

		_113_15 := &res

		_114_12 := a

		_114_30 := "a"

		_115_12 := b

		_115_30 := "b"

		_116_12 := c

		_116_30 := "c"
		ctx := _109_3
		emitter := cff.EmitterStack(_111_19, _112_19)

		var (
			flowInfo = &cff.FlowInfo{
				Name:   _110_22,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   108,
				Column: 2,
			}
			flowEmitter = emitter.FlowInit(flowInfo)

			schedInfo = &cff.SchedulerInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			}

			// possibly unused
			_ = flowInfo
		)

		startTime := time.Now()
		defer func() { flowEmitter.FlowDone(ctx, time.Since(startTime)) }()

		schedEmitter := emitter.SchedulerInit(schedInfo)

		sched := cff.BeginFlow(
			cff.SchedulerParams{
				Emitter: schedEmitter,
			},
		)

		var tasks []*struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		}
		defer func() {
			for _, t := range tasks {
				if !t.ran.Load() {
					t.emitter.TaskSkipped(ctx, err)
				}
			}
		}()

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:114:12
		var (
			v1 int64
		)
		task9 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task9.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _114_30,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   114,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task9.run = func(ctx context.Context) (err error) {
			taskEmitter := task9.emitter
			startTime := time.Now()
			defer func() {
				if task9.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task9.ran.Store(true)

			v1 = _114_12()

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task9.job = sched.Enqueue(ctx, cff.Job{
			Run: task9.run,
		})
		tasks = append(tasks, task9)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:115:12
		var (
			v2 int
		)
		task10 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task10.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _115_30,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   115,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task10.run = func(ctx context.Context) (err error) {
			taskEmitter := task10.emitter
			startTime := time.Now()
			defer func() {
				if task10.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task10.ran.Store(true)

			v2 = _115_12()

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task10.job = sched.Enqueue(ctx, cff.Job{
			Run: task10.run,
		})
		tasks = append(tasks, task10)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:116:12
		var (
			v3 float64
		)
		task11 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task11.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _116_30,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   116,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task11.run = func(ctx context.Context) (err error) {
			taskEmitter := task11.emitter
			startTime := time.Now()
			defer func() {
				if task11.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task11.ran.Store(true)

			v3 = _116_12(v1, v2)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task11.job = sched.Enqueue(ctx, cff.Job{
			Run: task11.run,
			Dependencies: []*cff.ScheduledJob{
				task9.job,
				task10.job,
			},
		})
		tasks = append(tasks, task11)

		if err := sched.Wait(ctx); err != nil {
			flowEmitter.FlowError(ctx, err)
			return err
		}

		*(_113_15) = v3 // float64

		flowEmitter.FlowSuccess(ctx)
		return nil
	}()

	return res
}

// Metrics100 is a flow with 99 dependent tasks
func Metrics100(logger *zap.Logger, scope tally.Scope) float64 {
	var res float64
	func() (err error) {

		_126_3 := context.Background()

		_127_22 := "Metrics100"

		_128_19 := cff.TallyEmitter(scope)

		_129_19 := cff.LogEmitter(logger)

		_130_15 := &res

		_132_4 := func() float64 { return 0 }

		_133_19 := "base"

		_135_12 := func(i float64) {}

		_135_47 := "1"

		_136_12 := func(i float64) {}

		_136_47 := "2"

		_137_12 := func(i float64) {}

		_137_47 := "3"

		_138_12 := func(i float64) {}

		_138_47 := "4"

		_139_12 := func(i float64) {}

		_139_47 := "5"

		_140_12 := func(i float64) {}

		_140_47 := "6"

		_141_12 := func(i float64) {}

		_141_47 := "7"

		_142_12 := func(i float64) {}

		_142_47 := "8"

		_143_12 := func(i float64) {}

		_143_47 := "9"

		_144_12 := func(i float64) {}

		_144_47 := "10"

		_145_12 := func(i float64) {}

		_145_47 := "11"

		_146_12 := func(i float64) {}

		_146_47 := "12"

		_147_12 := func(i float64) {}

		_147_47 := "13"

		_148_12 := func(i float64) {}

		_148_47 := "14"

		_149_12 := func(i float64) {}

		_149_47 := "15"

		_150_12 := func(i float64) {}

		_150_47 := "16"

		_151_12 := func(i float64) {}

		_151_47 := "17"

		_152_12 := func(i float64) {}

		_152_47 := "18"

		_153_12 := func(i float64) {}

		_153_47 := "19"

		_154_12 := func(i float64) {}

		_154_47 := "20"

		_155_12 := func(i float64) {}

		_155_47 := "21"

		_156_12 := func(i float64) {}

		_156_47 := "22"

		_157_12 := func(i float64) {}

		_157_47 := "23"

		_158_12 := func(i float64) {}

		_158_47 := "24"

		_159_12 := func(i float64) {}

		_159_47 := "25"

		_160_12 := func(i float64) {}

		_160_47 := "26"

		_161_12 := func(i float64) {}

		_161_47 := "27"

		_162_12 := func(i float64) {}

		_162_47 := "28"

		_163_12 := func(i float64) {}

		_163_47 := "29"

		_164_12 := func(i float64) {}

		_164_47 := "30"

		_165_12 := func(i float64) {}

		_165_47 := "31"

		_166_12 := func(i float64) {}

		_166_47 := "32"

		_167_12 := func(i float64) {}

		_167_47 := "33"

		_168_12 := func(i float64) {}

		_168_47 := "34"

		_169_12 := func(i float64) {}

		_169_47 := "35"

		_170_12 := func(i float64) {}

		_170_47 := "36"

		_171_12 := func(i float64) {}

		_171_47 := "37"

		_172_12 := func(i float64) {}

		_172_47 := "38"

		_173_12 := func(i float64) {}

		_173_47 := "39"

		_174_12 := func(i float64) {}

		_174_47 := "40"

		_175_12 := func(i float64) {}

		_175_47 := "41"

		_176_12 := func(i float64) {}

		_176_47 := "42"

		_177_12 := func(i float64) {}

		_177_47 := "43"

		_178_12 := func(i float64) {}

		_178_47 := "44"

		_179_12 := func(i float64) {}

		_179_47 := "45"

		_180_12 := func(i float64) {}

		_180_47 := "46"

		_181_12 := func(i float64) {}

		_181_47 := "47"

		_182_12 := func(i float64) {}

		_182_47 := "48"

		_183_12 := func(i float64) {}

		_183_47 := "49"

		_184_12 := func(i float64) {}

		_184_47 := "50"

		_185_12 := func(i float64) {}

		_185_47 := "51"

		_186_12 := func(i float64) {}

		_186_47 := "52"

		_187_12 := func(i float64) {}

		_187_47 := "53"

		_188_12 := func(i float64) {}

		_188_47 := "54"

		_189_12 := func(i float64) {}

		_189_47 := "55"

		_190_12 := func(i float64) {}

		_190_47 := "56"

		_191_12 := func(i float64) {}

		_191_47 := "57"

		_192_12 := func(i float64) {}

		_192_47 := "58"

		_193_12 := func(i float64) {}

		_193_47 := "59"

		_194_12 := func(i float64) {}

		_194_47 := "60"

		_195_12 := func(i float64) {}

		_195_47 := "61"

		_196_12 := func(i float64) {}

		_196_47 := "62"

		_197_12 := func(i float64) {}

		_197_47 := "63"

		_198_12 := func(i float64) {}

		_198_47 := "64"

		_199_12 := func(i float64) {}

		_199_47 := "65"

		_200_12 := func(i float64) {}

		_200_47 := "66"

		_201_12 := func(i float64) {}

		_201_47 := "67"

		_202_12 := func(i float64) {}

		_202_47 := "68"

		_203_12 := func(i float64) {}

		_203_47 := "69"

		_204_12 := func(i float64) {}

		_204_47 := "70"

		_205_12 := func(i float64) {}

		_205_47 := "71"

		_206_12 := func(i float64) {}

		_206_47 := "72"

		_207_12 := func(i float64) {}

		_207_47 := "73"

		_208_12 := func(i float64) {}

		_208_47 := "74"

		_209_12 := func(i float64) {}

		_209_47 := "75"

		_210_12 := func(i float64) {}

		_210_47 := "76"

		_211_12 := func(i float64) {}

		_211_47 := "77"

		_212_12 := func(i float64) {}

		_212_47 := "78"

		_213_12 := func(i float64) {}

		_213_47 := "79"

		_214_12 := func(i float64) {}

		_214_47 := "80"

		_215_12 := func(i float64) {}

		_215_47 := "81"

		_216_12 := func(i float64) {}

		_216_47 := "82"

		_217_12 := func(i float64) {}

		_217_47 := "83"

		_218_12 := func(i float64) {}

		_218_47 := "84"

		_219_12 := func(i float64) {}

		_219_47 := "85"

		_220_12 := func(i float64) {}

		_220_47 := "86"

		_221_12 := func(i float64) {}

		_221_47 := "87"

		_222_12 := func(i float64) {}

		_222_47 := "88"

		_223_12 := func(i float64) {}

		_223_47 := "89"

		_224_12 := func(i float64) {}

		_224_47 := "90"

		_225_12 := func(i float64) {}

		_225_47 := "91"

		_226_12 := func(i float64) {}

		_226_47 := "92"

		_227_12 := func(i float64) {}

		_227_47 := "93"

		_228_12 := func(i float64) {}

		_228_47 := "94"

		_229_12 := func(i float64) {}

		_229_47 := "95"

		_230_12 := func(i float64) {}

		_230_47 := "96"

		_231_12 := func(i float64) {}

		_231_47 := "97"

		_232_12 := func(i float64) {}

		_232_47 := "98"

		_233_12 := func(i float64) {}

		_233_47 := "99"

		_234_12 := func(i float64) {}

		_234_47 := "100"
		ctx := _126_3
		emitter := cff.EmitterStack(_128_19, _129_19)

		var (
			flowInfo = &cff.FlowInfo{
				Name:   _127_22,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   125,
				Column: 2,
			}
			flowEmitter = emitter.FlowInit(flowInfo)

			schedInfo = &cff.SchedulerInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			}

			// possibly unused
			_ = flowInfo
		)

		startTime := time.Now()
		defer func() { flowEmitter.FlowDone(ctx, time.Since(startTime)) }()

		schedEmitter := emitter.SchedulerInit(schedInfo)

		sched := cff.BeginFlow(
			cff.SchedulerParams{
				Emitter: schedEmitter,
			},
		)

		var tasks []*struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		}
		defer func() {
			for _, t := range tasks {
				if !t.ran.Load() {
					t.emitter.TaskSkipped(ctx, err)
				}
			}
		}()

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:132:4
		var (
			v3 float64
		)
		task12 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task12.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _133_19,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   132,
				Column: 4,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task12.run = func(ctx context.Context) (err error) {
			taskEmitter := task12.emitter
			startTime := time.Now()
			defer func() {
				if task12.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task12.ran.Store(true)

			v3 = _132_4()

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task12.job = sched.Enqueue(ctx, cff.Job{
			Run: task12.run,
		})
		tasks = append(tasks, task12)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:135:12
		task13 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task13.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _135_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   135,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task13.run = func(ctx context.Context) (err error) {
			taskEmitter := task13.emitter
			startTime := time.Now()
			defer func() {
				if task13.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task13.ran.Store(true)

			_135_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task13.job = sched.Enqueue(ctx, cff.Job{
			Run: task13.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task13)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:136:12
		task14 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task14.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _136_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   136,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task14.run = func(ctx context.Context) (err error) {
			taskEmitter := task14.emitter
			startTime := time.Now()
			defer func() {
				if task14.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task14.ran.Store(true)

			_136_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task14.job = sched.Enqueue(ctx, cff.Job{
			Run: task14.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task14)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:137:12
		task15 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task15.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _137_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   137,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task15.run = func(ctx context.Context) (err error) {
			taskEmitter := task15.emitter
			startTime := time.Now()
			defer func() {
				if task15.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task15.ran.Store(true)

			_137_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task15.job = sched.Enqueue(ctx, cff.Job{
			Run: task15.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task15)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:138:12
		task16 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task16.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _138_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   138,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task16.run = func(ctx context.Context) (err error) {
			taskEmitter := task16.emitter
			startTime := time.Now()
			defer func() {
				if task16.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task16.ran.Store(true)

			_138_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task16.job = sched.Enqueue(ctx, cff.Job{
			Run: task16.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task16)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:139:12
		task17 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task17.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _139_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   139,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task17.run = func(ctx context.Context) (err error) {
			taskEmitter := task17.emitter
			startTime := time.Now()
			defer func() {
				if task17.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task17.ran.Store(true)

			_139_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task17.job = sched.Enqueue(ctx, cff.Job{
			Run: task17.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task17)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:140:12
		task18 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task18.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _140_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   140,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task18.run = func(ctx context.Context) (err error) {
			taskEmitter := task18.emitter
			startTime := time.Now()
			defer func() {
				if task18.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task18.ran.Store(true)

			_140_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task18.job = sched.Enqueue(ctx, cff.Job{
			Run: task18.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task18)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:141:12
		task19 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task19.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _141_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   141,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task19.run = func(ctx context.Context) (err error) {
			taskEmitter := task19.emitter
			startTime := time.Now()
			defer func() {
				if task19.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task19.ran.Store(true)

			_141_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task19.job = sched.Enqueue(ctx, cff.Job{
			Run: task19.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task19)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:142:12
		task20 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task20.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _142_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   142,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task20.run = func(ctx context.Context) (err error) {
			taskEmitter := task20.emitter
			startTime := time.Now()
			defer func() {
				if task20.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task20.ran.Store(true)

			_142_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task20.job = sched.Enqueue(ctx, cff.Job{
			Run: task20.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task20)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:143:12
		task21 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task21.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _143_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   143,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task21.run = func(ctx context.Context) (err error) {
			taskEmitter := task21.emitter
			startTime := time.Now()
			defer func() {
				if task21.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task21.ran.Store(true)

			_143_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task21.job = sched.Enqueue(ctx, cff.Job{
			Run: task21.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task21)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:144:12
		task22 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task22.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _144_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   144,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task22.run = func(ctx context.Context) (err error) {
			taskEmitter := task22.emitter
			startTime := time.Now()
			defer func() {
				if task22.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task22.ran.Store(true)

			_144_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task22.job = sched.Enqueue(ctx, cff.Job{
			Run: task22.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task22)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:145:12
		task23 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task23.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _145_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   145,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task23.run = func(ctx context.Context) (err error) {
			taskEmitter := task23.emitter
			startTime := time.Now()
			defer func() {
				if task23.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task23.ran.Store(true)

			_145_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task23.job = sched.Enqueue(ctx, cff.Job{
			Run: task23.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task23)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:146:12
		task24 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task24.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _146_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   146,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task24.run = func(ctx context.Context) (err error) {
			taskEmitter := task24.emitter
			startTime := time.Now()
			defer func() {
				if task24.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task24.ran.Store(true)

			_146_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task24.job = sched.Enqueue(ctx, cff.Job{
			Run: task24.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task24)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:147:12
		task25 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task25.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _147_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   147,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task25.run = func(ctx context.Context) (err error) {
			taskEmitter := task25.emitter
			startTime := time.Now()
			defer func() {
				if task25.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task25.ran.Store(true)

			_147_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task25.job = sched.Enqueue(ctx, cff.Job{
			Run: task25.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task25)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:148:12
		task26 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task26.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _148_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   148,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task26.run = func(ctx context.Context) (err error) {
			taskEmitter := task26.emitter
			startTime := time.Now()
			defer func() {
				if task26.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task26.ran.Store(true)

			_148_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task26.job = sched.Enqueue(ctx, cff.Job{
			Run: task26.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task26)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:149:12
		task27 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task27.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _149_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   149,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task27.run = func(ctx context.Context) (err error) {
			taskEmitter := task27.emitter
			startTime := time.Now()
			defer func() {
				if task27.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task27.ran.Store(true)

			_149_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task27.job = sched.Enqueue(ctx, cff.Job{
			Run: task27.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task27)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:150:12
		task28 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task28.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _150_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   150,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task28.run = func(ctx context.Context) (err error) {
			taskEmitter := task28.emitter
			startTime := time.Now()
			defer func() {
				if task28.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task28.ran.Store(true)

			_150_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task28.job = sched.Enqueue(ctx, cff.Job{
			Run: task28.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task28)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:151:12
		task29 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task29.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _151_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   151,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task29.run = func(ctx context.Context) (err error) {
			taskEmitter := task29.emitter
			startTime := time.Now()
			defer func() {
				if task29.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task29.ran.Store(true)

			_151_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task29.job = sched.Enqueue(ctx, cff.Job{
			Run: task29.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task29)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:152:12
		task30 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task30.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _152_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   152,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task30.run = func(ctx context.Context) (err error) {
			taskEmitter := task30.emitter
			startTime := time.Now()
			defer func() {
				if task30.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task30.ran.Store(true)

			_152_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task30.job = sched.Enqueue(ctx, cff.Job{
			Run: task30.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task30)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:153:12
		task31 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task31.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _153_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   153,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task31.run = func(ctx context.Context) (err error) {
			taskEmitter := task31.emitter
			startTime := time.Now()
			defer func() {
				if task31.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task31.ran.Store(true)

			_153_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task31.job = sched.Enqueue(ctx, cff.Job{
			Run: task31.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task31)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:154:12
		task32 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task32.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _154_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   154,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task32.run = func(ctx context.Context) (err error) {
			taskEmitter := task32.emitter
			startTime := time.Now()
			defer func() {
				if task32.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task32.ran.Store(true)

			_154_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task32.job = sched.Enqueue(ctx, cff.Job{
			Run: task32.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task32)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:155:12
		task33 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task33.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _155_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   155,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task33.run = func(ctx context.Context) (err error) {
			taskEmitter := task33.emitter
			startTime := time.Now()
			defer func() {
				if task33.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task33.ran.Store(true)

			_155_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task33.job = sched.Enqueue(ctx, cff.Job{
			Run: task33.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task33)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:156:12
		task34 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task34.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _156_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   156,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task34.run = func(ctx context.Context) (err error) {
			taskEmitter := task34.emitter
			startTime := time.Now()
			defer func() {
				if task34.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task34.ran.Store(true)

			_156_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task34.job = sched.Enqueue(ctx, cff.Job{
			Run: task34.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task34)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:157:12
		task35 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task35.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _157_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   157,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task35.run = func(ctx context.Context) (err error) {
			taskEmitter := task35.emitter
			startTime := time.Now()
			defer func() {
				if task35.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task35.ran.Store(true)

			_157_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task35.job = sched.Enqueue(ctx, cff.Job{
			Run: task35.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task35)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:158:12
		task36 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task36.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _158_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   158,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task36.run = func(ctx context.Context) (err error) {
			taskEmitter := task36.emitter
			startTime := time.Now()
			defer func() {
				if task36.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task36.ran.Store(true)

			_158_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task36.job = sched.Enqueue(ctx, cff.Job{
			Run: task36.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task36)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:159:12
		task37 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task37.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _159_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   159,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task37.run = func(ctx context.Context) (err error) {
			taskEmitter := task37.emitter
			startTime := time.Now()
			defer func() {
				if task37.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task37.ran.Store(true)

			_159_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task37.job = sched.Enqueue(ctx, cff.Job{
			Run: task37.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task37)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:160:12
		task38 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task38.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _160_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   160,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task38.run = func(ctx context.Context) (err error) {
			taskEmitter := task38.emitter
			startTime := time.Now()
			defer func() {
				if task38.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task38.ran.Store(true)

			_160_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task38.job = sched.Enqueue(ctx, cff.Job{
			Run: task38.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task38)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:161:12
		task39 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task39.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _161_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   161,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task39.run = func(ctx context.Context) (err error) {
			taskEmitter := task39.emitter
			startTime := time.Now()
			defer func() {
				if task39.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task39.ran.Store(true)

			_161_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task39.job = sched.Enqueue(ctx, cff.Job{
			Run: task39.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task39)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:162:12
		task40 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task40.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _162_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   162,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task40.run = func(ctx context.Context) (err error) {
			taskEmitter := task40.emitter
			startTime := time.Now()
			defer func() {
				if task40.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task40.ran.Store(true)

			_162_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task40.job = sched.Enqueue(ctx, cff.Job{
			Run: task40.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task40)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:163:12
		task41 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task41.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _163_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   163,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task41.run = func(ctx context.Context) (err error) {
			taskEmitter := task41.emitter
			startTime := time.Now()
			defer func() {
				if task41.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task41.ran.Store(true)

			_163_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task41.job = sched.Enqueue(ctx, cff.Job{
			Run: task41.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task41)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:164:12
		task42 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task42.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _164_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   164,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task42.run = func(ctx context.Context) (err error) {
			taskEmitter := task42.emitter
			startTime := time.Now()
			defer func() {
				if task42.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task42.ran.Store(true)

			_164_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task42.job = sched.Enqueue(ctx, cff.Job{
			Run: task42.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task42)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:165:12
		task43 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task43.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _165_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   165,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task43.run = func(ctx context.Context) (err error) {
			taskEmitter := task43.emitter
			startTime := time.Now()
			defer func() {
				if task43.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task43.ran.Store(true)

			_165_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task43.job = sched.Enqueue(ctx, cff.Job{
			Run: task43.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task43)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:166:12
		task44 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task44.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _166_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   166,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task44.run = func(ctx context.Context) (err error) {
			taskEmitter := task44.emitter
			startTime := time.Now()
			defer func() {
				if task44.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task44.ran.Store(true)

			_166_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task44.job = sched.Enqueue(ctx, cff.Job{
			Run: task44.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task44)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:167:12
		task45 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task45.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _167_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   167,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task45.run = func(ctx context.Context) (err error) {
			taskEmitter := task45.emitter
			startTime := time.Now()
			defer func() {
				if task45.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task45.ran.Store(true)

			_167_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task45.job = sched.Enqueue(ctx, cff.Job{
			Run: task45.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task45)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:168:12
		task46 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task46.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _168_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   168,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task46.run = func(ctx context.Context) (err error) {
			taskEmitter := task46.emitter
			startTime := time.Now()
			defer func() {
				if task46.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task46.ran.Store(true)

			_168_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task46.job = sched.Enqueue(ctx, cff.Job{
			Run: task46.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task46)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:169:12
		task47 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task47.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _169_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   169,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task47.run = func(ctx context.Context) (err error) {
			taskEmitter := task47.emitter
			startTime := time.Now()
			defer func() {
				if task47.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task47.ran.Store(true)

			_169_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task47.job = sched.Enqueue(ctx, cff.Job{
			Run: task47.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task47)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:170:12
		task48 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task48.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _170_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   170,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task48.run = func(ctx context.Context) (err error) {
			taskEmitter := task48.emitter
			startTime := time.Now()
			defer func() {
				if task48.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task48.ran.Store(true)

			_170_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task48.job = sched.Enqueue(ctx, cff.Job{
			Run: task48.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task48)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:171:12
		task49 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task49.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _171_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   171,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task49.run = func(ctx context.Context) (err error) {
			taskEmitter := task49.emitter
			startTime := time.Now()
			defer func() {
				if task49.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task49.ran.Store(true)

			_171_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task49.job = sched.Enqueue(ctx, cff.Job{
			Run: task49.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task49)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:172:12
		task50 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task50.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _172_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   172,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task50.run = func(ctx context.Context) (err error) {
			taskEmitter := task50.emitter
			startTime := time.Now()
			defer func() {
				if task50.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task50.ran.Store(true)

			_172_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task50.job = sched.Enqueue(ctx, cff.Job{
			Run: task50.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task50)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:173:12
		task51 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task51.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _173_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   173,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task51.run = func(ctx context.Context) (err error) {
			taskEmitter := task51.emitter
			startTime := time.Now()
			defer func() {
				if task51.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task51.ran.Store(true)

			_173_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task51.job = sched.Enqueue(ctx, cff.Job{
			Run: task51.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task51)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:174:12
		task52 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task52.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _174_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   174,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task52.run = func(ctx context.Context) (err error) {
			taskEmitter := task52.emitter
			startTime := time.Now()
			defer func() {
				if task52.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task52.ran.Store(true)

			_174_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task52.job = sched.Enqueue(ctx, cff.Job{
			Run: task52.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task52)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:175:12
		task53 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task53.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _175_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   175,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task53.run = func(ctx context.Context) (err error) {
			taskEmitter := task53.emitter
			startTime := time.Now()
			defer func() {
				if task53.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task53.ran.Store(true)

			_175_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task53.job = sched.Enqueue(ctx, cff.Job{
			Run: task53.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task53)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:176:12
		task54 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task54.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _176_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   176,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task54.run = func(ctx context.Context) (err error) {
			taskEmitter := task54.emitter
			startTime := time.Now()
			defer func() {
				if task54.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task54.ran.Store(true)

			_176_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task54.job = sched.Enqueue(ctx, cff.Job{
			Run: task54.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task54)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:177:12
		task55 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task55.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _177_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   177,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task55.run = func(ctx context.Context) (err error) {
			taskEmitter := task55.emitter
			startTime := time.Now()
			defer func() {
				if task55.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task55.ran.Store(true)

			_177_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task55.job = sched.Enqueue(ctx, cff.Job{
			Run: task55.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task55)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:178:12
		task56 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task56.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _178_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   178,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task56.run = func(ctx context.Context) (err error) {
			taskEmitter := task56.emitter
			startTime := time.Now()
			defer func() {
				if task56.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task56.ran.Store(true)

			_178_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task56.job = sched.Enqueue(ctx, cff.Job{
			Run: task56.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task56)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:179:12
		task57 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task57.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _179_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   179,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task57.run = func(ctx context.Context) (err error) {
			taskEmitter := task57.emitter
			startTime := time.Now()
			defer func() {
				if task57.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task57.ran.Store(true)

			_179_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task57.job = sched.Enqueue(ctx, cff.Job{
			Run: task57.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task57)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:180:12
		task58 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task58.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _180_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   180,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task58.run = func(ctx context.Context) (err error) {
			taskEmitter := task58.emitter
			startTime := time.Now()
			defer func() {
				if task58.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task58.ran.Store(true)

			_180_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task58.job = sched.Enqueue(ctx, cff.Job{
			Run: task58.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task58)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:181:12
		task59 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task59.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _181_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   181,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task59.run = func(ctx context.Context) (err error) {
			taskEmitter := task59.emitter
			startTime := time.Now()
			defer func() {
				if task59.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task59.ran.Store(true)

			_181_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task59.job = sched.Enqueue(ctx, cff.Job{
			Run: task59.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task59)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:182:12
		task60 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task60.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _182_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   182,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task60.run = func(ctx context.Context) (err error) {
			taskEmitter := task60.emitter
			startTime := time.Now()
			defer func() {
				if task60.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task60.ran.Store(true)

			_182_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task60.job = sched.Enqueue(ctx, cff.Job{
			Run: task60.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task60)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:183:12
		task61 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task61.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _183_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   183,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task61.run = func(ctx context.Context) (err error) {
			taskEmitter := task61.emitter
			startTime := time.Now()
			defer func() {
				if task61.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task61.ran.Store(true)

			_183_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task61.job = sched.Enqueue(ctx, cff.Job{
			Run: task61.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task61)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:184:12
		task62 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task62.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _184_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   184,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task62.run = func(ctx context.Context) (err error) {
			taskEmitter := task62.emitter
			startTime := time.Now()
			defer func() {
				if task62.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task62.ran.Store(true)

			_184_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task62.job = sched.Enqueue(ctx, cff.Job{
			Run: task62.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task62)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:185:12
		task63 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task63.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _185_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   185,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task63.run = func(ctx context.Context) (err error) {
			taskEmitter := task63.emitter
			startTime := time.Now()
			defer func() {
				if task63.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task63.ran.Store(true)

			_185_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task63.job = sched.Enqueue(ctx, cff.Job{
			Run: task63.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task63)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:186:12
		task64 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task64.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _186_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   186,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task64.run = func(ctx context.Context) (err error) {
			taskEmitter := task64.emitter
			startTime := time.Now()
			defer func() {
				if task64.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task64.ran.Store(true)

			_186_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task64.job = sched.Enqueue(ctx, cff.Job{
			Run: task64.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task64)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:187:12
		task65 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task65.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _187_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   187,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task65.run = func(ctx context.Context) (err error) {
			taskEmitter := task65.emitter
			startTime := time.Now()
			defer func() {
				if task65.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task65.ran.Store(true)

			_187_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task65.job = sched.Enqueue(ctx, cff.Job{
			Run: task65.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task65)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:188:12
		task66 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task66.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _188_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   188,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task66.run = func(ctx context.Context) (err error) {
			taskEmitter := task66.emitter
			startTime := time.Now()
			defer func() {
				if task66.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task66.ran.Store(true)

			_188_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task66.job = sched.Enqueue(ctx, cff.Job{
			Run: task66.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task66)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:189:12
		task67 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task67.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _189_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   189,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task67.run = func(ctx context.Context) (err error) {
			taskEmitter := task67.emitter
			startTime := time.Now()
			defer func() {
				if task67.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task67.ran.Store(true)

			_189_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task67.job = sched.Enqueue(ctx, cff.Job{
			Run: task67.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task67)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:190:12
		task68 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task68.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _190_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   190,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task68.run = func(ctx context.Context) (err error) {
			taskEmitter := task68.emitter
			startTime := time.Now()
			defer func() {
				if task68.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task68.ran.Store(true)

			_190_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task68.job = sched.Enqueue(ctx, cff.Job{
			Run: task68.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task68)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:191:12
		task69 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task69.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _191_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   191,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task69.run = func(ctx context.Context) (err error) {
			taskEmitter := task69.emitter
			startTime := time.Now()
			defer func() {
				if task69.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task69.ran.Store(true)

			_191_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task69.job = sched.Enqueue(ctx, cff.Job{
			Run: task69.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task69)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:192:12
		task70 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task70.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _192_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   192,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task70.run = func(ctx context.Context) (err error) {
			taskEmitter := task70.emitter
			startTime := time.Now()
			defer func() {
				if task70.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task70.ran.Store(true)

			_192_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task70.job = sched.Enqueue(ctx, cff.Job{
			Run: task70.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task70)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:193:12
		task71 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task71.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _193_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   193,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task71.run = func(ctx context.Context) (err error) {
			taskEmitter := task71.emitter
			startTime := time.Now()
			defer func() {
				if task71.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task71.ran.Store(true)

			_193_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task71.job = sched.Enqueue(ctx, cff.Job{
			Run: task71.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task71)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:194:12
		task72 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task72.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _194_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   194,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task72.run = func(ctx context.Context) (err error) {
			taskEmitter := task72.emitter
			startTime := time.Now()
			defer func() {
				if task72.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task72.ran.Store(true)

			_194_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task72.job = sched.Enqueue(ctx, cff.Job{
			Run: task72.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task72)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:195:12
		task73 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task73.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _195_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   195,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task73.run = func(ctx context.Context) (err error) {
			taskEmitter := task73.emitter
			startTime := time.Now()
			defer func() {
				if task73.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task73.ran.Store(true)

			_195_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task73.job = sched.Enqueue(ctx, cff.Job{
			Run: task73.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task73)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:196:12
		task74 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task74.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _196_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   196,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task74.run = func(ctx context.Context) (err error) {
			taskEmitter := task74.emitter
			startTime := time.Now()
			defer func() {
				if task74.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task74.ran.Store(true)

			_196_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task74.job = sched.Enqueue(ctx, cff.Job{
			Run: task74.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task74)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:197:12
		task75 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task75.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _197_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   197,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task75.run = func(ctx context.Context) (err error) {
			taskEmitter := task75.emitter
			startTime := time.Now()
			defer func() {
				if task75.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task75.ran.Store(true)

			_197_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task75.job = sched.Enqueue(ctx, cff.Job{
			Run: task75.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task75)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:198:12
		task76 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task76.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _198_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   198,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task76.run = func(ctx context.Context) (err error) {
			taskEmitter := task76.emitter
			startTime := time.Now()
			defer func() {
				if task76.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task76.ran.Store(true)

			_198_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task76.job = sched.Enqueue(ctx, cff.Job{
			Run: task76.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task76)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:199:12
		task77 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task77.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _199_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   199,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task77.run = func(ctx context.Context) (err error) {
			taskEmitter := task77.emitter
			startTime := time.Now()
			defer func() {
				if task77.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task77.ran.Store(true)

			_199_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task77.job = sched.Enqueue(ctx, cff.Job{
			Run: task77.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task77)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:200:12
		task78 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task78.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _200_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   200,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task78.run = func(ctx context.Context) (err error) {
			taskEmitter := task78.emitter
			startTime := time.Now()
			defer func() {
				if task78.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task78.ran.Store(true)

			_200_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task78.job = sched.Enqueue(ctx, cff.Job{
			Run: task78.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task78)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:201:12
		task79 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task79.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _201_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   201,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task79.run = func(ctx context.Context) (err error) {
			taskEmitter := task79.emitter
			startTime := time.Now()
			defer func() {
				if task79.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task79.ran.Store(true)

			_201_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task79.job = sched.Enqueue(ctx, cff.Job{
			Run: task79.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task79)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:202:12
		task80 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task80.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _202_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   202,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task80.run = func(ctx context.Context) (err error) {
			taskEmitter := task80.emitter
			startTime := time.Now()
			defer func() {
				if task80.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task80.ran.Store(true)

			_202_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task80.job = sched.Enqueue(ctx, cff.Job{
			Run: task80.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task80)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:203:12
		task81 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task81.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _203_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   203,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task81.run = func(ctx context.Context) (err error) {
			taskEmitter := task81.emitter
			startTime := time.Now()
			defer func() {
				if task81.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task81.ran.Store(true)

			_203_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task81.job = sched.Enqueue(ctx, cff.Job{
			Run: task81.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task81)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:204:12
		task82 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task82.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _204_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   204,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task82.run = func(ctx context.Context) (err error) {
			taskEmitter := task82.emitter
			startTime := time.Now()
			defer func() {
				if task82.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task82.ran.Store(true)

			_204_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task82.job = sched.Enqueue(ctx, cff.Job{
			Run: task82.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task82)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:205:12
		task83 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task83.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _205_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   205,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task83.run = func(ctx context.Context) (err error) {
			taskEmitter := task83.emitter
			startTime := time.Now()
			defer func() {
				if task83.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task83.ran.Store(true)

			_205_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task83.job = sched.Enqueue(ctx, cff.Job{
			Run: task83.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task83)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:206:12
		task84 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task84.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _206_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   206,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task84.run = func(ctx context.Context) (err error) {
			taskEmitter := task84.emitter
			startTime := time.Now()
			defer func() {
				if task84.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task84.ran.Store(true)

			_206_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task84.job = sched.Enqueue(ctx, cff.Job{
			Run: task84.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task84)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:207:12
		task85 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task85.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _207_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   207,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task85.run = func(ctx context.Context) (err error) {
			taskEmitter := task85.emitter
			startTime := time.Now()
			defer func() {
				if task85.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task85.ran.Store(true)

			_207_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task85.job = sched.Enqueue(ctx, cff.Job{
			Run: task85.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task85)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:208:12
		task86 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task86.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _208_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   208,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task86.run = func(ctx context.Context) (err error) {
			taskEmitter := task86.emitter
			startTime := time.Now()
			defer func() {
				if task86.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task86.ran.Store(true)

			_208_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task86.job = sched.Enqueue(ctx, cff.Job{
			Run: task86.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task86)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:209:12
		task87 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task87.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _209_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   209,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task87.run = func(ctx context.Context) (err error) {
			taskEmitter := task87.emitter
			startTime := time.Now()
			defer func() {
				if task87.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task87.ran.Store(true)

			_209_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task87.job = sched.Enqueue(ctx, cff.Job{
			Run: task87.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task87)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:210:12
		task88 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task88.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _210_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   210,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task88.run = func(ctx context.Context) (err error) {
			taskEmitter := task88.emitter
			startTime := time.Now()
			defer func() {
				if task88.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task88.ran.Store(true)

			_210_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task88.job = sched.Enqueue(ctx, cff.Job{
			Run: task88.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task88)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:211:12
		task89 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task89.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _211_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   211,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task89.run = func(ctx context.Context) (err error) {
			taskEmitter := task89.emitter
			startTime := time.Now()
			defer func() {
				if task89.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task89.ran.Store(true)

			_211_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task89.job = sched.Enqueue(ctx, cff.Job{
			Run: task89.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task89)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:212:12
		task90 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task90.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _212_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   212,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task90.run = func(ctx context.Context) (err error) {
			taskEmitter := task90.emitter
			startTime := time.Now()
			defer func() {
				if task90.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task90.ran.Store(true)

			_212_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task90.job = sched.Enqueue(ctx, cff.Job{
			Run: task90.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task90)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:213:12
		task91 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task91.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _213_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   213,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task91.run = func(ctx context.Context) (err error) {
			taskEmitter := task91.emitter
			startTime := time.Now()
			defer func() {
				if task91.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task91.ran.Store(true)

			_213_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task91.job = sched.Enqueue(ctx, cff.Job{
			Run: task91.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task91)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:214:12
		task92 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task92.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _214_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   214,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task92.run = func(ctx context.Context) (err error) {
			taskEmitter := task92.emitter
			startTime := time.Now()
			defer func() {
				if task92.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task92.ran.Store(true)

			_214_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task92.job = sched.Enqueue(ctx, cff.Job{
			Run: task92.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task92)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:215:12
		task93 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task93.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _215_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   215,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task93.run = func(ctx context.Context) (err error) {
			taskEmitter := task93.emitter
			startTime := time.Now()
			defer func() {
				if task93.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task93.ran.Store(true)

			_215_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task93.job = sched.Enqueue(ctx, cff.Job{
			Run: task93.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task93)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:216:12
		task94 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task94.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _216_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   216,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task94.run = func(ctx context.Context) (err error) {
			taskEmitter := task94.emitter
			startTime := time.Now()
			defer func() {
				if task94.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task94.ran.Store(true)

			_216_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task94.job = sched.Enqueue(ctx, cff.Job{
			Run: task94.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task94)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:217:12
		task95 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task95.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _217_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   217,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task95.run = func(ctx context.Context) (err error) {
			taskEmitter := task95.emitter
			startTime := time.Now()
			defer func() {
				if task95.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task95.ran.Store(true)

			_217_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task95.job = sched.Enqueue(ctx, cff.Job{
			Run: task95.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task95)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:218:12
		task96 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task96.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _218_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   218,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task96.run = func(ctx context.Context) (err error) {
			taskEmitter := task96.emitter
			startTime := time.Now()
			defer func() {
				if task96.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task96.ran.Store(true)

			_218_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task96.job = sched.Enqueue(ctx, cff.Job{
			Run: task96.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task96)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:219:12
		task97 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task97.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _219_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   219,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task97.run = func(ctx context.Context) (err error) {
			taskEmitter := task97.emitter
			startTime := time.Now()
			defer func() {
				if task97.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task97.ran.Store(true)

			_219_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task97.job = sched.Enqueue(ctx, cff.Job{
			Run: task97.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task97)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:220:12
		task98 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task98.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _220_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   220,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task98.run = func(ctx context.Context) (err error) {
			taskEmitter := task98.emitter
			startTime := time.Now()
			defer func() {
				if task98.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task98.ran.Store(true)

			_220_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task98.job = sched.Enqueue(ctx, cff.Job{
			Run: task98.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task98)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:221:12
		task99 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task99.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _221_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   221,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task99.run = func(ctx context.Context) (err error) {
			taskEmitter := task99.emitter
			startTime := time.Now()
			defer func() {
				if task99.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task99.ran.Store(true)

			_221_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task99.job = sched.Enqueue(ctx, cff.Job{
			Run: task99.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task99)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:222:12
		task100 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task100.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _222_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   222,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task100.run = func(ctx context.Context) (err error) {
			taskEmitter := task100.emitter
			startTime := time.Now()
			defer func() {
				if task100.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task100.ran.Store(true)

			_222_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task100.job = sched.Enqueue(ctx, cff.Job{
			Run: task100.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task100)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:223:12
		task101 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task101.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _223_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   223,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task101.run = func(ctx context.Context) (err error) {
			taskEmitter := task101.emitter
			startTime := time.Now()
			defer func() {
				if task101.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task101.ran.Store(true)

			_223_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task101.job = sched.Enqueue(ctx, cff.Job{
			Run: task101.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task101)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:224:12
		task102 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task102.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _224_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   224,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task102.run = func(ctx context.Context) (err error) {
			taskEmitter := task102.emitter
			startTime := time.Now()
			defer func() {
				if task102.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task102.ran.Store(true)

			_224_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task102.job = sched.Enqueue(ctx, cff.Job{
			Run: task102.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task102)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:225:12
		task103 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task103.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _225_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   225,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task103.run = func(ctx context.Context) (err error) {
			taskEmitter := task103.emitter
			startTime := time.Now()
			defer func() {
				if task103.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task103.ran.Store(true)

			_225_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task103.job = sched.Enqueue(ctx, cff.Job{
			Run: task103.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task103)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:226:12
		task104 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task104.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _226_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   226,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task104.run = func(ctx context.Context) (err error) {
			taskEmitter := task104.emitter
			startTime := time.Now()
			defer func() {
				if task104.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task104.ran.Store(true)

			_226_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task104.job = sched.Enqueue(ctx, cff.Job{
			Run: task104.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task104)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:227:12
		task105 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task105.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _227_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   227,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task105.run = func(ctx context.Context) (err error) {
			taskEmitter := task105.emitter
			startTime := time.Now()
			defer func() {
				if task105.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task105.ran.Store(true)

			_227_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task105.job = sched.Enqueue(ctx, cff.Job{
			Run: task105.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task105)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:228:12
		task106 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task106.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _228_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   228,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task106.run = func(ctx context.Context) (err error) {
			taskEmitter := task106.emitter
			startTime := time.Now()
			defer func() {
				if task106.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task106.ran.Store(true)

			_228_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task106.job = sched.Enqueue(ctx, cff.Job{
			Run: task106.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task106)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:229:12
		task107 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task107.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _229_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   229,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task107.run = func(ctx context.Context) (err error) {
			taskEmitter := task107.emitter
			startTime := time.Now()
			defer func() {
				if task107.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task107.ran.Store(true)

			_229_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task107.job = sched.Enqueue(ctx, cff.Job{
			Run: task107.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task107)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:230:12
		task108 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task108.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _230_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   230,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task108.run = func(ctx context.Context) (err error) {
			taskEmitter := task108.emitter
			startTime := time.Now()
			defer func() {
				if task108.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task108.ran.Store(true)

			_230_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task108.job = sched.Enqueue(ctx, cff.Job{
			Run: task108.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task108)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:231:12
		task109 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task109.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _231_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   231,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task109.run = func(ctx context.Context) (err error) {
			taskEmitter := task109.emitter
			startTime := time.Now()
			defer func() {
				if task109.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task109.ran.Store(true)

			_231_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task109.job = sched.Enqueue(ctx, cff.Job{
			Run: task109.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task109)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:232:12
		task110 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task110.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _232_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   232,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task110.run = func(ctx context.Context) (err error) {
			taskEmitter := task110.emitter
			startTime := time.Now()
			defer func() {
				if task110.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task110.ran.Store(true)

			_232_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task110.job = sched.Enqueue(ctx, cff.Job{
			Run: task110.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task110)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:233:12
		task111 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task111.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _233_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   233,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task111.run = func(ctx context.Context) (err error) {
			taskEmitter := task111.emitter
			startTime := time.Now()
			defer func() {
				if task111.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task111.ran.Store(true)

			_233_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task111.job = sched.Enqueue(ctx, cff.Job{
			Run: task111.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task111)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:234:12
		task112 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task112.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _234_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   234,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task112.run = func(ctx context.Context) (err error) {
			taskEmitter := task112.emitter
			startTime := time.Now()
			defer func() {
				if task112.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task112.ran.Store(true)

			_234_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task112.job = sched.Enqueue(ctx, cff.Job{
			Run: task112.run,
			Dependencies: []*cff.ScheduledJob{
				task12.job,
			},
		})
		tasks = append(tasks, task112)

		if err := sched.Wait(ctx); err != nil {
			flowEmitter.FlowError(ctx, err)
			return err
		}

		*(_130_15) = v3 // float64

		flowEmitter.FlowSuccess(ctx)
		return nil
	}()
	return res
}

// Metrics500 is a flow with 499 dependent tasks
func Metrics500(logger *zap.Logger, scope tally.Scope) float64 {
	var res float64
	func() (err error) {

		_243_3 := context.Background()

		_244_22 := "Metrics500"

		_245_19 := cff.TallyEmitter(scope)

		_246_19 := cff.LogEmitter(logger)

		_247_15 := &res

		_249_4 := func() float64 { return 0 }

		_250_19 := "base"

		_252_12 := func(i float64) {}

		_252_47 := "1"

		_253_12 := func(i float64) {}

		_253_47 := "2"

		_254_12 := func(i float64) {}

		_254_47 := "3"

		_255_12 := func(i float64) {}

		_255_47 := "4"

		_256_12 := func(i float64) {}

		_256_47 := "5"

		_257_12 := func(i float64) {}

		_257_47 := "6"

		_258_12 := func(i float64) {}

		_258_47 := "7"

		_259_12 := func(i float64) {}

		_259_47 := "8"

		_260_12 := func(i float64) {}

		_260_47 := "9"

		_261_12 := func(i float64) {}

		_261_47 := "10"

		_262_12 := func(i float64) {}

		_262_47 := "11"

		_263_12 := func(i float64) {}

		_263_47 := "12"

		_264_12 := func(i float64) {}

		_264_47 := "13"

		_265_12 := func(i float64) {}

		_265_47 := "14"

		_266_12 := func(i float64) {}

		_266_47 := "15"

		_267_12 := func(i float64) {}

		_267_47 := "16"

		_268_12 := func(i float64) {}

		_268_47 := "17"

		_269_12 := func(i float64) {}

		_269_47 := "18"

		_270_12 := func(i float64) {}

		_270_47 := "19"

		_271_12 := func(i float64) {}

		_271_47 := "20"

		_272_12 := func(i float64) {}

		_272_47 := "21"

		_273_12 := func(i float64) {}

		_273_47 := "22"

		_274_12 := func(i float64) {}

		_274_47 := "23"

		_275_12 := func(i float64) {}

		_275_47 := "24"

		_276_12 := func(i float64) {}

		_276_47 := "25"

		_277_12 := func(i float64) {}

		_277_47 := "26"

		_278_12 := func(i float64) {}

		_278_47 := "27"

		_279_12 := func(i float64) {}

		_279_47 := "28"

		_280_12 := func(i float64) {}

		_280_47 := "29"

		_281_12 := func(i float64) {}

		_281_47 := "30"

		_282_12 := func(i float64) {}

		_282_47 := "31"

		_283_12 := func(i float64) {}

		_283_47 := "32"

		_284_12 := func(i float64) {}

		_284_47 := "33"

		_285_12 := func(i float64) {}

		_285_47 := "34"

		_286_12 := func(i float64) {}

		_286_47 := "35"

		_287_12 := func(i float64) {}

		_287_47 := "36"

		_288_12 := func(i float64) {}

		_288_47 := "37"

		_289_12 := func(i float64) {}

		_289_47 := "38"

		_290_12 := func(i float64) {}

		_290_47 := "39"

		_291_12 := func(i float64) {}

		_291_47 := "40"

		_292_12 := func(i float64) {}

		_292_47 := "41"

		_293_12 := func(i float64) {}

		_293_47 := "42"

		_294_12 := func(i float64) {}

		_294_47 := "43"

		_295_12 := func(i float64) {}

		_295_47 := "44"

		_296_12 := func(i float64) {}

		_296_47 := "45"

		_297_12 := func(i float64) {}

		_297_47 := "46"

		_298_12 := func(i float64) {}

		_298_47 := "47"

		_299_12 := func(i float64) {}

		_299_47 := "48"

		_300_12 := func(i float64) {}

		_300_47 := "49"

		_301_12 := func(i float64) {}

		_301_47 := "50"

		_302_12 := func(i float64) {}

		_302_47 := "51"

		_303_12 := func(i float64) {}

		_303_47 := "52"

		_304_12 := func(i float64) {}

		_304_47 := "53"

		_305_12 := func(i float64) {}

		_305_47 := "54"

		_306_12 := func(i float64) {}

		_306_47 := "55"

		_307_12 := func(i float64) {}

		_307_47 := "56"

		_308_12 := func(i float64) {}

		_308_47 := "57"

		_309_12 := func(i float64) {}

		_309_47 := "58"

		_310_12 := func(i float64) {}

		_310_47 := "59"

		_311_12 := func(i float64) {}

		_311_47 := "60"

		_312_12 := func(i float64) {}

		_312_47 := "61"

		_313_12 := func(i float64) {}

		_313_47 := "62"

		_314_12 := func(i float64) {}

		_314_47 := "63"

		_315_12 := func(i float64) {}

		_315_47 := "64"

		_316_12 := func(i float64) {}

		_316_47 := "65"

		_317_12 := func(i float64) {}

		_317_47 := "66"

		_318_12 := func(i float64) {}

		_318_47 := "67"

		_319_12 := func(i float64) {}

		_319_47 := "68"

		_320_12 := func(i float64) {}

		_320_47 := "69"

		_321_12 := func(i float64) {}

		_321_47 := "70"

		_322_12 := func(i float64) {}

		_322_47 := "71"

		_323_12 := func(i float64) {}

		_323_47 := "72"

		_324_12 := func(i float64) {}

		_324_47 := "73"

		_325_12 := func(i float64) {}

		_325_47 := "74"

		_326_12 := func(i float64) {}

		_326_47 := "75"

		_327_12 := func(i float64) {}

		_327_47 := "76"

		_328_12 := func(i float64) {}

		_328_47 := "77"

		_329_12 := func(i float64) {}

		_329_47 := "78"

		_330_12 := func(i float64) {}

		_330_47 := "79"

		_331_12 := func(i float64) {}

		_331_47 := "80"

		_332_12 := func(i float64) {}

		_332_47 := "81"

		_333_12 := func(i float64) {}

		_333_47 := "82"

		_334_12 := func(i float64) {}

		_334_47 := "83"

		_335_12 := func(i float64) {}

		_335_47 := "84"

		_336_12 := func(i float64) {}

		_336_47 := "85"

		_337_12 := func(i float64) {}

		_337_47 := "86"

		_338_12 := func(i float64) {}

		_338_47 := "87"

		_339_12 := func(i float64) {}

		_339_47 := "88"

		_340_12 := func(i float64) {}

		_340_47 := "89"

		_341_12 := func(i float64) {}

		_341_47 := "90"

		_342_12 := func(i float64) {}

		_342_47 := "91"

		_343_12 := func(i float64) {}

		_343_47 := "92"

		_344_12 := func(i float64) {}

		_344_47 := "93"

		_345_12 := func(i float64) {}

		_345_47 := "94"

		_346_12 := func(i float64) {}

		_346_47 := "95"

		_347_12 := func(i float64) {}

		_347_47 := "96"

		_348_12 := func(i float64) {}

		_348_47 := "97"

		_349_12 := func(i float64) {}

		_349_47 := "98"

		_350_12 := func(i float64) {}

		_350_47 := "99"

		_351_12 := func(i float64) {}

		_351_47 := "100"

		_352_12 := func(i float64) {}

		_352_47 := "101"

		_353_12 := func(i float64) {}

		_353_47 := "102"

		_354_12 := func(i float64) {}

		_354_47 := "103"

		_355_12 := func(i float64) {}

		_355_47 := "104"

		_356_12 := func(i float64) {}

		_356_47 := "105"

		_357_12 := func(i float64) {}

		_357_47 := "106"

		_358_12 := func(i float64) {}

		_358_47 := "107"

		_359_12 := func(i float64) {}

		_359_47 := "108"

		_360_12 := func(i float64) {}

		_360_47 := "109"

		_361_12 := func(i float64) {}

		_361_47 := "110"

		_362_12 := func(i float64) {}

		_362_47 := "111"

		_363_12 := func(i float64) {}

		_363_47 := "112"

		_364_12 := func(i float64) {}

		_364_47 := "113"

		_365_12 := func(i float64) {}

		_365_47 := "114"

		_366_12 := func(i float64) {}

		_366_47 := "115"

		_367_12 := func(i float64) {}

		_367_47 := "116"

		_368_12 := func(i float64) {}

		_368_47 := "117"

		_369_12 := func(i float64) {}

		_369_47 := "118"

		_370_12 := func(i float64) {}

		_370_47 := "119"

		_371_12 := func(i float64) {}

		_371_47 := "120"

		_372_12 := func(i float64) {}

		_372_47 := "121"

		_373_12 := func(i float64) {}

		_373_47 := "122"

		_374_12 := func(i float64) {}

		_374_47 := "123"

		_375_12 := func(i float64) {}

		_375_47 := "124"

		_376_12 := func(i float64) {}

		_376_47 := "125"

		_377_12 := func(i float64) {}

		_377_47 := "126"

		_378_12 := func(i float64) {}

		_378_47 := "127"

		_379_12 := func(i float64) {}

		_379_47 := "128"

		_380_12 := func(i float64) {}

		_380_47 := "129"

		_381_12 := func(i float64) {}

		_381_47 := "130"

		_382_12 := func(i float64) {}

		_382_47 := "131"

		_383_12 := func(i float64) {}

		_383_47 := "132"

		_384_12 := func(i float64) {}

		_384_47 := "133"

		_385_12 := func(i float64) {}

		_385_47 := "134"

		_386_12 := func(i float64) {}

		_386_47 := "135"

		_387_12 := func(i float64) {}

		_387_47 := "136"

		_388_12 := func(i float64) {}

		_388_47 := "137"

		_389_12 := func(i float64) {}

		_389_47 := "138"

		_390_12 := func(i float64) {}

		_390_47 := "139"

		_391_12 := func(i float64) {}

		_391_47 := "140"

		_392_12 := func(i float64) {}

		_392_47 := "141"

		_393_12 := func(i float64) {}

		_393_47 := "142"

		_394_12 := func(i float64) {}

		_394_47 := "143"

		_395_12 := func(i float64) {}

		_395_47 := "144"

		_396_12 := func(i float64) {}

		_396_47 := "145"

		_397_12 := func(i float64) {}

		_397_47 := "146"

		_398_12 := func(i float64) {}

		_398_47 := "147"

		_399_12 := func(i float64) {}

		_399_47 := "148"

		_400_12 := func(i float64) {}

		_400_47 := "149"

		_401_12 := func(i float64) {}

		_401_47 := "150"

		_402_12 := func(i float64) {}

		_402_47 := "151"

		_403_12 := func(i float64) {}

		_403_47 := "152"

		_404_12 := func(i float64) {}

		_404_47 := "153"

		_405_12 := func(i float64) {}

		_405_47 := "154"

		_406_12 := func(i float64) {}

		_406_47 := "155"

		_407_12 := func(i float64) {}

		_407_47 := "156"

		_408_12 := func(i float64) {}

		_408_47 := "157"

		_409_12 := func(i float64) {}

		_409_47 := "158"

		_410_12 := func(i float64) {}

		_410_47 := "159"

		_411_12 := func(i float64) {}

		_411_47 := "160"

		_412_12 := func(i float64) {}

		_412_47 := "161"

		_413_12 := func(i float64) {}

		_413_47 := "162"

		_414_12 := func(i float64) {}

		_414_47 := "163"

		_415_12 := func(i float64) {}

		_415_47 := "164"

		_416_12 := func(i float64) {}

		_416_47 := "165"

		_417_12 := func(i float64) {}

		_417_47 := "166"

		_418_12 := func(i float64) {}

		_418_47 := "167"

		_419_12 := func(i float64) {}

		_419_47 := "168"

		_420_12 := func(i float64) {}

		_420_47 := "169"

		_421_12 := func(i float64) {}

		_421_47 := "170"

		_422_12 := func(i float64) {}

		_422_47 := "171"

		_423_12 := func(i float64) {}

		_423_47 := "172"

		_424_12 := func(i float64) {}

		_424_47 := "173"

		_425_12 := func(i float64) {}

		_425_47 := "174"

		_426_12 := func(i float64) {}

		_426_47 := "175"

		_427_12 := func(i float64) {}

		_427_47 := "176"

		_428_12 := func(i float64) {}

		_428_47 := "177"

		_429_12 := func(i float64) {}

		_429_47 := "178"

		_430_12 := func(i float64) {}

		_430_47 := "179"

		_431_12 := func(i float64) {}

		_431_47 := "180"

		_432_12 := func(i float64) {}

		_432_47 := "181"

		_433_12 := func(i float64) {}

		_433_47 := "182"

		_434_12 := func(i float64) {}

		_434_47 := "183"

		_435_12 := func(i float64) {}

		_435_47 := "184"

		_436_12 := func(i float64) {}

		_436_47 := "185"

		_437_12 := func(i float64) {}

		_437_47 := "186"

		_438_12 := func(i float64) {}

		_438_47 := "187"

		_439_12 := func(i float64) {}

		_439_47 := "188"

		_440_12 := func(i float64) {}

		_440_47 := "189"

		_441_12 := func(i float64) {}

		_441_47 := "190"

		_442_12 := func(i float64) {}

		_442_47 := "191"

		_443_12 := func(i float64) {}

		_443_47 := "192"

		_444_12 := func(i float64) {}

		_444_47 := "193"

		_445_12 := func(i float64) {}

		_445_47 := "194"

		_446_12 := func(i float64) {}

		_446_47 := "195"

		_447_12 := func(i float64) {}

		_447_47 := "196"

		_448_12 := func(i float64) {}

		_448_47 := "197"

		_449_12 := func(i float64) {}

		_449_47 := "198"

		_450_12 := func(i float64) {}

		_450_47 := "199"

		_451_12 := func(i float64) {}

		_451_47 := "200"

		_452_12 := func(i float64) {}

		_452_47 := "201"

		_453_12 := func(i float64) {}

		_453_47 := "202"

		_454_12 := func(i float64) {}

		_454_47 := "203"

		_455_12 := func(i float64) {}

		_455_47 := "204"

		_456_12 := func(i float64) {}

		_456_47 := "205"

		_457_12 := func(i float64) {}

		_457_47 := "206"

		_458_12 := func(i float64) {}

		_458_47 := "207"

		_459_12 := func(i float64) {}

		_459_47 := "208"

		_460_12 := func(i float64) {}

		_460_47 := "209"

		_461_12 := func(i float64) {}

		_461_47 := "210"

		_462_12 := func(i float64) {}

		_462_47 := "211"

		_463_12 := func(i float64) {}

		_463_47 := "212"

		_464_12 := func(i float64) {}

		_464_47 := "213"

		_465_12 := func(i float64) {}

		_465_47 := "214"

		_466_12 := func(i float64) {}

		_466_47 := "215"

		_467_12 := func(i float64) {}

		_467_47 := "216"

		_468_12 := func(i float64) {}

		_468_47 := "217"

		_469_12 := func(i float64) {}

		_469_47 := "218"

		_470_12 := func(i float64) {}

		_470_47 := "219"

		_471_12 := func(i float64) {}

		_471_47 := "220"

		_472_12 := func(i float64) {}

		_472_47 := "221"

		_473_12 := func(i float64) {}

		_473_47 := "222"

		_474_12 := func(i float64) {}

		_474_47 := "223"

		_475_12 := func(i float64) {}

		_475_47 := "224"

		_476_12 := func(i float64) {}

		_476_47 := "225"

		_477_12 := func(i float64) {}

		_477_47 := "226"

		_478_12 := func(i float64) {}

		_478_47 := "227"

		_479_12 := func(i float64) {}

		_479_47 := "228"

		_480_12 := func(i float64) {}

		_480_47 := "229"

		_481_12 := func(i float64) {}

		_481_47 := "230"

		_482_12 := func(i float64) {}

		_482_47 := "231"

		_483_12 := func(i float64) {}

		_483_47 := "232"

		_484_12 := func(i float64) {}

		_484_47 := "233"

		_485_12 := func(i float64) {}

		_485_47 := "234"

		_486_12 := func(i float64) {}

		_486_47 := "235"

		_487_12 := func(i float64) {}

		_487_47 := "236"

		_488_12 := func(i float64) {}

		_488_47 := "237"

		_489_12 := func(i float64) {}

		_489_47 := "238"

		_490_12 := func(i float64) {}

		_490_47 := "239"

		_491_12 := func(i float64) {}

		_491_47 := "240"

		_492_12 := func(i float64) {}

		_492_47 := "241"

		_493_12 := func(i float64) {}

		_493_47 := "242"

		_494_12 := func(i float64) {}

		_494_47 := "243"

		_495_12 := func(i float64) {}

		_495_47 := "244"

		_496_12 := func(i float64) {}

		_496_47 := "245"

		_497_12 := func(i float64) {}

		_497_47 := "246"

		_498_12 := func(i float64) {}

		_498_47 := "247"

		_499_12 := func(i float64) {}

		_499_47 := "248"

		_500_12 := func(i float64) {}

		_500_47 := "249"

		_501_12 := func(i float64) {}

		_501_47 := "250"

		_502_12 := func(i float64) {}

		_502_47 := "251"

		_503_12 := func(i float64) {}

		_503_47 := "252"

		_504_12 := func(i float64) {}

		_504_47 := "253"

		_505_12 := func(i float64) {}

		_505_47 := "254"

		_506_12 := func(i float64) {}

		_506_47 := "255"

		_507_12 := func(i float64) {}

		_507_47 := "256"

		_508_12 := func(i float64) {}

		_508_47 := "257"

		_509_12 := func(i float64) {}

		_509_47 := "258"

		_510_12 := func(i float64) {}

		_510_47 := "259"

		_511_12 := func(i float64) {}

		_511_47 := "260"

		_512_12 := func(i float64) {}

		_512_47 := "261"

		_513_12 := func(i float64) {}

		_513_47 := "262"

		_514_12 := func(i float64) {}

		_514_47 := "263"

		_515_12 := func(i float64) {}

		_515_47 := "264"

		_516_12 := func(i float64) {}

		_516_47 := "265"

		_517_12 := func(i float64) {}

		_517_47 := "266"

		_518_12 := func(i float64) {}

		_518_47 := "267"

		_519_12 := func(i float64) {}

		_519_47 := "268"

		_520_12 := func(i float64) {}

		_520_47 := "269"

		_521_12 := func(i float64) {}

		_521_47 := "270"

		_522_12 := func(i float64) {}

		_522_47 := "271"

		_523_12 := func(i float64) {}

		_523_47 := "272"

		_524_12 := func(i float64) {}

		_524_47 := "273"

		_525_12 := func(i float64) {}

		_525_47 := "274"

		_526_12 := func(i float64) {}

		_526_47 := "275"

		_527_12 := func(i float64) {}

		_527_47 := "276"

		_528_12 := func(i float64) {}

		_528_47 := "277"

		_529_12 := func(i float64) {}

		_529_47 := "278"

		_530_12 := func(i float64) {}

		_530_47 := "279"

		_531_12 := func(i float64) {}

		_531_47 := "280"

		_532_12 := func(i float64) {}

		_532_47 := "281"

		_533_12 := func(i float64) {}

		_533_47 := "282"

		_534_12 := func(i float64) {}

		_534_47 := "283"

		_535_12 := func(i float64) {}

		_535_47 := "284"

		_536_12 := func(i float64) {}

		_536_47 := "285"

		_537_12 := func(i float64) {}

		_537_47 := "286"

		_538_12 := func(i float64) {}

		_538_47 := "287"

		_539_12 := func(i float64) {}

		_539_47 := "288"

		_540_12 := func(i float64) {}

		_540_47 := "289"

		_541_12 := func(i float64) {}

		_541_47 := "290"

		_542_12 := func(i float64) {}

		_542_47 := "291"

		_543_12 := func(i float64) {}

		_543_47 := "292"

		_544_12 := func(i float64) {}

		_544_47 := "293"

		_545_12 := func(i float64) {}

		_545_47 := "294"

		_546_12 := func(i float64) {}

		_546_47 := "295"

		_547_12 := func(i float64) {}

		_547_47 := "296"

		_548_12 := func(i float64) {}

		_548_47 := "297"

		_549_12 := func(i float64) {}

		_549_47 := "298"

		_550_12 := func(i float64) {}

		_550_47 := "299"

		_551_12 := func(i float64) {}

		_551_47 := "300"

		_552_12 := func(i float64) {}

		_552_47 := "301"

		_553_12 := func(i float64) {}

		_553_47 := "302"

		_554_12 := func(i float64) {}

		_554_47 := "303"

		_555_12 := func(i float64) {}

		_555_47 := "304"

		_556_12 := func(i float64) {}

		_556_47 := "305"

		_557_12 := func(i float64) {}

		_557_47 := "306"

		_558_12 := func(i float64) {}

		_558_47 := "307"

		_559_12 := func(i float64) {}

		_559_47 := "308"

		_560_12 := func(i float64) {}

		_560_47 := "309"

		_561_12 := func(i float64) {}

		_561_47 := "310"

		_562_12 := func(i float64) {}

		_562_47 := "311"

		_563_12 := func(i float64) {}

		_563_47 := "312"

		_564_12 := func(i float64) {}

		_564_47 := "313"

		_565_12 := func(i float64) {}

		_565_47 := "314"

		_566_12 := func(i float64) {}

		_566_47 := "315"

		_567_12 := func(i float64) {}

		_567_47 := "316"

		_568_12 := func(i float64) {}

		_568_47 := "317"

		_569_12 := func(i float64) {}

		_569_47 := "318"

		_570_12 := func(i float64) {}

		_570_47 := "319"

		_571_12 := func(i float64) {}

		_571_47 := "320"

		_572_12 := func(i float64) {}

		_572_47 := "321"

		_573_12 := func(i float64) {}

		_573_47 := "322"

		_574_12 := func(i float64) {}

		_574_47 := "323"

		_575_12 := func(i float64) {}

		_575_47 := "324"

		_576_12 := func(i float64) {}

		_576_47 := "325"

		_577_12 := func(i float64) {}

		_577_47 := "326"

		_578_12 := func(i float64) {}

		_578_47 := "327"

		_579_12 := func(i float64) {}

		_579_47 := "328"

		_580_12 := func(i float64) {}

		_580_47 := "329"

		_581_12 := func(i float64) {}

		_581_47 := "330"

		_582_12 := func(i float64) {}

		_582_47 := "331"

		_583_12 := func(i float64) {}

		_583_47 := "332"

		_584_12 := func(i float64) {}

		_584_47 := "333"

		_585_12 := func(i float64) {}

		_585_47 := "334"

		_586_12 := func(i float64) {}

		_586_47 := "335"

		_587_12 := func(i float64) {}

		_587_47 := "336"

		_588_12 := func(i float64) {}

		_588_47 := "337"

		_589_12 := func(i float64) {}

		_589_47 := "338"

		_590_12 := func(i float64) {}

		_590_47 := "339"

		_591_12 := func(i float64) {}

		_591_47 := "340"

		_592_12 := func(i float64) {}

		_592_47 := "341"

		_593_12 := func(i float64) {}

		_593_47 := "342"

		_594_12 := func(i float64) {}

		_594_47 := "343"

		_595_12 := func(i float64) {}

		_595_47 := "344"

		_596_12 := func(i float64) {}

		_596_47 := "345"

		_597_12 := func(i float64) {}

		_597_47 := "346"

		_598_12 := func(i float64) {}

		_598_47 := "347"

		_599_12 := func(i float64) {}

		_599_47 := "348"

		_600_12 := func(i float64) {}

		_600_47 := "349"

		_601_12 := func(i float64) {}

		_601_47 := "350"

		_602_12 := func(i float64) {}

		_602_47 := "351"

		_603_12 := func(i float64) {}

		_603_47 := "352"

		_604_12 := func(i float64) {}

		_604_47 := "353"

		_605_12 := func(i float64) {}

		_605_47 := "354"

		_606_12 := func(i float64) {}

		_606_47 := "355"

		_607_12 := func(i float64) {}

		_607_47 := "356"

		_608_12 := func(i float64) {}

		_608_47 := "357"

		_609_12 := func(i float64) {}

		_609_47 := "358"

		_610_12 := func(i float64) {}

		_610_47 := "359"

		_611_12 := func(i float64) {}

		_611_47 := "360"

		_612_12 := func(i float64) {}

		_612_47 := "361"

		_613_12 := func(i float64) {}

		_613_47 := "362"

		_614_12 := func(i float64) {}

		_614_47 := "363"

		_615_12 := func(i float64) {}

		_615_47 := "364"

		_616_12 := func(i float64) {}

		_616_47 := "365"

		_617_12 := func(i float64) {}

		_617_47 := "366"

		_618_12 := func(i float64) {}

		_618_47 := "367"

		_619_12 := func(i float64) {}

		_619_47 := "368"

		_620_12 := func(i float64) {}

		_620_47 := "369"

		_621_12 := func(i float64) {}

		_621_47 := "370"

		_622_12 := func(i float64) {}

		_622_47 := "371"

		_623_12 := func(i float64) {}

		_623_47 := "372"

		_624_12 := func(i float64) {}

		_624_47 := "373"

		_625_12 := func(i float64) {}

		_625_47 := "374"

		_626_12 := func(i float64) {}

		_626_47 := "375"

		_627_12 := func(i float64) {}

		_627_47 := "376"

		_628_12 := func(i float64) {}

		_628_47 := "377"

		_629_12 := func(i float64) {}

		_629_47 := "378"

		_630_12 := func(i float64) {}

		_630_47 := "379"

		_631_12 := func(i float64) {}

		_631_47 := "380"

		_632_12 := func(i float64) {}

		_632_47 := "381"

		_633_12 := func(i float64) {}

		_633_47 := "382"

		_634_12 := func(i float64) {}

		_634_47 := "383"

		_635_12 := func(i float64) {}

		_635_47 := "384"

		_636_12 := func(i float64) {}

		_636_47 := "385"

		_637_12 := func(i float64) {}

		_637_47 := "386"

		_638_12 := func(i float64) {}

		_638_47 := "387"

		_639_12 := func(i float64) {}

		_639_47 := "388"

		_640_12 := func(i float64) {}

		_640_47 := "389"

		_641_12 := func(i float64) {}

		_641_47 := "390"

		_642_12 := func(i float64) {}

		_642_47 := "391"

		_643_12 := func(i float64) {}

		_643_47 := "392"

		_644_12 := func(i float64) {}

		_644_47 := "393"

		_645_12 := func(i float64) {}

		_645_47 := "394"

		_646_12 := func(i float64) {}

		_646_47 := "395"

		_647_12 := func(i float64) {}

		_647_47 := "396"

		_648_12 := func(i float64) {}

		_648_47 := "397"

		_649_12 := func(i float64) {}

		_649_47 := "398"

		_650_12 := func(i float64) {}

		_650_47 := "399"

		_651_12 := func(i float64) {}

		_651_47 := "400"

		_652_12 := func(i float64) {}

		_652_47 := "401"

		_653_12 := func(i float64) {}

		_653_47 := "402"

		_654_12 := func(i float64) {}

		_654_47 := "403"

		_655_12 := func(i float64) {}

		_655_47 := "404"

		_656_12 := func(i float64) {}

		_656_47 := "405"

		_657_12 := func(i float64) {}

		_657_47 := "406"

		_658_12 := func(i float64) {}

		_658_47 := "407"

		_659_12 := func(i float64) {}

		_659_47 := "408"

		_660_12 := func(i float64) {}

		_660_47 := "409"

		_661_12 := func(i float64) {}

		_661_47 := "410"

		_662_12 := func(i float64) {}

		_662_47 := "411"

		_663_12 := func(i float64) {}

		_663_47 := "412"

		_664_12 := func(i float64) {}

		_664_47 := "413"

		_665_12 := func(i float64) {}

		_665_47 := "414"

		_666_12 := func(i float64) {}

		_666_47 := "415"

		_667_12 := func(i float64) {}

		_667_47 := "416"

		_668_12 := func(i float64) {}

		_668_47 := "417"

		_669_12 := func(i float64) {}

		_669_47 := "418"

		_670_12 := func(i float64) {}

		_670_47 := "419"

		_671_12 := func(i float64) {}

		_671_47 := "420"

		_672_12 := func(i float64) {}

		_672_47 := "421"

		_673_12 := func(i float64) {}

		_673_47 := "422"

		_674_12 := func(i float64) {}

		_674_47 := "423"

		_675_12 := func(i float64) {}

		_675_47 := "424"

		_676_12 := func(i float64) {}

		_676_47 := "425"

		_677_12 := func(i float64) {}

		_677_47 := "426"

		_678_12 := func(i float64) {}

		_678_47 := "427"

		_679_12 := func(i float64) {}

		_679_47 := "428"

		_680_12 := func(i float64) {}

		_680_47 := "429"

		_681_12 := func(i float64) {}

		_681_47 := "430"

		_682_12 := func(i float64) {}

		_682_47 := "431"

		_683_12 := func(i float64) {}

		_683_47 := "432"

		_684_12 := func(i float64) {}

		_684_47 := "433"

		_685_12 := func(i float64) {}

		_685_47 := "434"

		_686_12 := func(i float64) {}

		_686_47 := "435"

		_687_12 := func(i float64) {}

		_687_47 := "436"

		_688_12 := func(i float64) {}

		_688_47 := "437"

		_689_12 := func(i float64) {}

		_689_47 := "438"

		_690_12 := func(i float64) {}

		_690_47 := "439"

		_691_12 := func(i float64) {}

		_691_47 := "440"

		_692_12 := func(i float64) {}

		_692_47 := "441"

		_693_12 := func(i float64) {}

		_693_47 := "442"

		_694_12 := func(i float64) {}

		_694_47 := "443"

		_695_12 := func(i float64) {}

		_695_47 := "444"

		_696_12 := func(i float64) {}

		_696_47 := "445"

		_697_12 := func(i float64) {}

		_697_47 := "446"

		_698_12 := func(i float64) {}

		_698_47 := "447"

		_699_12 := func(i float64) {}

		_699_47 := "448"

		_700_12 := func(i float64) {}

		_700_47 := "449"

		_701_12 := func(i float64) {}

		_701_47 := "450"

		_702_12 := func(i float64) {}

		_702_47 := "451"

		_703_12 := func(i float64) {}

		_703_47 := "452"

		_704_12 := func(i float64) {}

		_704_47 := "453"

		_705_12 := func(i float64) {}

		_705_47 := "454"

		_706_12 := func(i float64) {}

		_706_47 := "455"

		_707_12 := func(i float64) {}

		_707_47 := "456"

		_708_12 := func(i float64) {}

		_708_47 := "457"

		_709_12 := func(i float64) {}

		_709_47 := "458"

		_710_12 := func(i float64) {}

		_710_47 := "459"

		_711_12 := func(i float64) {}

		_711_47 := "460"

		_712_12 := func(i float64) {}

		_712_47 := "461"

		_713_12 := func(i float64) {}

		_713_47 := "462"

		_714_12 := func(i float64) {}

		_714_47 := "463"

		_715_12 := func(i float64) {}

		_715_47 := "464"

		_716_12 := func(i float64) {}

		_716_47 := "465"

		_717_12 := func(i float64) {}

		_717_47 := "466"

		_718_12 := func(i float64) {}

		_718_47 := "467"

		_719_12 := func(i float64) {}

		_719_47 := "468"

		_720_12 := func(i float64) {}

		_720_47 := "469"

		_721_12 := func(i float64) {}

		_721_47 := "470"

		_722_12 := func(i float64) {}

		_722_47 := "471"

		_723_12 := func(i float64) {}

		_723_47 := "472"

		_724_12 := func(i float64) {}

		_724_47 := "473"

		_725_12 := func(i float64) {}

		_725_47 := "474"

		_726_12 := func(i float64) {}

		_726_47 := "475"

		_727_12 := func(i float64) {}

		_727_47 := "476"

		_728_12 := func(i float64) {}

		_728_47 := "477"

		_729_12 := func(i float64) {}

		_729_47 := "478"

		_730_12 := func(i float64) {}

		_730_47 := "479"

		_731_12 := func(i float64) {}

		_731_47 := "480"

		_732_12 := func(i float64) {}

		_732_47 := "481"

		_733_12 := func(i float64) {}

		_733_47 := "482"

		_734_12 := func(i float64) {}

		_734_47 := "483"

		_735_12 := func(i float64) {}

		_735_47 := "484"

		_736_12 := func(i float64) {}

		_736_47 := "485"

		_737_12 := func(i float64) {}

		_737_47 := "486"

		_738_12 := func(i float64) {}

		_738_47 := "487"

		_739_12 := func(i float64) {}

		_739_47 := "488"

		_740_12 := func(i float64) {}

		_740_47 := "489"

		_741_12 := func(i float64) {}

		_741_47 := "490"

		_742_12 := func(i float64) {}

		_742_47 := "491"

		_743_12 := func(i float64) {}

		_743_47 := "492"

		_744_12 := func(i float64) {}

		_744_47 := "493"

		_745_12 := func(i float64) {}

		_745_47 := "494"

		_746_12 := func(i float64) {}

		_746_47 := "495"

		_747_12 := func(i float64) {}

		_747_47 := "496"

		_748_12 := func(i float64) {}

		_748_47 := "497"

		_749_12 := func(i float64) {}

		_749_47 := "498"

		_750_12 := func(i float64) {}

		_750_47 := "499"

		_751_12 := func(i float64) {}

		_751_47 := "500"
		ctx := _243_3
		emitter := cff.EmitterStack(_245_19, _246_19)

		var (
			flowInfo = &cff.FlowInfo{
				Name:   _244_22,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   242,
				Column: 2,
			}
			flowEmitter = emitter.FlowInit(flowInfo)

			schedInfo = &cff.SchedulerInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			}

			// possibly unused
			_ = flowInfo
		)

		startTime := time.Now()
		defer func() { flowEmitter.FlowDone(ctx, time.Since(startTime)) }()

		schedEmitter := emitter.SchedulerInit(schedInfo)

		sched := cff.BeginFlow(
			cff.SchedulerParams{
				Emitter: schedEmitter,
			},
		)

		var tasks []*struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		}
		defer func() {
			for _, t := range tasks {
				if !t.ran.Load() {
					t.emitter.TaskSkipped(ctx, err)
				}
			}
		}()

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:249:4
		var (
			v3 float64
		)
		task113 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task113.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _250_19,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   249,
				Column: 4,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task113.run = func(ctx context.Context) (err error) {
			taskEmitter := task113.emitter
			startTime := time.Now()
			defer func() {
				if task113.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task113.ran.Store(true)

			v3 = _249_4()

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task113.job = sched.Enqueue(ctx, cff.Job{
			Run: task113.run,
		})
		tasks = append(tasks, task113)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:252:12
		task114 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task114.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _252_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   252,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task114.run = func(ctx context.Context) (err error) {
			taskEmitter := task114.emitter
			startTime := time.Now()
			defer func() {
				if task114.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task114.ran.Store(true)

			_252_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task114.job = sched.Enqueue(ctx, cff.Job{
			Run: task114.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task114)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:253:12
		task115 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task115.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _253_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   253,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task115.run = func(ctx context.Context) (err error) {
			taskEmitter := task115.emitter
			startTime := time.Now()
			defer func() {
				if task115.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task115.ran.Store(true)

			_253_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task115.job = sched.Enqueue(ctx, cff.Job{
			Run: task115.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task115)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:254:12
		task116 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task116.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _254_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   254,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task116.run = func(ctx context.Context) (err error) {
			taskEmitter := task116.emitter
			startTime := time.Now()
			defer func() {
				if task116.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task116.ran.Store(true)

			_254_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task116.job = sched.Enqueue(ctx, cff.Job{
			Run: task116.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task116)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:255:12
		task117 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task117.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _255_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   255,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task117.run = func(ctx context.Context) (err error) {
			taskEmitter := task117.emitter
			startTime := time.Now()
			defer func() {
				if task117.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task117.ran.Store(true)

			_255_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task117.job = sched.Enqueue(ctx, cff.Job{
			Run: task117.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task117)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:256:12
		task118 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task118.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _256_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   256,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task118.run = func(ctx context.Context) (err error) {
			taskEmitter := task118.emitter
			startTime := time.Now()
			defer func() {
				if task118.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task118.ran.Store(true)

			_256_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task118.job = sched.Enqueue(ctx, cff.Job{
			Run: task118.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task118)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:257:12
		task119 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task119.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _257_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   257,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task119.run = func(ctx context.Context) (err error) {
			taskEmitter := task119.emitter
			startTime := time.Now()
			defer func() {
				if task119.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task119.ran.Store(true)

			_257_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task119.job = sched.Enqueue(ctx, cff.Job{
			Run: task119.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task119)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:258:12
		task120 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task120.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _258_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   258,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task120.run = func(ctx context.Context) (err error) {
			taskEmitter := task120.emitter
			startTime := time.Now()
			defer func() {
				if task120.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task120.ran.Store(true)

			_258_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task120.job = sched.Enqueue(ctx, cff.Job{
			Run: task120.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task120)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:259:12
		task121 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task121.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _259_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   259,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task121.run = func(ctx context.Context) (err error) {
			taskEmitter := task121.emitter
			startTime := time.Now()
			defer func() {
				if task121.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task121.ran.Store(true)

			_259_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task121.job = sched.Enqueue(ctx, cff.Job{
			Run: task121.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task121)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:260:12
		task122 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task122.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _260_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   260,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task122.run = func(ctx context.Context) (err error) {
			taskEmitter := task122.emitter
			startTime := time.Now()
			defer func() {
				if task122.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task122.ran.Store(true)

			_260_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task122.job = sched.Enqueue(ctx, cff.Job{
			Run: task122.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task122)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:261:12
		task123 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task123.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _261_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   261,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task123.run = func(ctx context.Context) (err error) {
			taskEmitter := task123.emitter
			startTime := time.Now()
			defer func() {
				if task123.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task123.ran.Store(true)

			_261_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task123.job = sched.Enqueue(ctx, cff.Job{
			Run: task123.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task123)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:262:12
		task124 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task124.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _262_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   262,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task124.run = func(ctx context.Context) (err error) {
			taskEmitter := task124.emitter
			startTime := time.Now()
			defer func() {
				if task124.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task124.ran.Store(true)

			_262_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task124.job = sched.Enqueue(ctx, cff.Job{
			Run: task124.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task124)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:263:12
		task125 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task125.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _263_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   263,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task125.run = func(ctx context.Context) (err error) {
			taskEmitter := task125.emitter
			startTime := time.Now()
			defer func() {
				if task125.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task125.ran.Store(true)

			_263_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task125.job = sched.Enqueue(ctx, cff.Job{
			Run: task125.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task125)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:264:12
		task126 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task126.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _264_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   264,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task126.run = func(ctx context.Context) (err error) {
			taskEmitter := task126.emitter
			startTime := time.Now()
			defer func() {
				if task126.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task126.ran.Store(true)

			_264_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task126.job = sched.Enqueue(ctx, cff.Job{
			Run: task126.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task126)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:265:12
		task127 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task127.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _265_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   265,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task127.run = func(ctx context.Context) (err error) {
			taskEmitter := task127.emitter
			startTime := time.Now()
			defer func() {
				if task127.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task127.ran.Store(true)

			_265_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task127.job = sched.Enqueue(ctx, cff.Job{
			Run: task127.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task127)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:266:12
		task128 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task128.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _266_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   266,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task128.run = func(ctx context.Context) (err error) {
			taskEmitter := task128.emitter
			startTime := time.Now()
			defer func() {
				if task128.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task128.ran.Store(true)

			_266_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task128.job = sched.Enqueue(ctx, cff.Job{
			Run: task128.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task128)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:267:12
		task129 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task129.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _267_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   267,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task129.run = func(ctx context.Context) (err error) {
			taskEmitter := task129.emitter
			startTime := time.Now()
			defer func() {
				if task129.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task129.ran.Store(true)

			_267_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task129.job = sched.Enqueue(ctx, cff.Job{
			Run: task129.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task129)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:268:12
		task130 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task130.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _268_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   268,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task130.run = func(ctx context.Context) (err error) {
			taskEmitter := task130.emitter
			startTime := time.Now()
			defer func() {
				if task130.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task130.ran.Store(true)

			_268_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task130.job = sched.Enqueue(ctx, cff.Job{
			Run: task130.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task130)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:269:12
		task131 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task131.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _269_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   269,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task131.run = func(ctx context.Context) (err error) {
			taskEmitter := task131.emitter
			startTime := time.Now()
			defer func() {
				if task131.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task131.ran.Store(true)

			_269_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task131.job = sched.Enqueue(ctx, cff.Job{
			Run: task131.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task131)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:270:12
		task132 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task132.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _270_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   270,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task132.run = func(ctx context.Context) (err error) {
			taskEmitter := task132.emitter
			startTime := time.Now()
			defer func() {
				if task132.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task132.ran.Store(true)

			_270_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task132.job = sched.Enqueue(ctx, cff.Job{
			Run: task132.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task132)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:271:12
		task133 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task133.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _271_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   271,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task133.run = func(ctx context.Context) (err error) {
			taskEmitter := task133.emitter
			startTime := time.Now()
			defer func() {
				if task133.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task133.ran.Store(true)

			_271_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task133.job = sched.Enqueue(ctx, cff.Job{
			Run: task133.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task133)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:272:12
		task134 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task134.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _272_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   272,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task134.run = func(ctx context.Context) (err error) {
			taskEmitter := task134.emitter
			startTime := time.Now()
			defer func() {
				if task134.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task134.ran.Store(true)

			_272_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task134.job = sched.Enqueue(ctx, cff.Job{
			Run: task134.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task134)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:273:12
		task135 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task135.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _273_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   273,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task135.run = func(ctx context.Context) (err error) {
			taskEmitter := task135.emitter
			startTime := time.Now()
			defer func() {
				if task135.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task135.ran.Store(true)

			_273_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task135.job = sched.Enqueue(ctx, cff.Job{
			Run: task135.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task135)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:274:12
		task136 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task136.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _274_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   274,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task136.run = func(ctx context.Context) (err error) {
			taskEmitter := task136.emitter
			startTime := time.Now()
			defer func() {
				if task136.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task136.ran.Store(true)

			_274_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task136.job = sched.Enqueue(ctx, cff.Job{
			Run: task136.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task136)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:275:12
		task137 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task137.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _275_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   275,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task137.run = func(ctx context.Context) (err error) {
			taskEmitter := task137.emitter
			startTime := time.Now()
			defer func() {
				if task137.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task137.ran.Store(true)

			_275_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task137.job = sched.Enqueue(ctx, cff.Job{
			Run: task137.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task137)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:276:12
		task138 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task138.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _276_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   276,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task138.run = func(ctx context.Context) (err error) {
			taskEmitter := task138.emitter
			startTime := time.Now()
			defer func() {
				if task138.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task138.ran.Store(true)

			_276_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task138.job = sched.Enqueue(ctx, cff.Job{
			Run: task138.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task138)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:277:12
		task139 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task139.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _277_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   277,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task139.run = func(ctx context.Context) (err error) {
			taskEmitter := task139.emitter
			startTime := time.Now()
			defer func() {
				if task139.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task139.ran.Store(true)

			_277_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task139.job = sched.Enqueue(ctx, cff.Job{
			Run: task139.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task139)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:278:12
		task140 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task140.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _278_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   278,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task140.run = func(ctx context.Context) (err error) {
			taskEmitter := task140.emitter
			startTime := time.Now()
			defer func() {
				if task140.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task140.ran.Store(true)

			_278_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task140.job = sched.Enqueue(ctx, cff.Job{
			Run: task140.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task140)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:279:12
		task141 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task141.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _279_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   279,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task141.run = func(ctx context.Context) (err error) {
			taskEmitter := task141.emitter
			startTime := time.Now()
			defer func() {
				if task141.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task141.ran.Store(true)

			_279_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task141.job = sched.Enqueue(ctx, cff.Job{
			Run: task141.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task141)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:280:12
		task142 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task142.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _280_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   280,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task142.run = func(ctx context.Context) (err error) {
			taskEmitter := task142.emitter
			startTime := time.Now()
			defer func() {
				if task142.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task142.ran.Store(true)

			_280_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task142.job = sched.Enqueue(ctx, cff.Job{
			Run: task142.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task142)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:281:12
		task143 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task143.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _281_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   281,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task143.run = func(ctx context.Context) (err error) {
			taskEmitter := task143.emitter
			startTime := time.Now()
			defer func() {
				if task143.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task143.ran.Store(true)

			_281_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task143.job = sched.Enqueue(ctx, cff.Job{
			Run: task143.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task143)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:282:12
		task144 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task144.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _282_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   282,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task144.run = func(ctx context.Context) (err error) {
			taskEmitter := task144.emitter
			startTime := time.Now()
			defer func() {
				if task144.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task144.ran.Store(true)

			_282_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task144.job = sched.Enqueue(ctx, cff.Job{
			Run: task144.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task144)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:283:12
		task145 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task145.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _283_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   283,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task145.run = func(ctx context.Context) (err error) {
			taskEmitter := task145.emitter
			startTime := time.Now()
			defer func() {
				if task145.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task145.ran.Store(true)

			_283_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task145.job = sched.Enqueue(ctx, cff.Job{
			Run: task145.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task145)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:284:12
		task146 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task146.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _284_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   284,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task146.run = func(ctx context.Context) (err error) {
			taskEmitter := task146.emitter
			startTime := time.Now()
			defer func() {
				if task146.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task146.ran.Store(true)

			_284_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task146.job = sched.Enqueue(ctx, cff.Job{
			Run: task146.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task146)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:285:12
		task147 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task147.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _285_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   285,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task147.run = func(ctx context.Context) (err error) {
			taskEmitter := task147.emitter
			startTime := time.Now()
			defer func() {
				if task147.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task147.ran.Store(true)

			_285_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task147.job = sched.Enqueue(ctx, cff.Job{
			Run: task147.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task147)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:286:12
		task148 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task148.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _286_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   286,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task148.run = func(ctx context.Context) (err error) {
			taskEmitter := task148.emitter
			startTime := time.Now()
			defer func() {
				if task148.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task148.ran.Store(true)

			_286_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task148.job = sched.Enqueue(ctx, cff.Job{
			Run: task148.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task148)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:287:12
		task149 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task149.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _287_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   287,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task149.run = func(ctx context.Context) (err error) {
			taskEmitter := task149.emitter
			startTime := time.Now()
			defer func() {
				if task149.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task149.ran.Store(true)

			_287_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task149.job = sched.Enqueue(ctx, cff.Job{
			Run: task149.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task149)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:288:12
		task150 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task150.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _288_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   288,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task150.run = func(ctx context.Context) (err error) {
			taskEmitter := task150.emitter
			startTime := time.Now()
			defer func() {
				if task150.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task150.ran.Store(true)

			_288_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task150.job = sched.Enqueue(ctx, cff.Job{
			Run: task150.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task150)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:289:12
		task151 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task151.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _289_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   289,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task151.run = func(ctx context.Context) (err error) {
			taskEmitter := task151.emitter
			startTime := time.Now()
			defer func() {
				if task151.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task151.ran.Store(true)

			_289_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task151.job = sched.Enqueue(ctx, cff.Job{
			Run: task151.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task151)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:290:12
		task152 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task152.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _290_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   290,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task152.run = func(ctx context.Context) (err error) {
			taskEmitter := task152.emitter
			startTime := time.Now()
			defer func() {
				if task152.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task152.ran.Store(true)

			_290_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task152.job = sched.Enqueue(ctx, cff.Job{
			Run: task152.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task152)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:291:12
		task153 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task153.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _291_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   291,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task153.run = func(ctx context.Context) (err error) {
			taskEmitter := task153.emitter
			startTime := time.Now()
			defer func() {
				if task153.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task153.ran.Store(true)

			_291_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task153.job = sched.Enqueue(ctx, cff.Job{
			Run: task153.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task153)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:292:12
		task154 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task154.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _292_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   292,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task154.run = func(ctx context.Context) (err error) {
			taskEmitter := task154.emitter
			startTime := time.Now()
			defer func() {
				if task154.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task154.ran.Store(true)

			_292_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task154.job = sched.Enqueue(ctx, cff.Job{
			Run: task154.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task154)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:293:12
		task155 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task155.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _293_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   293,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task155.run = func(ctx context.Context) (err error) {
			taskEmitter := task155.emitter
			startTime := time.Now()
			defer func() {
				if task155.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task155.ran.Store(true)

			_293_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task155.job = sched.Enqueue(ctx, cff.Job{
			Run: task155.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task155)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:294:12
		task156 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task156.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _294_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   294,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task156.run = func(ctx context.Context) (err error) {
			taskEmitter := task156.emitter
			startTime := time.Now()
			defer func() {
				if task156.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task156.ran.Store(true)

			_294_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task156.job = sched.Enqueue(ctx, cff.Job{
			Run: task156.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task156)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:295:12
		task157 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task157.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _295_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   295,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task157.run = func(ctx context.Context) (err error) {
			taskEmitter := task157.emitter
			startTime := time.Now()
			defer func() {
				if task157.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task157.ran.Store(true)

			_295_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task157.job = sched.Enqueue(ctx, cff.Job{
			Run: task157.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task157)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:296:12
		task158 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task158.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _296_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   296,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task158.run = func(ctx context.Context) (err error) {
			taskEmitter := task158.emitter
			startTime := time.Now()
			defer func() {
				if task158.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task158.ran.Store(true)

			_296_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task158.job = sched.Enqueue(ctx, cff.Job{
			Run: task158.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task158)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:297:12
		task159 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task159.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _297_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   297,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task159.run = func(ctx context.Context) (err error) {
			taskEmitter := task159.emitter
			startTime := time.Now()
			defer func() {
				if task159.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task159.ran.Store(true)

			_297_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task159.job = sched.Enqueue(ctx, cff.Job{
			Run: task159.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task159)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:298:12
		task160 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task160.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _298_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   298,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task160.run = func(ctx context.Context) (err error) {
			taskEmitter := task160.emitter
			startTime := time.Now()
			defer func() {
				if task160.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task160.ran.Store(true)

			_298_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task160.job = sched.Enqueue(ctx, cff.Job{
			Run: task160.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task160)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:299:12
		task161 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task161.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _299_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   299,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task161.run = func(ctx context.Context) (err error) {
			taskEmitter := task161.emitter
			startTime := time.Now()
			defer func() {
				if task161.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task161.ran.Store(true)

			_299_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task161.job = sched.Enqueue(ctx, cff.Job{
			Run: task161.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task161)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:300:12
		task162 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task162.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _300_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   300,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task162.run = func(ctx context.Context) (err error) {
			taskEmitter := task162.emitter
			startTime := time.Now()
			defer func() {
				if task162.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task162.ran.Store(true)

			_300_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task162.job = sched.Enqueue(ctx, cff.Job{
			Run: task162.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task162)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:301:12
		task163 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task163.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _301_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   301,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task163.run = func(ctx context.Context) (err error) {
			taskEmitter := task163.emitter
			startTime := time.Now()
			defer func() {
				if task163.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task163.ran.Store(true)

			_301_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task163.job = sched.Enqueue(ctx, cff.Job{
			Run: task163.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task163)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:302:12
		task164 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task164.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _302_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   302,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task164.run = func(ctx context.Context) (err error) {
			taskEmitter := task164.emitter
			startTime := time.Now()
			defer func() {
				if task164.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task164.ran.Store(true)

			_302_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task164.job = sched.Enqueue(ctx, cff.Job{
			Run: task164.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task164)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:303:12
		task165 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task165.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _303_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   303,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task165.run = func(ctx context.Context) (err error) {
			taskEmitter := task165.emitter
			startTime := time.Now()
			defer func() {
				if task165.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task165.ran.Store(true)

			_303_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task165.job = sched.Enqueue(ctx, cff.Job{
			Run: task165.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task165)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:304:12
		task166 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task166.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _304_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   304,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task166.run = func(ctx context.Context) (err error) {
			taskEmitter := task166.emitter
			startTime := time.Now()
			defer func() {
				if task166.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task166.ran.Store(true)

			_304_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task166.job = sched.Enqueue(ctx, cff.Job{
			Run: task166.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task166)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:305:12
		task167 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task167.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _305_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   305,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task167.run = func(ctx context.Context) (err error) {
			taskEmitter := task167.emitter
			startTime := time.Now()
			defer func() {
				if task167.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task167.ran.Store(true)

			_305_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task167.job = sched.Enqueue(ctx, cff.Job{
			Run: task167.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task167)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:306:12
		task168 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task168.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _306_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   306,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task168.run = func(ctx context.Context) (err error) {
			taskEmitter := task168.emitter
			startTime := time.Now()
			defer func() {
				if task168.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task168.ran.Store(true)

			_306_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task168.job = sched.Enqueue(ctx, cff.Job{
			Run: task168.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task168)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:307:12
		task169 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task169.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _307_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   307,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task169.run = func(ctx context.Context) (err error) {
			taskEmitter := task169.emitter
			startTime := time.Now()
			defer func() {
				if task169.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task169.ran.Store(true)

			_307_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task169.job = sched.Enqueue(ctx, cff.Job{
			Run: task169.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task169)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:308:12
		task170 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task170.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _308_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   308,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task170.run = func(ctx context.Context) (err error) {
			taskEmitter := task170.emitter
			startTime := time.Now()
			defer func() {
				if task170.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task170.ran.Store(true)

			_308_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task170.job = sched.Enqueue(ctx, cff.Job{
			Run: task170.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task170)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:309:12
		task171 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task171.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _309_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   309,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task171.run = func(ctx context.Context) (err error) {
			taskEmitter := task171.emitter
			startTime := time.Now()
			defer func() {
				if task171.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task171.ran.Store(true)

			_309_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task171.job = sched.Enqueue(ctx, cff.Job{
			Run: task171.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task171)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:310:12
		task172 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task172.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _310_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   310,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task172.run = func(ctx context.Context) (err error) {
			taskEmitter := task172.emitter
			startTime := time.Now()
			defer func() {
				if task172.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task172.ran.Store(true)

			_310_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task172.job = sched.Enqueue(ctx, cff.Job{
			Run: task172.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task172)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:311:12
		task173 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task173.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _311_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   311,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task173.run = func(ctx context.Context) (err error) {
			taskEmitter := task173.emitter
			startTime := time.Now()
			defer func() {
				if task173.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task173.ran.Store(true)

			_311_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task173.job = sched.Enqueue(ctx, cff.Job{
			Run: task173.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task173)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:312:12
		task174 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task174.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _312_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   312,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task174.run = func(ctx context.Context) (err error) {
			taskEmitter := task174.emitter
			startTime := time.Now()
			defer func() {
				if task174.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task174.ran.Store(true)

			_312_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task174.job = sched.Enqueue(ctx, cff.Job{
			Run: task174.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task174)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:313:12
		task175 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task175.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _313_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   313,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task175.run = func(ctx context.Context) (err error) {
			taskEmitter := task175.emitter
			startTime := time.Now()
			defer func() {
				if task175.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task175.ran.Store(true)

			_313_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task175.job = sched.Enqueue(ctx, cff.Job{
			Run: task175.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task175)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:314:12
		task176 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task176.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _314_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   314,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task176.run = func(ctx context.Context) (err error) {
			taskEmitter := task176.emitter
			startTime := time.Now()
			defer func() {
				if task176.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task176.ran.Store(true)

			_314_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task176.job = sched.Enqueue(ctx, cff.Job{
			Run: task176.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task176)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:315:12
		task177 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task177.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _315_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   315,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task177.run = func(ctx context.Context) (err error) {
			taskEmitter := task177.emitter
			startTime := time.Now()
			defer func() {
				if task177.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task177.ran.Store(true)

			_315_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task177.job = sched.Enqueue(ctx, cff.Job{
			Run: task177.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task177)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:316:12
		task178 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task178.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _316_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   316,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task178.run = func(ctx context.Context) (err error) {
			taskEmitter := task178.emitter
			startTime := time.Now()
			defer func() {
				if task178.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task178.ran.Store(true)

			_316_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task178.job = sched.Enqueue(ctx, cff.Job{
			Run: task178.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task178)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:317:12
		task179 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task179.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _317_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   317,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task179.run = func(ctx context.Context) (err error) {
			taskEmitter := task179.emitter
			startTime := time.Now()
			defer func() {
				if task179.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task179.ran.Store(true)

			_317_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task179.job = sched.Enqueue(ctx, cff.Job{
			Run: task179.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task179)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:318:12
		task180 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task180.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _318_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   318,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task180.run = func(ctx context.Context) (err error) {
			taskEmitter := task180.emitter
			startTime := time.Now()
			defer func() {
				if task180.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task180.ran.Store(true)

			_318_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task180.job = sched.Enqueue(ctx, cff.Job{
			Run: task180.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task180)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:319:12
		task181 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task181.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _319_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   319,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task181.run = func(ctx context.Context) (err error) {
			taskEmitter := task181.emitter
			startTime := time.Now()
			defer func() {
				if task181.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task181.ran.Store(true)

			_319_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task181.job = sched.Enqueue(ctx, cff.Job{
			Run: task181.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task181)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:320:12
		task182 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task182.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _320_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   320,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task182.run = func(ctx context.Context) (err error) {
			taskEmitter := task182.emitter
			startTime := time.Now()
			defer func() {
				if task182.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task182.ran.Store(true)

			_320_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task182.job = sched.Enqueue(ctx, cff.Job{
			Run: task182.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task182)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:321:12
		task183 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task183.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _321_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   321,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task183.run = func(ctx context.Context) (err error) {
			taskEmitter := task183.emitter
			startTime := time.Now()
			defer func() {
				if task183.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task183.ran.Store(true)

			_321_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task183.job = sched.Enqueue(ctx, cff.Job{
			Run: task183.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task183)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:322:12
		task184 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task184.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _322_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   322,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task184.run = func(ctx context.Context) (err error) {
			taskEmitter := task184.emitter
			startTime := time.Now()
			defer func() {
				if task184.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task184.ran.Store(true)

			_322_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task184.job = sched.Enqueue(ctx, cff.Job{
			Run: task184.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task184)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:323:12
		task185 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task185.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _323_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   323,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task185.run = func(ctx context.Context) (err error) {
			taskEmitter := task185.emitter
			startTime := time.Now()
			defer func() {
				if task185.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task185.ran.Store(true)

			_323_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task185.job = sched.Enqueue(ctx, cff.Job{
			Run: task185.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task185)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:324:12
		task186 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task186.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _324_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   324,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task186.run = func(ctx context.Context) (err error) {
			taskEmitter := task186.emitter
			startTime := time.Now()
			defer func() {
				if task186.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task186.ran.Store(true)

			_324_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task186.job = sched.Enqueue(ctx, cff.Job{
			Run: task186.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task186)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:325:12
		task187 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task187.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _325_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   325,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task187.run = func(ctx context.Context) (err error) {
			taskEmitter := task187.emitter
			startTime := time.Now()
			defer func() {
				if task187.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task187.ran.Store(true)

			_325_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task187.job = sched.Enqueue(ctx, cff.Job{
			Run: task187.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task187)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:326:12
		task188 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task188.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _326_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   326,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task188.run = func(ctx context.Context) (err error) {
			taskEmitter := task188.emitter
			startTime := time.Now()
			defer func() {
				if task188.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task188.ran.Store(true)

			_326_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task188.job = sched.Enqueue(ctx, cff.Job{
			Run: task188.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task188)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:327:12
		task189 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task189.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _327_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   327,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task189.run = func(ctx context.Context) (err error) {
			taskEmitter := task189.emitter
			startTime := time.Now()
			defer func() {
				if task189.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task189.ran.Store(true)

			_327_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task189.job = sched.Enqueue(ctx, cff.Job{
			Run: task189.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task189)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:328:12
		task190 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task190.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _328_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   328,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task190.run = func(ctx context.Context) (err error) {
			taskEmitter := task190.emitter
			startTime := time.Now()
			defer func() {
				if task190.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task190.ran.Store(true)

			_328_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task190.job = sched.Enqueue(ctx, cff.Job{
			Run: task190.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task190)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:329:12
		task191 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task191.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _329_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   329,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task191.run = func(ctx context.Context) (err error) {
			taskEmitter := task191.emitter
			startTime := time.Now()
			defer func() {
				if task191.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task191.ran.Store(true)

			_329_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task191.job = sched.Enqueue(ctx, cff.Job{
			Run: task191.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task191)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:330:12
		task192 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task192.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _330_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   330,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task192.run = func(ctx context.Context) (err error) {
			taskEmitter := task192.emitter
			startTime := time.Now()
			defer func() {
				if task192.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task192.ran.Store(true)

			_330_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task192.job = sched.Enqueue(ctx, cff.Job{
			Run: task192.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task192)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:331:12
		task193 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task193.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _331_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   331,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task193.run = func(ctx context.Context) (err error) {
			taskEmitter := task193.emitter
			startTime := time.Now()
			defer func() {
				if task193.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task193.ran.Store(true)

			_331_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task193.job = sched.Enqueue(ctx, cff.Job{
			Run: task193.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task193)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:332:12
		task194 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task194.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _332_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   332,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task194.run = func(ctx context.Context) (err error) {
			taskEmitter := task194.emitter
			startTime := time.Now()
			defer func() {
				if task194.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task194.ran.Store(true)

			_332_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task194.job = sched.Enqueue(ctx, cff.Job{
			Run: task194.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task194)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:333:12
		task195 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task195.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _333_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   333,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task195.run = func(ctx context.Context) (err error) {
			taskEmitter := task195.emitter
			startTime := time.Now()
			defer func() {
				if task195.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task195.ran.Store(true)

			_333_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task195.job = sched.Enqueue(ctx, cff.Job{
			Run: task195.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task195)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:334:12
		task196 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task196.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _334_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   334,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task196.run = func(ctx context.Context) (err error) {
			taskEmitter := task196.emitter
			startTime := time.Now()
			defer func() {
				if task196.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task196.ran.Store(true)

			_334_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task196.job = sched.Enqueue(ctx, cff.Job{
			Run: task196.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task196)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:335:12
		task197 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task197.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _335_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   335,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task197.run = func(ctx context.Context) (err error) {
			taskEmitter := task197.emitter
			startTime := time.Now()
			defer func() {
				if task197.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task197.ran.Store(true)

			_335_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task197.job = sched.Enqueue(ctx, cff.Job{
			Run: task197.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task197)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:336:12
		task198 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task198.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _336_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   336,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task198.run = func(ctx context.Context) (err error) {
			taskEmitter := task198.emitter
			startTime := time.Now()
			defer func() {
				if task198.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task198.ran.Store(true)

			_336_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task198.job = sched.Enqueue(ctx, cff.Job{
			Run: task198.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task198)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:337:12
		task199 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task199.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _337_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   337,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task199.run = func(ctx context.Context) (err error) {
			taskEmitter := task199.emitter
			startTime := time.Now()
			defer func() {
				if task199.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task199.ran.Store(true)

			_337_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task199.job = sched.Enqueue(ctx, cff.Job{
			Run: task199.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task199)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:338:12
		task200 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task200.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _338_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   338,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task200.run = func(ctx context.Context) (err error) {
			taskEmitter := task200.emitter
			startTime := time.Now()
			defer func() {
				if task200.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task200.ran.Store(true)

			_338_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task200.job = sched.Enqueue(ctx, cff.Job{
			Run: task200.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task200)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:339:12
		task201 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task201.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _339_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   339,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task201.run = func(ctx context.Context) (err error) {
			taskEmitter := task201.emitter
			startTime := time.Now()
			defer func() {
				if task201.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task201.ran.Store(true)

			_339_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task201.job = sched.Enqueue(ctx, cff.Job{
			Run: task201.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task201)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:340:12
		task202 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task202.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _340_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   340,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task202.run = func(ctx context.Context) (err error) {
			taskEmitter := task202.emitter
			startTime := time.Now()
			defer func() {
				if task202.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task202.ran.Store(true)

			_340_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task202.job = sched.Enqueue(ctx, cff.Job{
			Run: task202.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task202)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:341:12
		task203 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task203.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _341_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   341,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task203.run = func(ctx context.Context) (err error) {
			taskEmitter := task203.emitter
			startTime := time.Now()
			defer func() {
				if task203.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task203.ran.Store(true)

			_341_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task203.job = sched.Enqueue(ctx, cff.Job{
			Run: task203.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task203)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:342:12
		task204 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task204.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _342_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   342,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task204.run = func(ctx context.Context) (err error) {
			taskEmitter := task204.emitter
			startTime := time.Now()
			defer func() {
				if task204.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task204.ran.Store(true)

			_342_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task204.job = sched.Enqueue(ctx, cff.Job{
			Run: task204.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task204)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:343:12
		task205 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task205.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _343_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   343,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task205.run = func(ctx context.Context) (err error) {
			taskEmitter := task205.emitter
			startTime := time.Now()
			defer func() {
				if task205.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task205.ran.Store(true)

			_343_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task205.job = sched.Enqueue(ctx, cff.Job{
			Run: task205.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task205)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:344:12
		task206 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task206.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _344_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   344,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task206.run = func(ctx context.Context) (err error) {
			taskEmitter := task206.emitter
			startTime := time.Now()
			defer func() {
				if task206.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task206.ran.Store(true)

			_344_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task206.job = sched.Enqueue(ctx, cff.Job{
			Run: task206.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task206)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:345:12
		task207 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task207.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _345_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   345,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task207.run = func(ctx context.Context) (err error) {
			taskEmitter := task207.emitter
			startTime := time.Now()
			defer func() {
				if task207.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task207.ran.Store(true)

			_345_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task207.job = sched.Enqueue(ctx, cff.Job{
			Run: task207.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task207)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:346:12
		task208 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task208.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _346_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   346,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task208.run = func(ctx context.Context) (err error) {
			taskEmitter := task208.emitter
			startTime := time.Now()
			defer func() {
				if task208.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task208.ran.Store(true)

			_346_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task208.job = sched.Enqueue(ctx, cff.Job{
			Run: task208.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task208)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:347:12
		task209 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task209.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _347_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   347,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task209.run = func(ctx context.Context) (err error) {
			taskEmitter := task209.emitter
			startTime := time.Now()
			defer func() {
				if task209.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task209.ran.Store(true)

			_347_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task209.job = sched.Enqueue(ctx, cff.Job{
			Run: task209.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task209)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:348:12
		task210 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task210.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _348_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   348,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task210.run = func(ctx context.Context) (err error) {
			taskEmitter := task210.emitter
			startTime := time.Now()
			defer func() {
				if task210.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task210.ran.Store(true)

			_348_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task210.job = sched.Enqueue(ctx, cff.Job{
			Run: task210.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task210)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:349:12
		task211 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task211.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _349_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   349,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task211.run = func(ctx context.Context) (err error) {
			taskEmitter := task211.emitter
			startTime := time.Now()
			defer func() {
				if task211.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task211.ran.Store(true)

			_349_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task211.job = sched.Enqueue(ctx, cff.Job{
			Run: task211.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task211)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:350:12
		task212 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task212.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _350_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   350,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task212.run = func(ctx context.Context) (err error) {
			taskEmitter := task212.emitter
			startTime := time.Now()
			defer func() {
				if task212.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task212.ran.Store(true)

			_350_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task212.job = sched.Enqueue(ctx, cff.Job{
			Run: task212.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task212)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:351:12
		task213 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task213.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _351_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   351,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task213.run = func(ctx context.Context) (err error) {
			taskEmitter := task213.emitter
			startTime := time.Now()
			defer func() {
				if task213.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task213.ran.Store(true)

			_351_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task213.job = sched.Enqueue(ctx, cff.Job{
			Run: task213.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task213)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:352:12
		task214 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task214.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _352_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   352,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task214.run = func(ctx context.Context) (err error) {
			taskEmitter := task214.emitter
			startTime := time.Now()
			defer func() {
				if task214.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task214.ran.Store(true)

			_352_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task214.job = sched.Enqueue(ctx, cff.Job{
			Run: task214.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task214)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:353:12
		task215 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task215.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _353_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   353,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task215.run = func(ctx context.Context) (err error) {
			taskEmitter := task215.emitter
			startTime := time.Now()
			defer func() {
				if task215.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task215.ran.Store(true)

			_353_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task215.job = sched.Enqueue(ctx, cff.Job{
			Run: task215.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task215)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:354:12
		task216 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task216.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _354_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   354,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task216.run = func(ctx context.Context) (err error) {
			taskEmitter := task216.emitter
			startTime := time.Now()
			defer func() {
				if task216.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task216.ran.Store(true)

			_354_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task216.job = sched.Enqueue(ctx, cff.Job{
			Run: task216.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task216)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:355:12
		task217 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task217.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _355_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   355,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task217.run = func(ctx context.Context) (err error) {
			taskEmitter := task217.emitter
			startTime := time.Now()
			defer func() {
				if task217.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task217.ran.Store(true)

			_355_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task217.job = sched.Enqueue(ctx, cff.Job{
			Run: task217.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task217)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:356:12
		task218 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task218.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _356_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   356,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task218.run = func(ctx context.Context) (err error) {
			taskEmitter := task218.emitter
			startTime := time.Now()
			defer func() {
				if task218.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task218.ran.Store(true)

			_356_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task218.job = sched.Enqueue(ctx, cff.Job{
			Run: task218.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task218)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:357:12
		task219 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task219.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _357_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   357,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task219.run = func(ctx context.Context) (err error) {
			taskEmitter := task219.emitter
			startTime := time.Now()
			defer func() {
				if task219.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task219.ran.Store(true)

			_357_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task219.job = sched.Enqueue(ctx, cff.Job{
			Run: task219.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task219)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:358:12
		task220 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task220.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _358_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   358,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task220.run = func(ctx context.Context) (err error) {
			taskEmitter := task220.emitter
			startTime := time.Now()
			defer func() {
				if task220.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task220.ran.Store(true)

			_358_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task220.job = sched.Enqueue(ctx, cff.Job{
			Run: task220.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task220)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:359:12
		task221 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task221.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _359_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   359,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task221.run = func(ctx context.Context) (err error) {
			taskEmitter := task221.emitter
			startTime := time.Now()
			defer func() {
				if task221.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task221.ran.Store(true)

			_359_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task221.job = sched.Enqueue(ctx, cff.Job{
			Run: task221.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task221)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:360:12
		task222 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task222.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _360_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   360,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task222.run = func(ctx context.Context) (err error) {
			taskEmitter := task222.emitter
			startTime := time.Now()
			defer func() {
				if task222.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task222.ran.Store(true)

			_360_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task222.job = sched.Enqueue(ctx, cff.Job{
			Run: task222.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task222)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:361:12
		task223 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task223.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _361_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   361,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task223.run = func(ctx context.Context) (err error) {
			taskEmitter := task223.emitter
			startTime := time.Now()
			defer func() {
				if task223.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task223.ran.Store(true)

			_361_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task223.job = sched.Enqueue(ctx, cff.Job{
			Run: task223.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task223)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:362:12
		task224 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task224.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _362_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   362,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task224.run = func(ctx context.Context) (err error) {
			taskEmitter := task224.emitter
			startTime := time.Now()
			defer func() {
				if task224.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task224.ran.Store(true)

			_362_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task224.job = sched.Enqueue(ctx, cff.Job{
			Run: task224.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task224)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:363:12
		task225 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task225.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _363_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   363,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task225.run = func(ctx context.Context) (err error) {
			taskEmitter := task225.emitter
			startTime := time.Now()
			defer func() {
				if task225.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task225.ran.Store(true)

			_363_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task225.job = sched.Enqueue(ctx, cff.Job{
			Run: task225.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task225)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:364:12
		task226 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task226.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _364_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   364,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task226.run = func(ctx context.Context) (err error) {
			taskEmitter := task226.emitter
			startTime := time.Now()
			defer func() {
				if task226.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task226.ran.Store(true)

			_364_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task226.job = sched.Enqueue(ctx, cff.Job{
			Run: task226.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task226)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:365:12
		task227 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task227.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _365_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   365,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task227.run = func(ctx context.Context) (err error) {
			taskEmitter := task227.emitter
			startTime := time.Now()
			defer func() {
				if task227.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task227.ran.Store(true)

			_365_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task227.job = sched.Enqueue(ctx, cff.Job{
			Run: task227.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task227)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:366:12
		task228 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task228.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _366_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   366,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task228.run = func(ctx context.Context) (err error) {
			taskEmitter := task228.emitter
			startTime := time.Now()
			defer func() {
				if task228.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task228.ran.Store(true)

			_366_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task228.job = sched.Enqueue(ctx, cff.Job{
			Run: task228.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task228)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:367:12
		task229 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task229.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _367_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   367,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task229.run = func(ctx context.Context) (err error) {
			taskEmitter := task229.emitter
			startTime := time.Now()
			defer func() {
				if task229.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task229.ran.Store(true)

			_367_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task229.job = sched.Enqueue(ctx, cff.Job{
			Run: task229.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task229)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:368:12
		task230 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task230.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _368_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   368,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task230.run = func(ctx context.Context) (err error) {
			taskEmitter := task230.emitter
			startTime := time.Now()
			defer func() {
				if task230.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task230.ran.Store(true)

			_368_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task230.job = sched.Enqueue(ctx, cff.Job{
			Run: task230.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task230)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:369:12
		task231 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task231.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _369_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   369,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task231.run = func(ctx context.Context) (err error) {
			taskEmitter := task231.emitter
			startTime := time.Now()
			defer func() {
				if task231.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task231.ran.Store(true)

			_369_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task231.job = sched.Enqueue(ctx, cff.Job{
			Run: task231.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task231)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:370:12
		task232 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task232.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _370_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   370,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task232.run = func(ctx context.Context) (err error) {
			taskEmitter := task232.emitter
			startTime := time.Now()
			defer func() {
				if task232.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task232.ran.Store(true)

			_370_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task232.job = sched.Enqueue(ctx, cff.Job{
			Run: task232.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task232)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:371:12
		task233 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task233.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _371_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   371,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task233.run = func(ctx context.Context) (err error) {
			taskEmitter := task233.emitter
			startTime := time.Now()
			defer func() {
				if task233.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task233.ran.Store(true)

			_371_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task233.job = sched.Enqueue(ctx, cff.Job{
			Run: task233.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task233)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:372:12
		task234 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task234.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _372_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   372,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task234.run = func(ctx context.Context) (err error) {
			taskEmitter := task234.emitter
			startTime := time.Now()
			defer func() {
				if task234.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task234.ran.Store(true)

			_372_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task234.job = sched.Enqueue(ctx, cff.Job{
			Run: task234.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task234)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:373:12
		task235 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task235.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _373_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   373,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task235.run = func(ctx context.Context) (err error) {
			taskEmitter := task235.emitter
			startTime := time.Now()
			defer func() {
				if task235.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task235.ran.Store(true)

			_373_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task235.job = sched.Enqueue(ctx, cff.Job{
			Run: task235.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task235)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:374:12
		task236 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task236.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _374_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   374,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task236.run = func(ctx context.Context) (err error) {
			taskEmitter := task236.emitter
			startTime := time.Now()
			defer func() {
				if task236.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task236.ran.Store(true)

			_374_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task236.job = sched.Enqueue(ctx, cff.Job{
			Run: task236.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task236)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:375:12
		task237 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task237.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _375_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   375,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task237.run = func(ctx context.Context) (err error) {
			taskEmitter := task237.emitter
			startTime := time.Now()
			defer func() {
				if task237.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task237.ran.Store(true)

			_375_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task237.job = sched.Enqueue(ctx, cff.Job{
			Run: task237.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task237)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:376:12
		task238 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task238.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _376_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   376,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task238.run = func(ctx context.Context) (err error) {
			taskEmitter := task238.emitter
			startTime := time.Now()
			defer func() {
				if task238.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task238.ran.Store(true)

			_376_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task238.job = sched.Enqueue(ctx, cff.Job{
			Run: task238.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task238)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:377:12
		task239 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task239.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _377_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   377,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task239.run = func(ctx context.Context) (err error) {
			taskEmitter := task239.emitter
			startTime := time.Now()
			defer func() {
				if task239.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task239.ran.Store(true)

			_377_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task239.job = sched.Enqueue(ctx, cff.Job{
			Run: task239.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task239)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:378:12
		task240 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task240.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _378_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   378,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task240.run = func(ctx context.Context) (err error) {
			taskEmitter := task240.emitter
			startTime := time.Now()
			defer func() {
				if task240.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task240.ran.Store(true)

			_378_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task240.job = sched.Enqueue(ctx, cff.Job{
			Run: task240.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task240)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:379:12
		task241 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task241.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _379_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   379,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task241.run = func(ctx context.Context) (err error) {
			taskEmitter := task241.emitter
			startTime := time.Now()
			defer func() {
				if task241.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task241.ran.Store(true)

			_379_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task241.job = sched.Enqueue(ctx, cff.Job{
			Run: task241.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task241)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:380:12
		task242 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task242.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _380_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   380,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task242.run = func(ctx context.Context) (err error) {
			taskEmitter := task242.emitter
			startTime := time.Now()
			defer func() {
				if task242.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task242.ran.Store(true)

			_380_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task242.job = sched.Enqueue(ctx, cff.Job{
			Run: task242.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task242)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:381:12
		task243 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task243.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _381_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   381,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task243.run = func(ctx context.Context) (err error) {
			taskEmitter := task243.emitter
			startTime := time.Now()
			defer func() {
				if task243.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task243.ran.Store(true)

			_381_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task243.job = sched.Enqueue(ctx, cff.Job{
			Run: task243.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task243)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:382:12
		task244 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task244.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _382_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   382,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task244.run = func(ctx context.Context) (err error) {
			taskEmitter := task244.emitter
			startTime := time.Now()
			defer func() {
				if task244.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task244.ran.Store(true)

			_382_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task244.job = sched.Enqueue(ctx, cff.Job{
			Run: task244.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task244)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:383:12
		task245 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task245.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _383_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   383,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task245.run = func(ctx context.Context) (err error) {
			taskEmitter := task245.emitter
			startTime := time.Now()
			defer func() {
				if task245.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task245.ran.Store(true)

			_383_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task245.job = sched.Enqueue(ctx, cff.Job{
			Run: task245.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task245)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:384:12
		task246 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task246.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _384_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   384,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task246.run = func(ctx context.Context) (err error) {
			taskEmitter := task246.emitter
			startTime := time.Now()
			defer func() {
				if task246.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task246.ran.Store(true)

			_384_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task246.job = sched.Enqueue(ctx, cff.Job{
			Run: task246.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task246)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:385:12
		task247 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task247.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _385_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   385,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task247.run = func(ctx context.Context) (err error) {
			taskEmitter := task247.emitter
			startTime := time.Now()
			defer func() {
				if task247.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task247.ran.Store(true)

			_385_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task247.job = sched.Enqueue(ctx, cff.Job{
			Run: task247.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task247)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:386:12
		task248 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task248.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _386_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   386,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task248.run = func(ctx context.Context) (err error) {
			taskEmitter := task248.emitter
			startTime := time.Now()
			defer func() {
				if task248.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task248.ran.Store(true)

			_386_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task248.job = sched.Enqueue(ctx, cff.Job{
			Run: task248.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task248)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:387:12
		task249 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task249.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _387_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   387,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task249.run = func(ctx context.Context) (err error) {
			taskEmitter := task249.emitter
			startTime := time.Now()
			defer func() {
				if task249.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task249.ran.Store(true)

			_387_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task249.job = sched.Enqueue(ctx, cff.Job{
			Run: task249.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task249)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:388:12
		task250 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task250.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _388_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   388,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task250.run = func(ctx context.Context) (err error) {
			taskEmitter := task250.emitter
			startTime := time.Now()
			defer func() {
				if task250.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task250.ran.Store(true)

			_388_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task250.job = sched.Enqueue(ctx, cff.Job{
			Run: task250.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task250)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:389:12
		task251 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task251.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _389_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   389,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task251.run = func(ctx context.Context) (err error) {
			taskEmitter := task251.emitter
			startTime := time.Now()
			defer func() {
				if task251.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task251.ran.Store(true)

			_389_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task251.job = sched.Enqueue(ctx, cff.Job{
			Run: task251.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task251)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:390:12
		task252 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task252.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _390_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   390,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task252.run = func(ctx context.Context) (err error) {
			taskEmitter := task252.emitter
			startTime := time.Now()
			defer func() {
				if task252.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task252.ran.Store(true)

			_390_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task252.job = sched.Enqueue(ctx, cff.Job{
			Run: task252.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task252)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:391:12
		task253 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task253.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _391_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   391,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task253.run = func(ctx context.Context) (err error) {
			taskEmitter := task253.emitter
			startTime := time.Now()
			defer func() {
				if task253.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task253.ran.Store(true)

			_391_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task253.job = sched.Enqueue(ctx, cff.Job{
			Run: task253.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task253)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:392:12
		task254 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task254.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _392_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   392,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task254.run = func(ctx context.Context) (err error) {
			taskEmitter := task254.emitter
			startTime := time.Now()
			defer func() {
				if task254.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task254.ran.Store(true)

			_392_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task254.job = sched.Enqueue(ctx, cff.Job{
			Run: task254.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task254)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:393:12
		task255 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task255.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _393_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   393,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task255.run = func(ctx context.Context) (err error) {
			taskEmitter := task255.emitter
			startTime := time.Now()
			defer func() {
				if task255.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task255.ran.Store(true)

			_393_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task255.job = sched.Enqueue(ctx, cff.Job{
			Run: task255.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task255)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:394:12
		task256 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task256.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _394_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   394,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task256.run = func(ctx context.Context) (err error) {
			taskEmitter := task256.emitter
			startTime := time.Now()
			defer func() {
				if task256.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task256.ran.Store(true)

			_394_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task256.job = sched.Enqueue(ctx, cff.Job{
			Run: task256.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task256)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:395:12
		task257 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task257.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _395_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   395,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task257.run = func(ctx context.Context) (err error) {
			taskEmitter := task257.emitter
			startTime := time.Now()
			defer func() {
				if task257.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task257.ran.Store(true)

			_395_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task257.job = sched.Enqueue(ctx, cff.Job{
			Run: task257.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task257)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:396:12
		task258 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task258.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _396_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   396,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task258.run = func(ctx context.Context) (err error) {
			taskEmitter := task258.emitter
			startTime := time.Now()
			defer func() {
				if task258.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task258.ran.Store(true)

			_396_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task258.job = sched.Enqueue(ctx, cff.Job{
			Run: task258.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task258)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:397:12
		task259 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task259.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _397_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   397,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task259.run = func(ctx context.Context) (err error) {
			taskEmitter := task259.emitter
			startTime := time.Now()
			defer func() {
				if task259.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task259.ran.Store(true)

			_397_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task259.job = sched.Enqueue(ctx, cff.Job{
			Run: task259.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task259)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:398:12
		task260 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task260.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _398_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   398,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task260.run = func(ctx context.Context) (err error) {
			taskEmitter := task260.emitter
			startTime := time.Now()
			defer func() {
				if task260.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task260.ran.Store(true)

			_398_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task260.job = sched.Enqueue(ctx, cff.Job{
			Run: task260.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task260)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:399:12
		task261 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task261.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _399_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   399,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task261.run = func(ctx context.Context) (err error) {
			taskEmitter := task261.emitter
			startTime := time.Now()
			defer func() {
				if task261.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task261.ran.Store(true)

			_399_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task261.job = sched.Enqueue(ctx, cff.Job{
			Run: task261.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task261)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:400:12
		task262 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task262.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _400_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   400,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task262.run = func(ctx context.Context) (err error) {
			taskEmitter := task262.emitter
			startTime := time.Now()
			defer func() {
				if task262.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task262.ran.Store(true)

			_400_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task262.job = sched.Enqueue(ctx, cff.Job{
			Run: task262.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task262)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:401:12
		task263 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task263.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _401_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   401,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task263.run = func(ctx context.Context) (err error) {
			taskEmitter := task263.emitter
			startTime := time.Now()
			defer func() {
				if task263.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task263.ran.Store(true)

			_401_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task263.job = sched.Enqueue(ctx, cff.Job{
			Run: task263.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task263)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:402:12
		task264 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task264.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _402_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   402,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task264.run = func(ctx context.Context) (err error) {
			taskEmitter := task264.emitter
			startTime := time.Now()
			defer func() {
				if task264.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task264.ran.Store(true)

			_402_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task264.job = sched.Enqueue(ctx, cff.Job{
			Run: task264.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task264)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:403:12
		task265 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task265.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _403_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   403,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task265.run = func(ctx context.Context) (err error) {
			taskEmitter := task265.emitter
			startTime := time.Now()
			defer func() {
				if task265.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task265.ran.Store(true)

			_403_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task265.job = sched.Enqueue(ctx, cff.Job{
			Run: task265.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task265)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:404:12
		task266 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task266.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _404_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   404,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task266.run = func(ctx context.Context) (err error) {
			taskEmitter := task266.emitter
			startTime := time.Now()
			defer func() {
				if task266.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task266.ran.Store(true)

			_404_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task266.job = sched.Enqueue(ctx, cff.Job{
			Run: task266.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task266)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:405:12
		task267 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task267.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _405_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   405,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task267.run = func(ctx context.Context) (err error) {
			taskEmitter := task267.emitter
			startTime := time.Now()
			defer func() {
				if task267.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task267.ran.Store(true)

			_405_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task267.job = sched.Enqueue(ctx, cff.Job{
			Run: task267.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task267)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:406:12
		task268 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task268.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _406_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   406,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task268.run = func(ctx context.Context) (err error) {
			taskEmitter := task268.emitter
			startTime := time.Now()
			defer func() {
				if task268.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task268.ran.Store(true)

			_406_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task268.job = sched.Enqueue(ctx, cff.Job{
			Run: task268.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task268)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:407:12
		task269 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task269.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _407_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   407,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task269.run = func(ctx context.Context) (err error) {
			taskEmitter := task269.emitter
			startTime := time.Now()
			defer func() {
				if task269.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task269.ran.Store(true)

			_407_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task269.job = sched.Enqueue(ctx, cff.Job{
			Run: task269.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task269)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:408:12
		task270 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task270.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _408_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   408,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task270.run = func(ctx context.Context) (err error) {
			taskEmitter := task270.emitter
			startTime := time.Now()
			defer func() {
				if task270.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task270.ran.Store(true)

			_408_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task270.job = sched.Enqueue(ctx, cff.Job{
			Run: task270.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task270)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:409:12
		task271 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task271.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _409_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   409,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task271.run = func(ctx context.Context) (err error) {
			taskEmitter := task271.emitter
			startTime := time.Now()
			defer func() {
				if task271.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task271.ran.Store(true)

			_409_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task271.job = sched.Enqueue(ctx, cff.Job{
			Run: task271.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task271)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:410:12
		task272 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task272.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _410_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   410,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task272.run = func(ctx context.Context) (err error) {
			taskEmitter := task272.emitter
			startTime := time.Now()
			defer func() {
				if task272.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task272.ran.Store(true)

			_410_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task272.job = sched.Enqueue(ctx, cff.Job{
			Run: task272.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task272)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:411:12
		task273 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task273.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _411_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   411,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task273.run = func(ctx context.Context) (err error) {
			taskEmitter := task273.emitter
			startTime := time.Now()
			defer func() {
				if task273.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task273.ran.Store(true)

			_411_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task273.job = sched.Enqueue(ctx, cff.Job{
			Run: task273.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task273)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:412:12
		task274 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task274.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _412_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   412,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task274.run = func(ctx context.Context) (err error) {
			taskEmitter := task274.emitter
			startTime := time.Now()
			defer func() {
				if task274.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task274.ran.Store(true)

			_412_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task274.job = sched.Enqueue(ctx, cff.Job{
			Run: task274.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task274)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:413:12
		task275 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task275.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _413_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   413,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task275.run = func(ctx context.Context) (err error) {
			taskEmitter := task275.emitter
			startTime := time.Now()
			defer func() {
				if task275.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task275.ran.Store(true)

			_413_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task275.job = sched.Enqueue(ctx, cff.Job{
			Run: task275.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task275)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:414:12
		task276 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task276.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _414_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   414,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task276.run = func(ctx context.Context) (err error) {
			taskEmitter := task276.emitter
			startTime := time.Now()
			defer func() {
				if task276.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task276.ran.Store(true)

			_414_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task276.job = sched.Enqueue(ctx, cff.Job{
			Run: task276.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task276)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:415:12
		task277 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task277.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _415_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   415,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task277.run = func(ctx context.Context) (err error) {
			taskEmitter := task277.emitter
			startTime := time.Now()
			defer func() {
				if task277.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task277.ran.Store(true)

			_415_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task277.job = sched.Enqueue(ctx, cff.Job{
			Run: task277.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task277)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:416:12
		task278 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task278.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _416_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   416,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task278.run = func(ctx context.Context) (err error) {
			taskEmitter := task278.emitter
			startTime := time.Now()
			defer func() {
				if task278.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task278.ran.Store(true)

			_416_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task278.job = sched.Enqueue(ctx, cff.Job{
			Run: task278.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task278)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:417:12
		task279 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task279.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _417_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   417,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task279.run = func(ctx context.Context) (err error) {
			taskEmitter := task279.emitter
			startTime := time.Now()
			defer func() {
				if task279.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task279.ran.Store(true)

			_417_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task279.job = sched.Enqueue(ctx, cff.Job{
			Run: task279.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task279)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:418:12
		task280 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task280.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _418_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   418,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task280.run = func(ctx context.Context) (err error) {
			taskEmitter := task280.emitter
			startTime := time.Now()
			defer func() {
				if task280.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task280.ran.Store(true)

			_418_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task280.job = sched.Enqueue(ctx, cff.Job{
			Run: task280.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task280)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:419:12
		task281 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task281.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _419_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   419,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task281.run = func(ctx context.Context) (err error) {
			taskEmitter := task281.emitter
			startTime := time.Now()
			defer func() {
				if task281.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task281.ran.Store(true)

			_419_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task281.job = sched.Enqueue(ctx, cff.Job{
			Run: task281.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task281)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:420:12
		task282 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task282.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _420_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   420,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task282.run = func(ctx context.Context) (err error) {
			taskEmitter := task282.emitter
			startTime := time.Now()
			defer func() {
				if task282.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task282.ran.Store(true)

			_420_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task282.job = sched.Enqueue(ctx, cff.Job{
			Run: task282.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task282)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:421:12
		task283 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task283.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _421_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   421,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task283.run = func(ctx context.Context) (err error) {
			taskEmitter := task283.emitter
			startTime := time.Now()
			defer func() {
				if task283.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task283.ran.Store(true)

			_421_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task283.job = sched.Enqueue(ctx, cff.Job{
			Run: task283.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task283)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:422:12
		task284 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task284.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _422_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   422,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task284.run = func(ctx context.Context) (err error) {
			taskEmitter := task284.emitter
			startTime := time.Now()
			defer func() {
				if task284.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task284.ran.Store(true)

			_422_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task284.job = sched.Enqueue(ctx, cff.Job{
			Run: task284.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task284)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:423:12
		task285 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task285.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _423_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   423,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task285.run = func(ctx context.Context) (err error) {
			taskEmitter := task285.emitter
			startTime := time.Now()
			defer func() {
				if task285.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task285.ran.Store(true)

			_423_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task285.job = sched.Enqueue(ctx, cff.Job{
			Run: task285.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task285)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:424:12
		task286 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task286.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _424_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   424,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task286.run = func(ctx context.Context) (err error) {
			taskEmitter := task286.emitter
			startTime := time.Now()
			defer func() {
				if task286.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task286.ran.Store(true)

			_424_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task286.job = sched.Enqueue(ctx, cff.Job{
			Run: task286.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task286)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:425:12
		task287 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task287.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _425_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   425,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task287.run = func(ctx context.Context) (err error) {
			taskEmitter := task287.emitter
			startTime := time.Now()
			defer func() {
				if task287.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task287.ran.Store(true)

			_425_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task287.job = sched.Enqueue(ctx, cff.Job{
			Run: task287.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task287)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:426:12
		task288 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task288.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _426_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   426,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task288.run = func(ctx context.Context) (err error) {
			taskEmitter := task288.emitter
			startTime := time.Now()
			defer func() {
				if task288.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task288.ran.Store(true)

			_426_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task288.job = sched.Enqueue(ctx, cff.Job{
			Run: task288.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task288)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:427:12
		task289 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task289.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _427_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   427,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task289.run = func(ctx context.Context) (err error) {
			taskEmitter := task289.emitter
			startTime := time.Now()
			defer func() {
				if task289.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task289.ran.Store(true)

			_427_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task289.job = sched.Enqueue(ctx, cff.Job{
			Run: task289.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task289)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:428:12
		task290 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task290.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _428_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   428,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task290.run = func(ctx context.Context) (err error) {
			taskEmitter := task290.emitter
			startTime := time.Now()
			defer func() {
				if task290.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task290.ran.Store(true)

			_428_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task290.job = sched.Enqueue(ctx, cff.Job{
			Run: task290.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task290)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:429:12
		task291 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task291.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _429_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   429,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task291.run = func(ctx context.Context) (err error) {
			taskEmitter := task291.emitter
			startTime := time.Now()
			defer func() {
				if task291.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task291.ran.Store(true)

			_429_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task291.job = sched.Enqueue(ctx, cff.Job{
			Run: task291.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task291)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:430:12
		task292 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task292.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _430_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   430,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task292.run = func(ctx context.Context) (err error) {
			taskEmitter := task292.emitter
			startTime := time.Now()
			defer func() {
				if task292.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task292.ran.Store(true)

			_430_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task292.job = sched.Enqueue(ctx, cff.Job{
			Run: task292.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task292)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:431:12
		task293 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task293.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _431_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   431,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task293.run = func(ctx context.Context) (err error) {
			taskEmitter := task293.emitter
			startTime := time.Now()
			defer func() {
				if task293.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task293.ran.Store(true)

			_431_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task293.job = sched.Enqueue(ctx, cff.Job{
			Run: task293.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task293)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:432:12
		task294 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task294.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _432_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   432,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task294.run = func(ctx context.Context) (err error) {
			taskEmitter := task294.emitter
			startTime := time.Now()
			defer func() {
				if task294.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task294.ran.Store(true)

			_432_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task294.job = sched.Enqueue(ctx, cff.Job{
			Run: task294.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task294)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:433:12
		task295 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task295.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _433_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   433,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task295.run = func(ctx context.Context) (err error) {
			taskEmitter := task295.emitter
			startTime := time.Now()
			defer func() {
				if task295.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task295.ran.Store(true)

			_433_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task295.job = sched.Enqueue(ctx, cff.Job{
			Run: task295.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task295)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:434:12
		task296 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task296.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _434_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   434,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task296.run = func(ctx context.Context) (err error) {
			taskEmitter := task296.emitter
			startTime := time.Now()
			defer func() {
				if task296.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task296.ran.Store(true)

			_434_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task296.job = sched.Enqueue(ctx, cff.Job{
			Run: task296.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task296)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:435:12
		task297 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task297.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _435_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   435,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task297.run = func(ctx context.Context) (err error) {
			taskEmitter := task297.emitter
			startTime := time.Now()
			defer func() {
				if task297.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task297.ran.Store(true)

			_435_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task297.job = sched.Enqueue(ctx, cff.Job{
			Run: task297.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task297)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:436:12
		task298 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task298.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _436_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   436,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task298.run = func(ctx context.Context) (err error) {
			taskEmitter := task298.emitter
			startTime := time.Now()
			defer func() {
				if task298.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task298.ran.Store(true)

			_436_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task298.job = sched.Enqueue(ctx, cff.Job{
			Run: task298.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task298)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:437:12
		task299 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task299.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _437_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   437,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task299.run = func(ctx context.Context) (err error) {
			taskEmitter := task299.emitter
			startTime := time.Now()
			defer func() {
				if task299.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task299.ran.Store(true)

			_437_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task299.job = sched.Enqueue(ctx, cff.Job{
			Run: task299.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task299)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:438:12
		task300 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task300.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _438_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   438,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task300.run = func(ctx context.Context) (err error) {
			taskEmitter := task300.emitter
			startTime := time.Now()
			defer func() {
				if task300.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task300.ran.Store(true)

			_438_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task300.job = sched.Enqueue(ctx, cff.Job{
			Run: task300.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task300)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:439:12
		task301 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task301.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _439_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   439,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task301.run = func(ctx context.Context) (err error) {
			taskEmitter := task301.emitter
			startTime := time.Now()
			defer func() {
				if task301.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task301.ran.Store(true)

			_439_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task301.job = sched.Enqueue(ctx, cff.Job{
			Run: task301.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task301)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:440:12
		task302 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task302.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _440_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   440,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task302.run = func(ctx context.Context) (err error) {
			taskEmitter := task302.emitter
			startTime := time.Now()
			defer func() {
				if task302.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task302.ran.Store(true)

			_440_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task302.job = sched.Enqueue(ctx, cff.Job{
			Run: task302.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task302)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:441:12
		task303 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task303.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _441_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   441,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task303.run = func(ctx context.Context) (err error) {
			taskEmitter := task303.emitter
			startTime := time.Now()
			defer func() {
				if task303.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task303.ran.Store(true)

			_441_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task303.job = sched.Enqueue(ctx, cff.Job{
			Run: task303.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task303)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:442:12
		task304 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task304.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _442_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   442,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task304.run = func(ctx context.Context) (err error) {
			taskEmitter := task304.emitter
			startTime := time.Now()
			defer func() {
				if task304.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task304.ran.Store(true)

			_442_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task304.job = sched.Enqueue(ctx, cff.Job{
			Run: task304.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task304)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:443:12
		task305 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task305.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _443_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   443,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task305.run = func(ctx context.Context) (err error) {
			taskEmitter := task305.emitter
			startTime := time.Now()
			defer func() {
				if task305.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task305.ran.Store(true)

			_443_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task305.job = sched.Enqueue(ctx, cff.Job{
			Run: task305.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task305)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:444:12
		task306 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task306.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _444_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   444,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task306.run = func(ctx context.Context) (err error) {
			taskEmitter := task306.emitter
			startTime := time.Now()
			defer func() {
				if task306.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task306.ran.Store(true)

			_444_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task306.job = sched.Enqueue(ctx, cff.Job{
			Run: task306.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task306)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:445:12
		task307 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task307.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _445_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   445,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task307.run = func(ctx context.Context) (err error) {
			taskEmitter := task307.emitter
			startTime := time.Now()
			defer func() {
				if task307.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task307.ran.Store(true)

			_445_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task307.job = sched.Enqueue(ctx, cff.Job{
			Run: task307.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task307)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:446:12
		task308 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task308.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _446_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   446,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task308.run = func(ctx context.Context) (err error) {
			taskEmitter := task308.emitter
			startTime := time.Now()
			defer func() {
				if task308.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task308.ran.Store(true)

			_446_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task308.job = sched.Enqueue(ctx, cff.Job{
			Run: task308.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task308)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:447:12
		task309 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task309.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _447_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   447,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task309.run = func(ctx context.Context) (err error) {
			taskEmitter := task309.emitter
			startTime := time.Now()
			defer func() {
				if task309.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task309.ran.Store(true)

			_447_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task309.job = sched.Enqueue(ctx, cff.Job{
			Run: task309.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task309)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:448:12
		task310 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task310.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _448_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   448,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task310.run = func(ctx context.Context) (err error) {
			taskEmitter := task310.emitter
			startTime := time.Now()
			defer func() {
				if task310.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task310.ran.Store(true)

			_448_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task310.job = sched.Enqueue(ctx, cff.Job{
			Run: task310.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task310)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:449:12
		task311 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task311.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _449_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   449,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task311.run = func(ctx context.Context) (err error) {
			taskEmitter := task311.emitter
			startTime := time.Now()
			defer func() {
				if task311.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task311.ran.Store(true)

			_449_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task311.job = sched.Enqueue(ctx, cff.Job{
			Run: task311.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task311)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:450:12
		task312 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task312.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _450_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   450,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task312.run = func(ctx context.Context) (err error) {
			taskEmitter := task312.emitter
			startTime := time.Now()
			defer func() {
				if task312.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task312.ran.Store(true)

			_450_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task312.job = sched.Enqueue(ctx, cff.Job{
			Run: task312.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task312)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:451:12
		task313 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task313.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _451_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   451,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task313.run = func(ctx context.Context) (err error) {
			taskEmitter := task313.emitter
			startTime := time.Now()
			defer func() {
				if task313.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task313.ran.Store(true)

			_451_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task313.job = sched.Enqueue(ctx, cff.Job{
			Run: task313.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task313)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:452:12
		task314 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task314.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _452_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   452,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task314.run = func(ctx context.Context) (err error) {
			taskEmitter := task314.emitter
			startTime := time.Now()
			defer func() {
				if task314.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task314.ran.Store(true)

			_452_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task314.job = sched.Enqueue(ctx, cff.Job{
			Run: task314.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task314)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:453:12
		task315 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task315.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _453_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   453,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task315.run = func(ctx context.Context) (err error) {
			taskEmitter := task315.emitter
			startTime := time.Now()
			defer func() {
				if task315.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task315.ran.Store(true)

			_453_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task315.job = sched.Enqueue(ctx, cff.Job{
			Run: task315.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task315)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:454:12
		task316 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task316.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _454_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   454,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task316.run = func(ctx context.Context) (err error) {
			taskEmitter := task316.emitter
			startTime := time.Now()
			defer func() {
				if task316.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task316.ran.Store(true)

			_454_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task316.job = sched.Enqueue(ctx, cff.Job{
			Run: task316.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task316)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:455:12
		task317 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task317.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _455_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   455,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task317.run = func(ctx context.Context) (err error) {
			taskEmitter := task317.emitter
			startTime := time.Now()
			defer func() {
				if task317.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task317.ran.Store(true)

			_455_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task317.job = sched.Enqueue(ctx, cff.Job{
			Run: task317.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task317)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:456:12
		task318 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task318.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _456_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   456,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task318.run = func(ctx context.Context) (err error) {
			taskEmitter := task318.emitter
			startTime := time.Now()
			defer func() {
				if task318.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task318.ran.Store(true)

			_456_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task318.job = sched.Enqueue(ctx, cff.Job{
			Run: task318.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task318)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:457:12
		task319 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task319.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _457_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   457,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task319.run = func(ctx context.Context) (err error) {
			taskEmitter := task319.emitter
			startTime := time.Now()
			defer func() {
				if task319.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task319.ran.Store(true)

			_457_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task319.job = sched.Enqueue(ctx, cff.Job{
			Run: task319.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task319)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:458:12
		task320 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task320.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _458_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   458,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task320.run = func(ctx context.Context) (err error) {
			taskEmitter := task320.emitter
			startTime := time.Now()
			defer func() {
				if task320.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task320.ran.Store(true)

			_458_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task320.job = sched.Enqueue(ctx, cff.Job{
			Run: task320.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task320)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:459:12
		task321 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task321.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _459_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   459,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task321.run = func(ctx context.Context) (err error) {
			taskEmitter := task321.emitter
			startTime := time.Now()
			defer func() {
				if task321.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task321.ran.Store(true)

			_459_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task321.job = sched.Enqueue(ctx, cff.Job{
			Run: task321.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task321)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:460:12
		task322 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task322.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _460_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   460,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task322.run = func(ctx context.Context) (err error) {
			taskEmitter := task322.emitter
			startTime := time.Now()
			defer func() {
				if task322.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task322.ran.Store(true)

			_460_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task322.job = sched.Enqueue(ctx, cff.Job{
			Run: task322.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task322)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:461:12
		task323 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task323.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _461_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   461,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task323.run = func(ctx context.Context) (err error) {
			taskEmitter := task323.emitter
			startTime := time.Now()
			defer func() {
				if task323.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task323.ran.Store(true)

			_461_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task323.job = sched.Enqueue(ctx, cff.Job{
			Run: task323.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task323)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:462:12
		task324 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task324.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _462_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   462,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task324.run = func(ctx context.Context) (err error) {
			taskEmitter := task324.emitter
			startTime := time.Now()
			defer func() {
				if task324.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task324.ran.Store(true)

			_462_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task324.job = sched.Enqueue(ctx, cff.Job{
			Run: task324.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task324)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:463:12
		task325 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task325.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _463_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   463,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task325.run = func(ctx context.Context) (err error) {
			taskEmitter := task325.emitter
			startTime := time.Now()
			defer func() {
				if task325.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task325.ran.Store(true)

			_463_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task325.job = sched.Enqueue(ctx, cff.Job{
			Run: task325.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task325)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:464:12
		task326 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task326.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _464_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   464,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task326.run = func(ctx context.Context) (err error) {
			taskEmitter := task326.emitter
			startTime := time.Now()
			defer func() {
				if task326.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task326.ran.Store(true)

			_464_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task326.job = sched.Enqueue(ctx, cff.Job{
			Run: task326.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task326)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:465:12
		task327 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task327.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _465_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   465,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task327.run = func(ctx context.Context) (err error) {
			taskEmitter := task327.emitter
			startTime := time.Now()
			defer func() {
				if task327.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task327.ran.Store(true)

			_465_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task327.job = sched.Enqueue(ctx, cff.Job{
			Run: task327.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task327)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:466:12
		task328 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task328.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _466_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   466,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task328.run = func(ctx context.Context) (err error) {
			taskEmitter := task328.emitter
			startTime := time.Now()
			defer func() {
				if task328.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task328.ran.Store(true)

			_466_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task328.job = sched.Enqueue(ctx, cff.Job{
			Run: task328.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task328)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:467:12
		task329 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task329.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _467_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   467,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task329.run = func(ctx context.Context) (err error) {
			taskEmitter := task329.emitter
			startTime := time.Now()
			defer func() {
				if task329.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task329.ran.Store(true)

			_467_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task329.job = sched.Enqueue(ctx, cff.Job{
			Run: task329.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task329)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:468:12
		task330 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task330.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _468_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   468,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task330.run = func(ctx context.Context) (err error) {
			taskEmitter := task330.emitter
			startTime := time.Now()
			defer func() {
				if task330.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task330.ran.Store(true)

			_468_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task330.job = sched.Enqueue(ctx, cff.Job{
			Run: task330.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task330)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:469:12
		task331 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task331.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _469_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   469,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task331.run = func(ctx context.Context) (err error) {
			taskEmitter := task331.emitter
			startTime := time.Now()
			defer func() {
				if task331.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task331.ran.Store(true)

			_469_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task331.job = sched.Enqueue(ctx, cff.Job{
			Run: task331.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task331)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:470:12
		task332 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task332.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _470_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   470,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task332.run = func(ctx context.Context) (err error) {
			taskEmitter := task332.emitter
			startTime := time.Now()
			defer func() {
				if task332.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task332.ran.Store(true)

			_470_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task332.job = sched.Enqueue(ctx, cff.Job{
			Run: task332.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task332)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:471:12
		task333 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task333.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _471_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   471,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task333.run = func(ctx context.Context) (err error) {
			taskEmitter := task333.emitter
			startTime := time.Now()
			defer func() {
				if task333.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task333.ran.Store(true)

			_471_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task333.job = sched.Enqueue(ctx, cff.Job{
			Run: task333.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task333)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:472:12
		task334 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task334.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _472_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   472,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task334.run = func(ctx context.Context) (err error) {
			taskEmitter := task334.emitter
			startTime := time.Now()
			defer func() {
				if task334.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task334.ran.Store(true)

			_472_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task334.job = sched.Enqueue(ctx, cff.Job{
			Run: task334.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task334)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:473:12
		task335 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task335.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _473_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   473,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task335.run = func(ctx context.Context) (err error) {
			taskEmitter := task335.emitter
			startTime := time.Now()
			defer func() {
				if task335.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task335.ran.Store(true)

			_473_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task335.job = sched.Enqueue(ctx, cff.Job{
			Run: task335.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task335)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:474:12
		task336 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task336.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _474_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   474,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task336.run = func(ctx context.Context) (err error) {
			taskEmitter := task336.emitter
			startTime := time.Now()
			defer func() {
				if task336.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task336.ran.Store(true)

			_474_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task336.job = sched.Enqueue(ctx, cff.Job{
			Run: task336.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task336)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:475:12
		task337 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task337.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _475_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   475,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task337.run = func(ctx context.Context) (err error) {
			taskEmitter := task337.emitter
			startTime := time.Now()
			defer func() {
				if task337.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task337.ran.Store(true)

			_475_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task337.job = sched.Enqueue(ctx, cff.Job{
			Run: task337.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task337)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:476:12
		task338 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task338.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _476_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   476,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task338.run = func(ctx context.Context) (err error) {
			taskEmitter := task338.emitter
			startTime := time.Now()
			defer func() {
				if task338.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task338.ran.Store(true)

			_476_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task338.job = sched.Enqueue(ctx, cff.Job{
			Run: task338.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task338)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:477:12
		task339 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task339.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _477_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   477,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task339.run = func(ctx context.Context) (err error) {
			taskEmitter := task339.emitter
			startTime := time.Now()
			defer func() {
				if task339.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task339.ran.Store(true)

			_477_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task339.job = sched.Enqueue(ctx, cff.Job{
			Run: task339.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task339)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:478:12
		task340 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task340.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _478_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   478,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task340.run = func(ctx context.Context) (err error) {
			taskEmitter := task340.emitter
			startTime := time.Now()
			defer func() {
				if task340.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task340.ran.Store(true)

			_478_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task340.job = sched.Enqueue(ctx, cff.Job{
			Run: task340.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task340)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:479:12
		task341 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task341.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _479_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   479,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task341.run = func(ctx context.Context) (err error) {
			taskEmitter := task341.emitter
			startTime := time.Now()
			defer func() {
				if task341.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task341.ran.Store(true)

			_479_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task341.job = sched.Enqueue(ctx, cff.Job{
			Run: task341.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task341)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:480:12
		task342 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task342.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _480_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   480,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task342.run = func(ctx context.Context) (err error) {
			taskEmitter := task342.emitter
			startTime := time.Now()
			defer func() {
				if task342.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task342.ran.Store(true)

			_480_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task342.job = sched.Enqueue(ctx, cff.Job{
			Run: task342.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task342)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:481:12
		task343 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task343.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _481_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   481,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task343.run = func(ctx context.Context) (err error) {
			taskEmitter := task343.emitter
			startTime := time.Now()
			defer func() {
				if task343.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task343.ran.Store(true)

			_481_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task343.job = sched.Enqueue(ctx, cff.Job{
			Run: task343.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task343)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:482:12
		task344 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task344.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _482_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   482,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task344.run = func(ctx context.Context) (err error) {
			taskEmitter := task344.emitter
			startTime := time.Now()
			defer func() {
				if task344.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task344.ran.Store(true)

			_482_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task344.job = sched.Enqueue(ctx, cff.Job{
			Run: task344.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task344)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:483:12
		task345 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task345.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _483_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   483,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task345.run = func(ctx context.Context) (err error) {
			taskEmitter := task345.emitter
			startTime := time.Now()
			defer func() {
				if task345.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task345.ran.Store(true)

			_483_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task345.job = sched.Enqueue(ctx, cff.Job{
			Run: task345.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task345)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:484:12
		task346 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task346.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _484_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   484,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task346.run = func(ctx context.Context) (err error) {
			taskEmitter := task346.emitter
			startTime := time.Now()
			defer func() {
				if task346.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task346.ran.Store(true)

			_484_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task346.job = sched.Enqueue(ctx, cff.Job{
			Run: task346.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task346)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:485:12
		task347 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task347.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _485_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   485,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task347.run = func(ctx context.Context) (err error) {
			taskEmitter := task347.emitter
			startTime := time.Now()
			defer func() {
				if task347.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task347.ran.Store(true)

			_485_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task347.job = sched.Enqueue(ctx, cff.Job{
			Run: task347.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task347)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:486:12
		task348 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task348.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _486_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   486,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task348.run = func(ctx context.Context) (err error) {
			taskEmitter := task348.emitter
			startTime := time.Now()
			defer func() {
				if task348.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task348.ran.Store(true)

			_486_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task348.job = sched.Enqueue(ctx, cff.Job{
			Run: task348.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task348)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:487:12
		task349 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task349.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _487_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   487,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task349.run = func(ctx context.Context) (err error) {
			taskEmitter := task349.emitter
			startTime := time.Now()
			defer func() {
				if task349.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task349.ran.Store(true)

			_487_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task349.job = sched.Enqueue(ctx, cff.Job{
			Run: task349.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task349)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:488:12
		task350 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task350.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _488_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   488,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task350.run = func(ctx context.Context) (err error) {
			taskEmitter := task350.emitter
			startTime := time.Now()
			defer func() {
				if task350.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task350.ran.Store(true)

			_488_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task350.job = sched.Enqueue(ctx, cff.Job{
			Run: task350.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task350)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:489:12
		task351 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task351.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _489_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   489,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task351.run = func(ctx context.Context) (err error) {
			taskEmitter := task351.emitter
			startTime := time.Now()
			defer func() {
				if task351.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task351.ran.Store(true)

			_489_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task351.job = sched.Enqueue(ctx, cff.Job{
			Run: task351.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task351)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:490:12
		task352 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task352.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _490_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   490,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task352.run = func(ctx context.Context) (err error) {
			taskEmitter := task352.emitter
			startTime := time.Now()
			defer func() {
				if task352.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task352.ran.Store(true)

			_490_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task352.job = sched.Enqueue(ctx, cff.Job{
			Run: task352.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task352)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:491:12
		task353 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task353.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _491_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   491,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task353.run = func(ctx context.Context) (err error) {
			taskEmitter := task353.emitter
			startTime := time.Now()
			defer func() {
				if task353.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task353.ran.Store(true)

			_491_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task353.job = sched.Enqueue(ctx, cff.Job{
			Run: task353.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task353)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:492:12
		task354 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task354.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _492_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   492,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task354.run = func(ctx context.Context) (err error) {
			taskEmitter := task354.emitter
			startTime := time.Now()
			defer func() {
				if task354.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task354.ran.Store(true)

			_492_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task354.job = sched.Enqueue(ctx, cff.Job{
			Run: task354.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task354)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:493:12
		task355 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task355.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _493_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   493,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task355.run = func(ctx context.Context) (err error) {
			taskEmitter := task355.emitter
			startTime := time.Now()
			defer func() {
				if task355.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task355.ran.Store(true)

			_493_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task355.job = sched.Enqueue(ctx, cff.Job{
			Run: task355.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task355)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:494:12
		task356 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task356.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _494_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   494,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task356.run = func(ctx context.Context) (err error) {
			taskEmitter := task356.emitter
			startTime := time.Now()
			defer func() {
				if task356.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task356.ran.Store(true)

			_494_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task356.job = sched.Enqueue(ctx, cff.Job{
			Run: task356.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task356)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:495:12
		task357 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task357.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _495_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   495,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task357.run = func(ctx context.Context) (err error) {
			taskEmitter := task357.emitter
			startTime := time.Now()
			defer func() {
				if task357.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task357.ran.Store(true)

			_495_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task357.job = sched.Enqueue(ctx, cff.Job{
			Run: task357.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task357)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:496:12
		task358 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task358.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _496_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   496,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task358.run = func(ctx context.Context) (err error) {
			taskEmitter := task358.emitter
			startTime := time.Now()
			defer func() {
				if task358.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task358.ran.Store(true)

			_496_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task358.job = sched.Enqueue(ctx, cff.Job{
			Run: task358.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task358)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:497:12
		task359 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task359.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _497_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   497,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task359.run = func(ctx context.Context) (err error) {
			taskEmitter := task359.emitter
			startTime := time.Now()
			defer func() {
				if task359.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task359.ran.Store(true)

			_497_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task359.job = sched.Enqueue(ctx, cff.Job{
			Run: task359.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task359)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:498:12
		task360 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task360.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _498_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   498,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task360.run = func(ctx context.Context) (err error) {
			taskEmitter := task360.emitter
			startTime := time.Now()
			defer func() {
				if task360.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task360.ran.Store(true)

			_498_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task360.job = sched.Enqueue(ctx, cff.Job{
			Run: task360.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task360)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:499:12
		task361 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task361.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _499_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   499,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task361.run = func(ctx context.Context) (err error) {
			taskEmitter := task361.emitter
			startTime := time.Now()
			defer func() {
				if task361.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task361.ran.Store(true)

			_499_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task361.job = sched.Enqueue(ctx, cff.Job{
			Run: task361.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task361)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:500:12
		task362 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task362.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _500_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   500,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task362.run = func(ctx context.Context) (err error) {
			taskEmitter := task362.emitter
			startTime := time.Now()
			defer func() {
				if task362.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task362.ran.Store(true)

			_500_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task362.job = sched.Enqueue(ctx, cff.Job{
			Run: task362.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task362)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:501:12
		task363 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task363.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _501_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   501,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task363.run = func(ctx context.Context) (err error) {
			taskEmitter := task363.emitter
			startTime := time.Now()
			defer func() {
				if task363.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task363.ran.Store(true)

			_501_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task363.job = sched.Enqueue(ctx, cff.Job{
			Run: task363.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task363)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:502:12
		task364 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task364.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _502_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   502,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task364.run = func(ctx context.Context) (err error) {
			taskEmitter := task364.emitter
			startTime := time.Now()
			defer func() {
				if task364.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task364.ran.Store(true)

			_502_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task364.job = sched.Enqueue(ctx, cff.Job{
			Run: task364.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task364)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:503:12
		task365 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task365.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _503_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   503,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task365.run = func(ctx context.Context) (err error) {
			taskEmitter := task365.emitter
			startTime := time.Now()
			defer func() {
				if task365.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task365.ran.Store(true)

			_503_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task365.job = sched.Enqueue(ctx, cff.Job{
			Run: task365.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task365)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:504:12
		task366 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task366.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _504_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   504,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task366.run = func(ctx context.Context) (err error) {
			taskEmitter := task366.emitter
			startTime := time.Now()
			defer func() {
				if task366.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task366.ran.Store(true)

			_504_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task366.job = sched.Enqueue(ctx, cff.Job{
			Run: task366.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task366)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:505:12
		task367 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task367.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _505_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   505,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task367.run = func(ctx context.Context) (err error) {
			taskEmitter := task367.emitter
			startTime := time.Now()
			defer func() {
				if task367.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task367.ran.Store(true)

			_505_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task367.job = sched.Enqueue(ctx, cff.Job{
			Run: task367.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task367)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:506:12
		task368 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task368.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _506_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   506,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task368.run = func(ctx context.Context) (err error) {
			taskEmitter := task368.emitter
			startTime := time.Now()
			defer func() {
				if task368.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task368.ran.Store(true)

			_506_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task368.job = sched.Enqueue(ctx, cff.Job{
			Run: task368.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task368)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:507:12
		task369 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task369.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _507_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   507,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task369.run = func(ctx context.Context) (err error) {
			taskEmitter := task369.emitter
			startTime := time.Now()
			defer func() {
				if task369.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task369.ran.Store(true)

			_507_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task369.job = sched.Enqueue(ctx, cff.Job{
			Run: task369.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task369)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:508:12
		task370 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task370.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _508_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   508,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task370.run = func(ctx context.Context) (err error) {
			taskEmitter := task370.emitter
			startTime := time.Now()
			defer func() {
				if task370.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task370.ran.Store(true)

			_508_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task370.job = sched.Enqueue(ctx, cff.Job{
			Run: task370.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task370)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:509:12
		task371 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task371.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _509_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   509,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task371.run = func(ctx context.Context) (err error) {
			taskEmitter := task371.emitter
			startTime := time.Now()
			defer func() {
				if task371.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task371.ran.Store(true)

			_509_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task371.job = sched.Enqueue(ctx, cff.Job{
			Run: task371.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task371)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:510:12
		task372 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task372.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _510_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   510,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task372.run = func(ctx context.Context) (err error) {
			taskEmitter := task372.emitter
			startTime := time.Now()
			defer func() {
				if task372.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task372.ran.Store(true)

			_510_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task372.job = sched.Enqueue(ctx, cff.Job{
			Run: task372.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task372)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:511:12
		task373 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task373.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _511_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   511,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task373.run = func(ctx context.Context) (err error) {
			taskEmitter := task373.emitter
			startTime := time.Now()
			defer func() {
				if task373.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task373.ran.Store(true)

			_511_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task373.job = sched.Enqueue(ctx, cff.Job{
			Run: task373.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task373)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:512:12
		task374 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task374.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _512_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   512,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task374.run = func(ctx context.Context) (err error) {
			taskEmitter := task374.emitter
			startTime := time.Now()
			defer func() {
				if task374.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task374.ran.Store(true)

			_512_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task374.job = sched.Enqueue(ctx, cff.Job{
			Run: task374.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task374)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:513:12
		task375 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task375.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _513_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   513,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task375.run = func(ctx context.Context) (err error) {
			taskEmitter := task375.emitter
			startTime := time.Now()
			defer func() {
				if task375.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task375.ran.Store(true)

			_513_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task375.job = sched.Enqueue(ctx, cff.Job{
			Run: task375.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task375)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:514:12
		task376 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task376.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _514_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   514,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task376.run = func(ctx context.Context) (err error) {
			taskEmitter := task376.emitter
			startTime := time.Now()
			defer func() {
				if task376.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task376.ran.Store(true)

			_514_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task376.job = sched.Enqueue(ctx, cff.Job{
			Run: task376.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task376)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:515:12
		task377 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task377.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _515_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   515,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task377.run = func(ctx context.Context) (err error) {
			taskEmitter := task377.emitter
			startTime := time.Now()
			defer func() {
				if task377.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task377.ran.Store(true)

			_515_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task377.job = sched.Enqueue(ctx, cff.Job{
			Run: task377.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task377)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:516:12
		task378 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task378.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _516_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   516,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task378.run = func(ctx context.Context) (err error) {
			taskEmitter := task378.emitter
			startTime := time.Now()
			defer func() {
				if task378.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task378.ran.Store(true)

			_516_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task378.job = sched.Enqueue(ctx, cff.Job{
			Run: task378.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task378)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:517:12
		task379 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task379.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _517_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   517,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task379.run = func(ctx context.Context) (err error) {
			taskEmitter := task379.emitter
			startTime := time.Now()
			defer func() {
				if task379.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task379.ran.Store(true)

			_517_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task379.job = sched.Enqueue(ctx, cff.Job{
			Run: task379.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task379)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:518:12
		task380 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task380.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _518_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   518,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task380.run = func(ctx context.Context) (err error) {
			taskEmitter := task380.emitter
			startTime := time.Now()
			defer func() {
				if task380.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task380.ran.Store(true)

			_518_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task380.job = sched.Enqueue(ctx, cff.Job{
			Run: task380.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task380)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:519:12
		task381 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task381.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _519_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   519,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task381.run = func(ctx context.Context) (err error) {
			taskEmitter := task381.emitter
			startTime := time.Now()
			defer func() {
				if task381.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task381.ran.Store(true)

			_519_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task381.job = sched.Enqueue(ctx, cff.Job{
			Run: task381.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task381)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:520:12
		task382 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task382.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _520_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   520,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task382.run = func(ctx context.Context) (err error) {
			taskEmitter := task382.emitter
			startTime := time.Now()
			defer func() {
				if task382.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task382.ran.Store(true)

			_520_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task382.job = sched.Enqueue(ctx, cff.Job{
			Run: task382.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task382)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:521:12
		task383 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task383.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _521_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   521,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task383.run = func(ctx context.Context) (err error) {
			taskEmitter := task383.emitter
			startTime := time.Now()
			defer func() {
				if task383.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task383.ran.Store(true)

			_521_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task383.job = sched.Enqueue(ctx, cff.Job{
			Run: task383.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task383)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:522:12
		task384 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task384.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _522_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   522,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task384.run = func(ctx context.Context) (err error) {
			taskEmitter := task384.emitter
			startTime := time.Now()
			defer func() {
				if task384.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task384.ran.Store(true)

			_522_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task384.job = sched.Enqueue(ctx, cff.Job{
			Run: task384.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task384)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:523:12
		task385 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task385.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _523_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   523,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task385.run = func(ctx context.Context) (err error) {
			taskEmitter := task385.emitter
			startTime := time.Now()
			defer func() {
				if task385.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task385.ran.Store(true)

			_523_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task385.job = sched.Enqueue(ctx, cff.Job{
			Run: task385.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task385)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:524:12
		task386 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task386.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _524_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   524,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task386.run = func(ctx context.Context) (err error) {
			taskEmitter := task386.emitter
			startTime := time.Now()
			defer func() {
				if task386.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task386.ran.Store(true)

			_524_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task386.job = sched.Enqueue(ctx, cff.Job{
			Run: task386.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task386)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:525:12
		task387 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task387.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _525_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   525,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task387.run = func(ctx context.Context) (err error) {
			taskEmitter := task387.emitter
			startTime := time.Now()
			defer func() {
				if task387.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task387.ran.Store(true)

			_525_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task387.job = sched.Enqueue(ctx, cff.Job{
			Run: task387.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task387)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:526:12
		task388 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task388.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _526_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   526,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task388.run = func(ctx context.Context) (err error) {
			taskEmitter := task388.emitter
			startTime := time.Now()
			defer func() {
				if task388.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task388.ran.Store(true)

			_526_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task388.job = sched.Enqueue(ctx, cff.Job{
			Run: task388.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task388)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:527:12
		task389 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task389.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _527_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   527,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task389.run = func(ctx context.Context) (err error) {
			taskEmitter := task389.emitter
			startTime := time.Now()
			defer func() {
				if task389.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task389.ran.Store(true)

			_527_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task389.job = sched.Enqueue(ctx, cff.Job{
			Run: task389.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task389)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:528:12
		task390 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task390.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _528_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   528,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task390.run = func(ctx context.Context) (err error) {
			taskEmitter := task390.emitter
			startTime := time.Now()
			defer func() {
				if task390.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task390.ran.Store(true)

			_528_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task390.job = sched.Enqueue(ctx, cff.Job{
			Run: task390.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task390)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:529:12
		task391 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task391.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _529_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   529,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task391.run = func(ctx context.Context) (err error) {
			taskEmitter := task391.emitter
			startTime := time.Now()
			defer func() {
				if task391.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task391.ran.Store(true)

			_529_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task391.job = sched.Enqueue(ctx, cff.Job{
			Run: task391.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task391)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:530:12
		task392 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task392.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _530_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   530,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task392.run = func(ctx context.Context) (err error) {
			taskEmitter := task392.emitter
			startTime := time.Now()
			defer func() {
				if task392.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task392.ran.Store(true)

			_530_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task392.job = sched.Enqueue(ctx, cff.Job{
			Run: task392.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task392)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:531:12
		task393 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task393.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _531_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   531,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task393.run = func(ctx context.Context) (err error) {
			taskEmitter := task393.emitter
			startTime := time.Now()
			defer func() {
				if task393.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task393.ran.Store(true)

			_531_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task393.job = sched.Enqueue(ctx, cff.Job{
			Run: task393.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task393)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:532:12
		task394 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task394.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _532_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   532,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task394.run = func(ctx context.Context) (err error) {
			taskEmitter := task394.emitter
			startTime := time.Now()
			defer func() {
				if task394.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task394.ran.Store(true)

			_532_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task394.job = sched.Enqueue(ctx, cff.Job{
			Run: task394.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task394)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:533:12
		task395 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task395.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _533_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   533,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task395.run = func(ctx context.Context) (err error) {
			taskEmitter := task395.emitter
			startTime := time.Now()
			defer func() {
				if task395.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task395.ran.Store(true)

			_533_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task395.job = sched.Enqueue(ctx, cff.Job{
			Run: task395.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task395)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:534:12
		task396 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task396.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _534_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   534,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task396.run = func(ctx context.Context) (err error) {
			taskEmitter := task396.emitter
			startTime := time.Now()
			defer func() {
				if task396.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task396.ran.Store(true)

			_534_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task396.job = sched.Enqueue(ctx, cff.Job{
			Run: task396.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task396)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:535:12
		task397 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task397.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _535_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   535,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task397.run = func(ctx context.Context) (err error) {
			taskEmitter := task397.emitter
			startTime := time.Now()
			defer func() {
				if task397.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task397.ran.Store(true)

			_535_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task397.job = sched.Enqueue(ctx, cff.Job{
			Run: task397.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task397)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:536:12
		task398 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task398.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _536_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   536,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task398.run = func(ctx context.Context) (err error) {
			taskEmitter := task398.emitter
			startTime := time.Now()
			defer func() {
				if task398.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task398.ran.Store(true)

			_536_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task398.job = sched.Enqueue(ctx, cff.Job{
			Run: task398.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task398)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:537:12
		task399 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task399.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _537_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   537,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task399.run = func(ctx context.Context) (err error) {
			taskEmitter := task399.emitter
			startTime := time.Now()
			defer func() {
				if task399.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task399.ran.Store(true)

			_537_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task399.job = sched.Enqueue(ctx, cff.Job{
			Run: task399.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task399)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:538:12
		task400 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task400.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _538_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   538,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task400.run = func(ctx context.Context) (err error) {
			taskEmitter := task400.emitter
			startTime := time.Now()
			defer func() {
				if task400.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task400.ran.Store(true)

			_538_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task400.job = sched.Enqueue(ctx, cff.Job{
			Run: task400.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task400)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:539:12
		task401 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task401.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _539_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   539,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task401.run = func(ctx context.Context) (err error) {
			taskEmitter := task401.emitter
			startTime := time.Now()
			defer func() {
				if task401.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task401.ran.Store(true)

			_539_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task401.job = sched.Enqueue(ctx, cff.Job{
			Run: task401.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task401)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:540:12
		task402 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task402.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _540_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   540,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task402.run = func(ctx context.Context) (err error) {
			taskEmitter := task402.emitter
			startTime := time.Now()
			defer func() {
				if task402.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task402.ran.Store(true)

			_540_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task402.job = sched.Enqueue(ctx, cff.Job{
			Run: task402.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task402)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:541:12
		task403 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task403.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _541_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   541,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task403.run = func(ctx context.Context) (err error) {
			taskEmitter := task403.emitter
			startTime := time.Now()
			defer func() {
				if task403.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task403.ran.Store(true)

			_541_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task403.job = sched.Enqueue(ctx, cff.Job{
			Run: task403.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task403)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:542:12
		task404 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task404.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _542_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   542,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task404.run = func(ctx context.Context) (err error) {
			taskEmitter := task404.emitter
			startTime := time.Now()
			defer func() {
				if task404.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task404.ran.Store(true)

			_542_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task404.job = sched.Enqueue(ctx, cff.Job{
			Run: task404.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task404)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:543:12
		task405 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task405.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _543_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   543,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task405.run = func(ctx context.Context) (err error) {
			taskEmitter := task405.emitter
			startTime := time.Now()
			defer func() {
				if task405.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task405.ran.Store(true)

			_543_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task405.job = sched.Enqueue(ctx, cff.Job{
			Run: task405.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task405)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:544:12
		task406 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task406.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _544_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   544,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task406.run = func(ctx context.Context) (err error) {
			taskEmitter := task406.emitter
			startTime := time.Now()
			defer func() {
				if task406.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task406.ran.Store(true)

			_544_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task406.job = sched.Enqueue(ctx, cff.Job{
			Run: task406.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task406)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:545:12
		task407 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task407.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _545_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   545,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task407.run = func(ctx context.Context) (err error) {
			taskEmitter := task407.emitter
			startTime := time.Now()
			defer func() {
				if task407.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task407.ran.Store(true)

			_545_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task407.job = sched.Enqueue(ctx, cff.Job{
			Run: task407.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task407)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:546:12
		task408 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task408.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _546_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   546,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task408.run = func(ctx context.Context) (err error) {
			taskEmitter := task408.emitter
			startTime := time.Now()
			defer func() {
				if task408.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task408.ran.Store(true)

			_546_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task408.job = sched.Enqueue(ctx, cff.Job{
			Run: task408.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task408)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:547:12
		task409 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task409.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _547_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   547,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task409.run = func(ctx context.Context) (err error) {
			taskEmitter := task409.emitter
			startTime := time.Now()
			defer func() {
				if task409.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task409.ran.Store(true)

			_547_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task409.job = sched.Enqueue(ctx, cff.Job{
			Run: task409.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task409)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:548:12
		task410 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task410.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _548_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   548,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task410.run = func(ctx context.Context) (err error) {
			taskEmitter := task410.emitter
			startTime := time.Now()
			defer func() {
				if task410.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task410.ran.Store(true)

			_548_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task410.job = sched.Enqueue(ctx, cff.Job{
			Run: task410.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task410)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:549:12
		task411 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task411.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _549_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   549,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task411.run = func(ctx context.Context) (err error) {
			taskEmitter := task411.emitter
			startTime := time.Now()
			defer func() {
				if task411.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task411.ran.Store(true)

			_549_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task411.job = sched.Enqueue(ctx, cff.Job{
			Run: task411.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task411)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:550:12
		task412 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task412.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _550_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   550,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task412.run = func(ctx context.Context) (err error) {
			taskEmitter := task412.emitter
			startTime := time.Now()
			defer func() {
				if task412.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task412.ran.Store(true)

			_550_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task412.job = sched.Enqueue(ctx, cff.Job{
			Run: task412.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task412)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:551:12
		task413 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task413.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _551_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   551,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task413.run = func(ctx context.Context) (err error) {
			taskEmitter := task413.emitter
			startTime := time.Now()
			defer func() {
				if task413.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task413.ran.Store(true)

			_551_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task413.job = sched.Enqueue(ctx, cff.Job{
			Run: task413.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task413)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:552:12
		task414 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task414.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _552_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   552,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task414.run = func(ctx context.Context) (err error) {
			taskEmitter := task414.emitter
			startTime := time.Now()
			defer func() {
				if task414.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task414.ran.Store(true)

			_552_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task414.job = sched.Enqueue(ctx, cff.Job{
			Run: task414.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task414)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:553:12
		task415 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task415.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _553_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   553,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task415.run = func(ctx context.Context) (err error) {
			taskEmitter := task415.emitter
			startTime := time.Now()
			defer func() {
				if task415.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task415.ran.Store(true)

			_553_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task415.job = sched.Enqueue(ctx, cff.Job{
			Run: task415.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task415)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:554:12
		task416 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task416.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _554_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   554,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task416.run = func(ctx context.Context) (err error) {
			taskEmitter := task416.emitter
			startTime := time.Now()
			defer func() {
				if task416.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task416.ran.Store(true)

			_554_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task416.job = sched.Enqueue(ctx, cff.Job{
			Run: task416.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task416)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:555:12
		task417 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task417.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _555_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   555,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task417.run = func(ctx context.Context) (err error) {
			taskEmitter := task417.emitter
			startTime := time.Now()
			defer func() {
				if task417.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task417.ran.Store(true)

			_555_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task417.job = sched.Enqueue(ctx, cff.Job{
			Run: task417.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task417)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:556:12
		task418 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task418.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _556_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   556,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task418.run = func(ctx context.Context) (err error) {
			taskEmitter := task418.emitter
			startTime := time.Now()
			defer func() {
				if task418.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task418.ran.Store(true)

			_556_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task418.job = sched.Enqueue(ctx, cff.Job{
			Run: task418.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task418)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:557:12
		task419 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task419.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _557_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   557,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task419.run = func(ctx context.Context) (err error) {
			taskEmitter := task419.emitter
			startTime := time.Now()
			defer func() {
				if task419.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task419.ran.Store(true)

			_557_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task419.job = sched.Enqueue(ctx, cff.Job{
			Run: task419.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task419)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:558:12
		task420 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task420.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _558_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   558,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task420.run = func(ctx context.Context) (err error) {
			taskEmitter := task420.emitter
			startTime := time.Now()
			defer func() {
				if task420.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task420.ran.Store(true)

			_558_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task420.job = sched.Enqueue(ctx, cff.Job{
			Run: task420.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task420)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:559:12
		task421 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task421.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _559_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   559,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task421.run = func(ctx context.Context) (err error) {
			taskEmitter := task421.emitter
			startTime := time.Now()
			defer func() {
				if task421.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task421.ran.Store(true)

			_559_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task421.job = sched.Enqueue(ctx, cff.Job{
			Run: task421.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task421)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:560:12
		task422 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task422.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _560_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   560,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task422.run = func(ctx context.Context) (err error) {
			taskEmitter := task422.emitter
			startTime := time.Now()
			defer func() {
				if task422.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task422.ran.Store(true)

			_560_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task422.job = sched.Enqueue(ctx, cff.Job{
			Run: task422.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task422)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:561:12
		task423 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task423.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _561_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   561,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task423.run = func(ctx context.Context) (err error) {
			taskEmitter := task423.emitter
			startTime := time.Now()
			defer func() {
				if task423.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task423.ran.Store(true)

			_561_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task423.job = sched.Enqueue(ctx, cff.Job{
			Run: task423.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task423)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:562:12
		task424 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task424.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _562_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   562,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task424.run = func(ctx context.Context) (err error) {
			taskEmitter := task424.emitter
			startTime := time.Now()
			defer func() {
				if task424.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task424.ran.Store(true)

			_562_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task424.job = sched.Enqueue(ctx, cff.Job{
			Run: task424.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task424)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:563:12
		task425 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task425.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _563_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   563,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task425.run = func(ctx context.Context) (err error) {
			taskEmitter := task425.emitter
			startTime := time.Now()
			defer func() {
				if task425.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task425.ran.Store(true)

			_563_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task425.job = sched.Enqueue(ctx, cff.Job{
			Run: task425.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task425)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:564:12
		task426 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task426.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _564_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   564,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task426.run = func(ctx context.Context) (err error) {
			taskEmitter := task426.emitter
			startTime := time.Now()
			defer func() {
				if task426.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task426.ran.Store(true)

			_564_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task426.job = sched.Enqueue(ctx, cff.Job{
			Run: task426.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task426)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:565:12
		task427 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task427.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _565_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   565,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task427.run = func(ctx context.Context) (err error) {
			taskEmitter := task427.emitter
			startTime := time.Now()
			defer func() {
				if task427.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task427.ran.Store(true)

			_565_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task427.job = sched.Enqueue(ctx, cff.Job{
			Run: task427.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task427)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:566:12
		task428 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task428.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _566_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   566,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task428.run = func(ctx context.Context) (err error) {
			taskEmitter := task428.emitter
			startTime := time.Now()
			defer func() {
				if task428.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task428.ran.Store(true)

			_566_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task428.job = sched.Enqueue(ctx, cff.Job{
			Run: task428.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task428)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:567:12
		task429 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task429.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _567_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   567,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task429.run = func(ctx context.Context) (err error) {
			taskEmitter := task429.emitter
			startTime := time.Now()
			defer func() {
				if task429.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task429.ran.Store(true)

			_567_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task429.job = sched.Enqueue(ctx, cff.Job{
			Run: task429.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task429)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:568:12
		task430 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task430.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _568_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   568,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task430.run = func(ctx context.Context) (err error) {
			taskEmitter := task430.emitter
			startTime := time.Now()
			defer func() {
				if task430.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task430.ran.Store(true)

			_568_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task430.job = sched.Enqueue(ctx, cff.Job{
			Run: task430.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task430)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:569:12
		task431 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task431.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _569_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   569,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task431.run = func(ctx context.Context) (err error) {
			taskEmitter := task431.emitter
			startTime := time.Now()
			defer func() {
				if task431.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task431.ran.Store(true)

			_569_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task431.job = sched.Enqueue(ctx, cff.Job{
			Run: task431.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task431)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:570:12
		task432 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task432.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _570_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   570,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task432.run = func(ctx context.Context) (err error) {
			taskEmitter := task432.emitter
			startTime := time.Now()
			defer func() {
				if task432.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task432.ran.Store(true)

			_570_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task432.job = sched.Enqueue(ctx, cff.Job{
			Run: task432.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task432)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:571:12
		task433 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task433.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _571_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   571,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task433.run = func(ctx context.Context) (err error) {
			taskEmitter := task433.emitter
			startTime := time.Now()
			defer func() {
				if task433.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task433.ran.Store(true)

			_571_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task433.job = sched.Enqueue(ctx, cff.Job{
			Run: task433.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task433)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:572:12
		task434 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task434.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _572_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   572,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task434.run = func(ctx context.Context) (err error) {
			taskEmitter := task434.emitter
			startTime := time.Now()
			defer func() {
				if task434.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task434.ran.Store(true)

			_572_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task434.job = sched.Enqueue(ctx, cff.Job{
			Run: task434.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task434)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:573:12
		task435 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task435.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _573_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   573,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task435.run = func(ctx context.Context) (err error) {
			taskEmitter := task435.emitter
			startTime := time.Now()
			defer func() {
				if task435.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task435.ran.Store(true)

			_573_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task435.job = sched.Enqueue(ctx, cff.Job{
			Run: task435.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task435)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:574:12
		task436 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task436.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _574_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   574,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task436.run = func(ctx context.Context) (err error) {
			taskEmitter := task436.emitter
			startTime := time.Now()
			defer func() {
				if task436.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task436.ran.Store(true)

			_574_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task436.job = sched.Enqueue(ctx, cff.Job{
			Run: task436.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task436)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:575:12
		task437 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task437.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _575_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   575,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task437.run = func(ctx context.Context) (err error) {
			taskEmitter := task437.emitter
			startTime := time.Now()
			defer func() {
				if task437.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task437.ran.Store(true)

			_575_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task437.job = sched.Enqueue(ctx, cff.Job{
			Run: task437.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task437)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:576:12
		task438 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task438.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _576_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   576,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task438.run = func(ctx context.Context) (err error) {
			taskEmitter := task438.emitter
			startTime := time.Now()
			defer func() {
				if task438.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task438.ran.Store(true)

			_576_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task438.job = sched.Enqueue(ctx, cff.Job{
			Run: task438.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task438)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:577:12
		task439 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task439.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _577_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   577,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task439.run = func(ctx context.Context) (err error) {
			taskEmitter := task439.emitter
			startTime := time.Now()
			defer func() {
				if task439.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task439.ran.Store(true)

			_577_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task439.job = sched.Enqueue(ctx, cff.Job{
			Run: task439.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task439)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:578:12
		task440 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task440.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _578_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   578,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task440.run = func(ctx context.Context) (err error) {
			taskEmitter := task440.emitter
			startTime := time.Now()
			defer func() {
				if task440.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task440.ran.Store(true)

			_578_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task440.job = sched.Enqueue(ctx, cff.Job{
			Run: task440.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task440)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:579:12
		task441 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task441.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _579_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   579,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task441.run = func(ctx context.Context) (err error) {
			taskEmitter := task441.emitter
			startTime := time.Now()
			defer func() {
				if task441.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task441.ran.Store(true)

			_579_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task441.job = sched.Enqueue(ctx, cff.Job{
			Run: task441.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task441)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:580:12
		task442 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task442.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _580_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   580,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task442.run = func(ctx context.Context) (err error) {
			taskEmitter := task442.emitter
			startTime := time.Now()
			defer func() {
				if task442.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task442.ran.Store(true)

			_580_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task442.job = sched.Enqueue(ctx, cff.Job{
			Run: task442.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task442)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:581:12
		task443 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task443.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _581_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   581,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task443.run = func(ctx context.Context) (err error) {
			taskEmitter := task443.emitter
			startTime := time.Now()
			defer func() {
				if task443.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task443.ran.Store(true)

			_581_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task443.job = sched.Enqueue(ctx, cff.Job{
			Run: task443.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task443)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:582:12
		task444 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task444.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _582_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   582,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task444.run = func(ctx context.Context) (err error) {
			taskEmitter := task444.emitter
			startTime := time.Now()
			defer func() {
				if task444.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task444.ran.Store(true)

			_582_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task444.job = sched.Enqueue(ctx, cff.Job{
			Run: task444.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task444)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:583:12
		task445 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task445.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _583_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   583,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task445.run = func(ctx context.Context) (err error) {
			taskEmitter := task445.emitter
			startTime := time.Now()
			defer func() {
				if task445.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task445.ran.Store(true)

			_583_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task445.job = sched.Enqueue(ctx, cff.Job{
			Run: task445.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task445)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:584:12
		task446 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task446.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _584_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   584,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task446.run = func(ctx context.Context) (err error) {
			taskEmitter := task446.emitter
			startTime := time.Now()
			defer func() {
				if task446.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task446.ran.Store(true)

			_584_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task446.job = sched.Enqueue(ctx, cff.Job{
			Run: task446.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task446)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:585:12
		task447 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task447.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _585_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   585,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task447.run = func(ctx context.Context) (err error) {
			taskEmitter := task447.emitter
			startTime := time.Now()
			defer func() {
				if task447.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task447.ran.Store(true)

			_585_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task447.job = sched.Enqueue(ctx, cff.Job{
			Run: task447.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task447)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:586:12
		task448 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task448.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _586_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   586,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task448.run = func(ctx context.Context) (err error) {
			taskEmitter := task448.emitter
			startTime := time.Now()
			defer func() {
				if task448.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task448.ran.Store(true)

			_586_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task448.job = sched.Enqueue(ctx, cff.Job{
			Run: task448.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task448)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:587:12
		task449 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task449.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _587_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   587,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task449.run = func(ctx context.Context) (err error) {
			taskEmitter := task449.emitter
			startTime := time.Now()
			defer func() {
				if task449.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task449.ran.Store(true)

			_587_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task449.job = sched.Enqueue(ctx, cff.Job{
			Run: task449.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task449)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:588:12
		task450 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task450.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _588_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   588,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task450.run = func(ctx context.Context) (err error) {
			taskEmitter := task450.emitter
			startTime := time.Now()
			defer func() {
				if task450.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task450.ran.Store(true)

			_588_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task450.job = sched.Enqueue(ctx, cff.Job{
			Run: task450.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task450)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:589:12
		task451 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task451.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _589_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   589,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task451.run = func(ctx context.Context) (err error) {
			taskEmitter := task451.emitter
			startTime := time.Now()
			defer func() {
				if task451.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task451.ran.Store(true)

			_589_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task451.job = sched.Enqueue(ctx, cff.Job{
			Run: task451.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task451)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:590:12
		task452 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task452.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _590_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   590,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task452.run = func(ctx context.Context) (err error) {
			taskEmitter := task452.emitter
			startTime := time.Now()
			defer func() {
				if task452.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task452.ran.Store(true)

			_590_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task452.job = sched.Enqueue(ctx, cff.Job{
			Run: task452.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task452)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:591:12
		task453 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task453.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _591_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   591,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task453.run = func(ctx context.Context) (err error) {
			taskEmitter := task453.emitter
			startTime := time.Now()
			defer func() {
				if task453.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task453.ran.Store(true)

			_591_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task453.job = sched.Enqueue(ctx, cff.Job{
			Run: task453.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task453)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:592:12
		task454 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task454.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _592_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   592,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task454.run = func(ctx context.Context) (err error) {
			taskEmitter := task454.emitter
			startTime := time.Now()
			defer func() {
				if task454.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task454.ran.Store(true)

			_592_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task454.job = sched.Enqueue(ctx, cff.Job{
			Run: task454.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task454)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:593:12
		task455 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task455.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _593_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   593,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task455.run = func(ctx context.Context) (err error) {
			taskEmitter := task455.emitter
			startTime := time.Now()
			defer func() {
				if task455.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task455.ran.Store(true)

			_593_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task455.job = sched.Enqueue(ctx, cff.Job{
			Run: task455.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task455)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:594:12
		task456 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task456.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _594_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   594,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task456.run = func(ctx context.Context) (err error) {
			taskEmitter := task456.emitter
			startTime := time.Now()
			defer func() {
				if task456.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task456.ran.Store(true)

			_594_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task456.job = sched.Enqueue(ctx, cff.Job{
			Run: task456.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task456)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:595:12
		task457 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task457.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _595_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   595,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task457.run = func(ctx context.Context) (err error) {
			taskEmitter := task457.emitter
			startTime := time.Now()
			defer func() {
				if task457.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task457.ran.Store(true)

			_595_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task457.job = sched.Enqueue(ctx, cff.Job{
			Run: task457.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task457)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:596:12
		task458 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task458.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _596_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   596,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task458.run = func(ctx context.Context) (err error) {
			taskEmitter := task458.emitter
			startTime := time.Now()
			defer func() {
				if task458.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task458.ran.Store(true)

			_596_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task458.job = sched.Enqueue(ctx, cff.Job{
			Run: task458.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task458)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:597:12
		task459 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task459.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _597_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   597,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task459.run = func(ctx context.Context) (err error) {
			taskEmitter := task459.emitter
			startTime := time.Now()
			defer func() {
				if task459.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task459.ran.Store(true)

			_597_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task459.job = sched.Enqueue(ctx, cff.Job{
			Run: task459.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task459)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:598:12
		task460 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task460.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _598_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   598,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task460.run = func(ctx context.Context) (err error) {
			taskEmitter := task460.emitter
			startTime := time.Now()
			defer func() {
				if task460.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task460.ran.Store(true)

			_598_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task460.job = sched.Enqueue(ctx, cff.Job{
			Run: task460.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task460)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:599:12
		task461 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task461.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _599_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   599,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task461.run = func(ctx context.Context) (err error) {
			taskEmitter := task461.emitter
			startTime := time.Now()
			defer func() {
				if task461.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task461.ran.Store(true)

			_599_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task461.job = sched.Enqueue(ctx, cff.Job{
			Run: task461.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task461)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:600:12
		task462 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task462.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _600_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   600,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task462.run = func(ctx context.Context) (err error) {
			taskEmitter := task462.emitter
			startTime := time.Now()
			defer func() {
				if task462.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task462.ran.Store(true)

			_600_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task462.job = sched.Enqueue(ctx, cff.Job{
			Run: task462.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task462)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:601:12
		task463 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task463.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _601_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   601,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task463.run = func(ctx context.Context) (err error) {
			taskEmitter := task463.emitter
			startTime := time.Now()
			defer func() {
				if task463.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task463.ran.Store(true)

			_601_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task463.job = sched.Enqueue(ctx, cff.Job{
			Run: task463.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task463)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:602:12
		task464 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task464.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _602_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   602,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task464.run = func(ctx context.Context) (err error) {
			taskEmitter := task464.emitter
			startTime := time.Now()
			defer func() {
				if task464.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task464.ran.Store(true)

			_602_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task464.job = sched.Enqueue(ctx, cff.Job{
			Run: task464.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task464)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:603:12
		task465 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task465.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _603_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   603,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task465.run = func(ctx context.Context) (err error) {
			taskEmitter := task465.emitter
			startTime := time.Now()
			defer func() {
				if task465.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task465.ran.Store(true)

			_603_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task465.job = sched.Enqueue(ctx, cff.Job{
			Run: task465.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task465)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:604:12
		task466 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task466.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _604_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   604,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task466.run = func(ctx context.Context) (err error) {
			taskEmitter := task466.emitter
			startTime := time.Now()
			defer func() {
				if task466.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task466.ran.Store(true)

			_604_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task466.job = sched.Enqueue(ctx, cff.Job{
			Run: task466.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task466)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:605:12
		task467 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task467.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _605_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   605,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task467.run = func(ctx context.Context) (err error) {
			taskEmitter := task467.emitter
			startTime := time.Now()
			defer func() {
				if task467.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task467.ran.Store(true)

			_605_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task467.job = sched.Enqueue(ctx, cff.Job{
			Run: task467.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task467)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:606:12
		task468 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task468.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _606_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   606,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task468.run = func(ctx context.Context) (err error) {
			taskEmitter := task468.emitter
			startTime := time.Now()
			defer func() {
				if task468.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task468.ran.Store(true)

			_606_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task468.job = sched.Enqueue(ctx, cff.Job{
			Run: task468.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task468)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:607:12
		task469 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task469.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _607_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   607,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task469.run = func(ctx context.Context) (err error) {
			taskEmitter := task469.emitter
			startTime := time.Now()
			defer func() {
				if task469.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task469.ran.Store(true)

			_607_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task469.job = sched.Enqueue(ctx, cff.Job{
			Run: task469.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task469)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:608:12
		task470 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task470.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _608_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   608,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task470.run = func(ctx context.Context) (err error) {
			taskEmitter := task470.emitter
			startTime := time.Now()
			defer func() {
				if task470.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task470.ran.Store(true)

			_608_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task470.job = sched.Enqueue(ctx, cff.Job{
			Run: task470.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task470)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:609:12
		task471 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task471.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _609_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   609,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task471.run = func(ctx context.Context) (err error) {
			taskEmitter := task471.emitter
			startTime := time.Now()
			defer func() {
				if task471.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task471.ran.Store(true)

			_609_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task471.job = sched.Enqueue(ctx, cff.Job{
			Run: task471.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task471)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:610:12
		task472 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task472.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _610_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   610,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task472.run = func(ctx context.Context) (err error) {
			taskEmitter := task472.emitter
			startTime := time.Now()
			defer func() {
				if task472.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task472.ran.Store(true)

			_610_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task472.job = sched.Enqueue(ctx, cff.Job{
			Run: task472.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task472)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:611:12
		task473 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task473.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _611_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   611,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task473.run = func(ctx context.Context) (err error) {
			taskEmitter := task473.emitter
			startTime := time.Now()
			defer func() {
				if task473.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task473.ran.Store(true)

			_611_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task473.job = sched.Enqueue(ctx, cff.Job{
			Run: task473.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task473)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:612:12
		task474 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task474.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _612_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   612,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task474.run = func(ctx context.Context) (err error) {
			taskEmitter := task474.emitter
			startTime := time.Now()
			defer func() {
				if task474.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task474.ran.Store(true)

			_612_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task474.job = sched.Enqueue(ctx, cff.Job{
			Run: task474.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task474)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:613:12
		task475 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task475.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _613_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   613,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task475.run = func(ctx context.Context) (err error) {
			taskEmitter := task475.emitter
			startTime := time.Now()
			defer func() {
				if task475.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task475.ran.Store(true)

			_613_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task475.job = sched.Enqueue(ctx, cff.Job{
			Run: task475.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task475)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:614:12
		task476 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task476.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _614_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   614,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task476.run = func(ctx context.Context) (err error) {
			taskEmitter := task476.emitter
			startTime := time.Now()
			defer func() {
				if task476.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task476.ran.Store(true)

			_614_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task476.job = sched.Enqueue(ctx, cff.Job{
			Run: task476.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task476)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:615:12
		task477 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task477.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _615_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   615,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task477.run = func(ctx context.Context) (err error) {
			taskEmitter := task477.emitter
			startTime := time.Now()
			defer func() {
				if task477.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task477.ran.Store(true)

			_615_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task477.job = sched.Enqueue(ctx, cff.Job{
			Run: task477.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task477)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:616:12
		task478 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task478.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _616_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   616,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task478.run = func(ctx context.Context) (err error) {
			taskEmitter := task478.emitter
			startTime := time.Now()
			defer func() {
				if task478.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task478.ran.Store(true)

			_616_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task478.job = sched.Enqueue(ctx, cff.Job{
			Run: task478.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task478)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:617:12
		task479 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task479.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _617_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   617,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task479.run = func(ctx context.Context) (err error) {
			taskEmitter := task479.emitter
			startTime := time.Now()
			defer func() {
				if task479.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task479.ran.Store(true)

			_617_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task479.job = sched.Enqueue(ctx, cff.Job{
			Run: task479.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task479)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:618:12
		task480 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task480.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _618_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   618,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task480.run = func(ctx context.Context) (err error) {
			taskEmitter := task480.emitter
			startTime := time.Now()
			defer func() {
				if task480.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task480.ran.Store(true)

			_618_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task480.job = sched.Enqueue(ctx, cff.Job{
			Run: task480.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task480)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:619:12
		task481 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task481.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _619_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   619,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task481.run = func(ctx context.Context) (err error) {
			taskEmitter := task481.emitter
			startTime := time.Now()
			defer func() {
				if task481.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task481.ran.Store(true)

			_619_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task481.job = sched.Enqueue(ctx, cff.Job{
			Run: task481.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task481)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:620:12
		task482 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task482.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _620_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   620,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task482.run = func(ctx context.Context) (err error) {
			taskEmitter := task482.emitter
			startTime := time.Now()
			defer func() {
				if task482.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task482.ran.Store(true)

			_620_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task482.job = sched.Enqueue(ctx, cff.Job{
			Run: task482.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task482)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:621:12
		task483 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task483.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _621_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   621,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task483.run = func(ctx context.Context) (err error) {
			taskEmitter := task483.emitter
			startTime := time.Now()
			defer func() {
				if task483.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task483.ran.Store(true)

			_621_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task483.job = sched.Enqueue(ctx, cff.Job{
			Run: task483.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task483)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:622:12
		task484 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task484.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _622_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   622,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task484.run = func(ctx context.Context) (err error) {
			taskEmitter := task484.emitter
			startTime := time.Now()
			defer func() {
				if task484.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task484.ran.Store(true)

			_622_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task484.job = sched.Enqueue(ctx, cff.Job{
			Run: task484.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task484)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:623:12
		task485 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task485.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _623_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   623,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task485.run = func(ctx context.Context) (err error) {
			taskEmitter := task485.emitter
			startTime := time.Now()
			defer func() {
				if task485.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task485.ran.Store(true)

			_623_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task485.job = sched.Enqueue(ctx, cff.Job{
			Run: task485.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task485)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:624:12
		task486 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task486.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _624_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   624,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task486.run = func(ctx context.Context) (err error) {
			taskEmitter := task486.emitter
			startTime := time.Now()
			defer func() {
				if task486.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task486.ran.Store(true)

			_624_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task486.job = sched.Enqueue(ctx, cff.Job{
			Run: task486.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task486)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:625:12
		task487 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task487.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _625_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   625,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task487.run = func(ctx context.Context) (err error) {
			taskEmitter := task487.emitter
			startTime := time.Now()
			defer func() {
				if task487.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task487.ran.Store(true)

			_625_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task487.job = sched.Enqueue(ctx, cff.Job{
			Run: task487.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task487)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:626:12
		task488 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task488.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _626_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   626,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task488.run = func(ctx context.Context) (err error) {
			taskEmitter := task488.emitter
			startTime := time.Now()
			defer func() {
				if task488.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task488.ran.Store(true)

			_626_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task488.job = sched.Enqueue(ctx, cff.Job{
			Run: task488.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task488)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:627:12
		task489 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task489.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _627_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   627,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task489.run = func(ctx context.Context) (err error) {
			taskEmitter := task489.emitter
			startTime := time.Now()
			defer func() {
				if task489.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task489.ran.Store(true)

			_627_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task489.job = sched.Enqueue(ctx, cff.Job{
			Run: task489.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task489)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:628:12
		task490 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task490.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _628_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   628,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task490.run = func(ctx context.Context) (err error) {
			taskEmitter := task490.emitter
			startTime := time.Now()
			defer func() {
				if task490.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task490.ran.Store(true)

			_628_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task490.job = sched.Enqueue(ctx, cff.Job{
			Run: task490.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task490)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:629:12
		task491 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task491.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _629_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   629,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task491.run = func(ctx context.Context) (err error) {
			taskEmitter := task491.emitter
			startTime := time.Now()
			defer func() {
				if task491.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task491.ran.Store(true)

			_629_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task491.job = sched.Enqueue(ctx, cff.Job{
			Run: task491.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task491)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:630:12
		task492 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task492.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _630_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   630,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task492.run = func(ctx context.Context) (err error) {
			taskEmitter := task492.emitter
			startTime := time.Now()
			defer func() {
				if task492.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task492.ran.Store(true)

			_630_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task492.job = sched.Enqueue(ctx, cff.Job{
			Run: task492.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task492)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:631:12
		task493 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task493.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _631_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   631,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task493.run = func(ctx context.Context) (err error) {
			taskEmitter := task493.emitter
			startTime := time.Now()
			defer func() {
				if task493.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task493.ran.Store(true)

			_631_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task493.job = sched.Enqueue(ctx, cff.Job{
			Run: task493.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task493)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:632:12
		task494 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task494.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _632_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   632,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task494.run = func(ctx context.Context) (err error) {
			taskEmitter := task494.emitter
			startTime := time.Now()
			defer func() {
				if task494.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task494.ran.Store(true)

			_632_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task494.job = sched.Enqueue(ctx, cff.Job{
			Run: task494.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task494)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:633:12
		task495 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task495.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _633_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   633,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task495.run = func(ctx context.Context) (err error) {
			taskEmitter := task495.emitter
			startTime := time.Now()
			defer func() {
				if task495.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task495.ran.Store(true)

			_633_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task495.job = sched.Enqueue(ctx, cff.Job{
			Run: task495.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task495)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:634:12
		task496 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task496.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _634_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   634,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task496.run = func(ctx context.Context) (err error) {
			taskEmitter := task496.emitter
			startTime := time.Now()
			defer func() {
				if task496.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task496.ran.Store(true)

			_634_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task496.job = sched.Enqueue(ctx, cff.Job{
			Run: task496.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task496)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:635:12
		task497 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task497.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _635_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   635,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task497.run = func(ctx context.Context) (err error) {
			taskEmitter := task497.emitter
			startTime := time.Now()
			defer func() {
				if task497.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task497.ran.Store(true)

			_635_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task497.job = sched.Enqueue(ctx, cff.Job{
			Run: task497.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task497)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:636:12
		task498 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task498.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _636_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   636,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task498.run = func(ctx context.Context) (err error) {
			taskEmitter := task498.emitter
			startTime := time.Now()
			defer func() {
				if task498.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task498.ran.Store(true)

			_636_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task498.job = sched.Enqueue(ctx, cff.Job{
			Run: task498.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task498)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:637:12
		task499 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task499.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _637_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   637,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task499.run = func(ctx context.Context) (err error) {
			taskEmitter := task499.emitter
			startTime := time.Now()
			defer func() {
				if task499.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task499.ran.Store(true)

			_637_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task499.job = sched.Enqueue(ctx, cff.Job{
			Run: task499.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task499)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:638:12
		task500 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task500.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _638_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   638,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task500.run = func(ctx context.Context) (err error) {
			taskEmitter := task500.emitter
			startTime := time.Now()
			defer func() {
				if task500.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task500.ran.Store(true)

			_638_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task500.job = sched.Enqueue(ctx, cff.Job{
			Run: task500.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task500)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:639:12
		task501 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task501.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _639_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   639,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task501.run = func(ctx context.Context) (err error) {
			taskEmitter := task501.emitter
			startTime := time.Now()
			defer func() {
				if task501.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task501.ran.Store(true)

			_639_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task501.job = sched.Enqueue(ctx, cff.Job{
			Run: task501.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task501)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:640:12
		task502 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task502.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _640_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   640,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task502.run = func(ctx context.Context) (err error) {
			taskEmitter := task502.emitter
			startTime := time.Now()
			defer func() {
				if task502.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task502.ran.Store(true)

			_640_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task502.job = sched.Enqueue(ctx, cff.Job{
			Run: task502.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task502)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:641:12
		task503 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task503.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _641_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   641,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task503.run = func(ctx context.Context) (err error) {
			taskEmitter := task503.emitter
			startTime := time.Now()
			defer func() {
				if task503.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task503.ran.Store(true)

			_641_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task503.job = sched.Enqueue(ctx, cff.Job{
			Run: task503.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task503)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:642:12
		task504 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task504.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _642_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   642,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task504.run = func(ctx context.Context) (err error) {
			taskEmitter := task504.emitter
			startTime := time.Now()
			defer func() {
				if task504.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task504.ran.Store(true)

			_642_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task504.job = sched.Enqueue(ctx, cff.Job{
			Run: task504.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task504)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:643:12
		task505 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task505.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _643_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   643,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task505.run = func(ctx context.Context) (err error) {
			taskEmitter := task505.emitter
			startTime := time.Now()
			defer func() {
				if task505.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task505.ran.Store(true)

			_643_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task505.job = sched.Enqueue(ctx, cff.Job{
			Run: task505.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task505)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:644:12
		task506 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task506.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _644_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   644,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task506.run = func(ctx context.Context) (err error) {
			taskEmitter := task506.emitter
			startTime := time.Now()
			defer func() {
				if task506.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task506.ran.Store(true)

			_644_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task506.job = sched.Enqueue(ctx, cff.Job{
			Run: task506.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task506)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:645:12
		task507 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task507.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _645_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   645,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task507.run = func(ctx context.Context) (err error) {
			taskEmitter := task507.emitter
			startTime := time.Now()
			defer func() {
				if task507.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task507.ran.Store(true)

			_645_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task507.job = sched.Enqueue(ctx, cff.Job{
			Run: task507.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task507)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:646:12
		task508 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task508.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _646_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   646,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task508.run = func(ctx context.Context) (err error) {
			taskEmitter := task508.emitter
			startTime := time.Now()
			defer func() {
				if task508.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task508.ran.Store(true)

			_646_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task508.job = sched.Enqueue(ctx, cff.Job{
			Run: task508.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task508)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:647:12
		task509 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task509.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _647_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   647,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task509.run = func(ctx context.Context) (err error) {
			taskEmitter := task509.emitter
			startTime := time.Now()
			defer func() {
				if task509.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task509.ran.Store(true)

			_647_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task509.job = sched.Enqueue(ctx, cff.Job{
			Run: task509.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task509)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:648:12
		task510 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task510.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _648_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   648,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task510.run = func(ctx context.Context) (err error) {
			taskEmitter := task510.emitter
			startTime := time.Now()
			defer func() {
				if task510.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task510.ran.Store(true)

			_648_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task510.job = sched.Enqueue(ctx, cff.Job{
			Run: task510.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task510)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:649:12
		task511 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task511.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _649_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   649,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task511.run = func(ctx context.Context) (err error) {
			taskEmitter := task511.emitter
			startTime := time.Now()
			defer func() {
				if task511.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task511.ran.Store(true)

			_649_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task511.job = sched.Enqueue(ctx, cff.Job{
			Run: task511.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task511)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:650:12
		task512 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task512.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _650_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   650,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task512.run = func(ctx context.Context) (err error) {
			taskEmitter := task512.emitter
			startTime := time.Now()
			defer func() {
				if task512.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task512.ran.Store(true)

			_650_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task512.job = sched.Enqueue(ctx, cff.Job{
			Run: task512.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task512)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:651:12
		task513 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task513.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _651_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   651,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task513.run = func(ctx context.Context) (err error) {
			taskEmitter := task513.emitter
			startTime := time.Now()
			defer func() {
				if task513.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task513.ran.Store(true)

			_651_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task513.job = sched.Enqueue(ctx, cff.Job{
			Run: task513.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task513)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:652:12
		task514 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task514.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _652_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   652,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task514.run = func(ctx context.Context) (err error) {
			taskEmitter := task514.emitter
			startTime := time.Now()
			defer func() {
				if task514.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task514.ran.Store(true)

			_652_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task514.job = sched.Enqueue(ctx, cff.Job{
			Run: task514.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task514)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:653:12
		task515 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task515.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _653_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   653,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task515.run = func(ctx context.Context) (err error) {
			taskEmitter := task515.emitter
			startTime := time.Now()
			defer func() {
				if task515.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task515.ran.Store(true)

			_653_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task515.job = sched.Enqueue(ctx, cff.Job{
			Run: task515.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task515)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:654:12
		task516 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task516.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _654_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   654,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task516.run = func(ctx context.Context) (err error) {
			taskEmitter := task516.emitter
			startTime := time.Now()
			defer func() {
				if task516.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task516.ran.Store(true)

			_654_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task516.job = sched.Enqueue(ctx, cff.Job{
			Run: task516.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task516)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:655:12
		task517 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task517.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _655_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   655,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task517.run = func(ctx context.Context) (err error) {
			taskEmitter := task517.emitter
			startTime := time.Now()
			defer func() {
				if task517.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task517.ran.Store(true)

			_655_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task517.job = sched.Enqueue(ctx, cff.Job{
			Run: task517.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task517)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:656:12
		task518 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task518.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _656_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   656,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task518.run = func(ctx context.Context) (err error) {
			taskEmitter := task518.emitter
			startTime := time.Now()
			defer func() {
				if task518.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task518.ran.Store(true)

			_656_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task518.job = sched.Enqueue(ctx, cff.Job{
			Run: task518.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task518)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:657:12
		task519 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task519.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _657_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   657,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task519.run = func(ctx context.Context) (err error) {
			taskEmitter := task519.emitter
			startTime := time.Now()
			defer func() {
				if task519.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task519.ran.Store(true)

			_657_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task519.job = sched.Enqueue(ctx, cff.Job{
			Run: task519.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task519)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:658:12
		task520 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task520.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _658_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   658,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task520.run = func(ctx context.Context) (err error) {
			taskEmitter := task520.emitter
			startTime := time.Now()
			defer func() {
				if task520.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task520.ran.Store(true)

			_658_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task520.job = sched.Enqueue(ctx, cff.Job{
			Run: task520.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task520)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:659:12
		task521 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task521.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _659_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   659,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task521.run = func(ctx context.Context) (err error) {
			taskEmitter := task521.emitter
			startTime := time.Now()
			defer func() {
				if task521.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task521.ran.Store(true)

			_659_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task521.job = sched.Enqueue(ctx, cff.Job{
			Run: task521.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task521)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:660:12
		task522 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task522.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _660_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   660,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task522.run = func(ctx context.Context) (err error) {
			taskEmitter := task522.emitter
			startTime := time.Now()
			defer func() {
				if task522.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task522.ran.Store(true)

			_660_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task522.job = sched.Enqueue(ctx, cff.Job{
			Run: task522.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task522)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:661:12
		task523 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task523.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _661_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   661,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task523.run = func(ctx context.Context) (err error) {
			taskEmitter := task523.emitter
			startTime := time.Now()
			defer func() {
				if task523.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task523.ran.Store(true)

			_661_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task523.job = sched.Enqueue(ctx, cff.Job{
			Run: task523.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task523)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:662:12
		task524 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task524.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _662_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   662,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task524.run = func(ctx context.Context) (err error) {
			taskEmitter := task524.emitter
			startTime := time.Now()
			defer func() {
				if task524.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task524.ran.Store(true)

			_662_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task524.job = sched.Enqueue(ctx, cff.Job{
			Run: task524.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task524)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:663:12
		task525 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task525.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _663_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   663,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task525.run = func(ctx context.Context) (err error) {
			taskEmitter := task525.emitter
			startTime := time.Now()
			defer func() {
				if task525.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task525.ran.Store(true)

			_663_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task525.job = sched.Enqueue(ctx, cff.Job{
			Run: task525.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task525)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:664:12
		task526 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task526.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _664_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   664,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task526.run = func(ctx context.Context) (err error) {
			taskEmitter := task526.emitter
			startTime := time.Now()
			defer func() {
				if task526.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task526.ran.Store(true)

			_664_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task526.job = sched.Enqueue(ctx, cff.Job{
			Run: task526.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task526)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:665:12
		task527 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task527.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _665_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   665,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task527.run = func(ctx context.Context) (err error) {
			taskEmitter := task527.emitter
			startTime := time.Now()
			defer func() {
				if task527.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task527.ran.Store(true)

			_665_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task527.job = sched.Enqueue(ctx, cff.Job{
			Run: task527.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task527)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:666:12
		task528 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task528.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _666_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   666,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task528.run = func(ctx context.Context) (err error) {
			taskEmitter := task528.emitter
			startTime := time.Now()
			defer func() {
				if task528.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task528.ran.Store(true)

			_666_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task528.job = sched.Enqueue(ctx, cff.Job{
			Run: task528.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task528)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:667:12
		task529 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task529.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _667_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   667,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task529.run = func(ctx context.Context) (err error) {
			taskEmitter := task529.emitter
			startTime := time.Now()
			defer func() {
				if task529.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task529.ran.Store(true)

			_667_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task529.job = sched.Enqueue(ctx, cff.Job{
			Run: task529.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task529)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:668:12
		task530 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task530.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _668_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   668,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task530.run = func(ctx context.Context) (err error) {
			taskEmitter := task530.emitter
			startTime := time.Now()
			defer func() {
				if task530.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task530.ran.Store(true)

			_668_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task530.job = sched.Enqueue(ctx, cff.Job{
			Run: task530.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task530)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:669:12
		task531 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task531.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _669_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   669,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task531.run = func(ctx context.Context) (err error) {
			taskEmitter := task531.emitter
			startTime := time.Now()
			defer func() {
				if task531.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task531.ran.Store(true)

			_669_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task531.job = sched.Enqueue(ctx, cff.Job{
			Run: task531.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task531)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:670:12
		task532 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task532.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _670_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   670,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task532.run = func(ctx context.Context) (err error) {
			taskEmitter := task532.emitter
			startTime := time.Now()
			defer func() {
				if task532.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task532.ran.Store(true)

			_670_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task532.job = sched.Enqueue(ctx, cff.Job{
			Run: task532.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task532)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:671:12
		task533 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task533.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _671_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   671,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task533.run = func(ctx context.Context) (err error) {
			taskEmitter := task533.emitter
			startTime := time.Now()
			defer func() {
				if task533.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task533.ran.Store(true)

			_671_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task533.job = sched.Enqueue(ctx, cff.Job{
			Run: task533.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task533)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:672:12
		task534 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task534.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _672_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   672,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task534.run = func(ctx context.Context) (err error) {
			taskEmitter := task534.emitter
			startTime := time.Now()
			defer func() {
				if task534.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task534.ran.Store(true)

			_672_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task534.job = sched.Enqueue(ctx, cff.Job{
			Run: task534.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task534)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:673:12
		task535 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task535.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _673_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   673,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task535.run = func(ctx context.Context) (err error) {
			taskEmitter := task535.emitter
			startTime := time.Now()
			defer func() {
				if task535.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task535.ran.Store(true)

			_673_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task535.job = sched.Enqueue(ctx, cff.Job{
			Run: task535.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task535)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:674:12
		task536 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task536.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _674_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   674,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task536.run = func(ctx context.Context) (err error) {
			taskEmitter := task536.emitter
			startTime := time.Now()
			defer func() {
				if task536.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task536.ran.Store(true)

			_674_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task536.job = sched.Enqueue(ctx, cff.Job{
			Run: task536.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task536)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:675:12
		task537 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task537.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _675_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   675,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task537.run = func(ctx context.Context) (err error) {
			taskEmitter := task537.emitter
			startTime := time.Now()
			defer func() {
				if task537.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task537.ran.Store(true)

			_675_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task537.job = sched.Enqueue(ctx, cff.Job{
			Run: task537.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task537)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:676:12
		task538 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task538.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _676_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   676,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task538.run = func(ctx context.Context) (err error) {
			taskEmitter := task538.emitter
			startTime := time.Now()
			defer func() {
				if task538.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task538.ran.Store(true)

			_676_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task538.job = sched.Enqueue(ctx, cff.Job{
			Run: task538.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task538)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:677:12
		task539 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task539.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _677_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   677,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task539.run = func(ctx context.Context) (err error) {
			taskEmitter := task539.emitter
			startTime := time.Now()
			defer func() {
				if task539.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task539.ran.Store(true)

			_677_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task539.job = sched.Enqueue(ctx, cff.Job{
			Run: task539.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task539)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:678:12
		task540 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task540.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _678_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   678,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task540.run = func(ctx context.Context) (err error) {
			taskEmitter := task540.emitter
			startTime := time.Now()
			defer func() {
				if task540.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task540.ran.Store(true)

			_678_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task540.job = sched.Enqueue(ctx, cff.Job{
			Run: task540.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task540)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:679:12
		task541 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task541.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _679_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   679,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task541.run = func(ctx context.Context) (err error) {
			taskEmitter := task541.emitter
			startTime := time.Now()
			defer func() {
				if task541.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task541.ran.Store(true)

			_679_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task541.job = sched.Enqueue(ctx, cff.Job{
			Run: task541.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task541)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:680:12
		task542 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task542.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _680_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   680,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task542.run = func(ctx context.Context) (err error) {
			taskEmitter := task542.emitter
			startTime := time.Now()
			defer func() {
				if task542.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task542.ran.Store(true)

			_680_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task542.job = sched.Enqueue(ctx, cff.Job{
			Run: task542.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task542)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:681:12
		task543 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task543.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _681_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   681,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task543.run = func(ctx context.Context) (err error) {
			taskEmitter := task543.emitter
			startTime := time.Now()
			defer func() {
				if task543.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task543.ran.Store(true)

			_681_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task543.job = sched.Enqueue(ctx, cff.Job{
			Run: task543.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task543)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:682:12
		task544 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task544.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _682_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   682,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task544.run = func(ctx context.Context) (err error) {
			taskEmitter := task544.emitter
			startTime := time.Now()
			defer func() {
				if task544.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task544.ran.Store(true)

			_682_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task544.job = sched.Enqueue(ctx, cff.Job{
			Run: task544.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task544)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:683:12
		task545 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task545.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _683_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   683,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task545.run = func(ctx context.Context) (err error) {
			taskEmitter := task545.emitter
			startTime := time.Now()
			defer func() {
				if task545.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task545.ran.Store(true)

			_683_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task545.job = sched.Enqueue(ctx, cff.Job{
			Run: task545.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task545)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:684:12
		task546 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task546.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _684_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   684,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task546.run = func(ctx context.Context) (err error) {
			taskEmitter := task546.emitter
			startTime := time.Now()
			defer func() {
				if task546.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task546.ran.Store(true)

			_684_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task546.job = sched.Enqueue(ctx, cff.Job{
			Run: task546.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task546)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:685:12
		task547 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task547.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _685_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   685,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task547.run = func(ctx context.Context) (err error) {
			taskEmitter := task547.emitter
			startTime := time.Now()
			defer func() {
				if task547.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task547.ran.Store(true)

			_685_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task547.job = sched.Enqueue(ctx, cff.Job{
			Run: task547.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task547)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:686:12
		task548 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task548.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _686_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   686,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task548.run = func(ctx context.Context) (err error) {
			taskEmitter := task548.emitter
			startTime := time.Now()
			defer func() {
				if task548.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task548.ran.Store(true)

			_686_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task548.job = sched.Enqueue(ctx, cff.Job{
			Run: task548.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task548)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:687:12
		task549 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task549.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _687_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   687,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task549.run = func(ctx context.Context) (err error) {
			taskEmitter := task549.emitter
			startTime := time.Now()
			defer func() {
				if task549.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task549.ran.Store(true)

			_687_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task549.job = sched.Enqueue(ctx, cff.Job{
			Run: task549.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task549)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:688:12
		task550 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task550.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _688_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   688,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task550.run = func(ctx context.Context) (err error) {
			taskEmitter := task550.emitter
			startTime := time.Now()
			defer func() {
				if task550.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task550.ran.Store(true)

			_688_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task550.job = sched.Enqueue(ctx, cff.Job{
			Run: task550.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task550)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:689:12
		task551 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task551.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _689_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   689,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task551.run = func(ctx context.Context) (err error) {
			taskEmitter := task551.emitter
			startTime := time.Now()
			defer func() {
				if task551.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task551.ran.Store(true)

			_689_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task551.job = sched.Enqueue(ctx, cff.Job{
			Run: task551.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task551)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:690:12
		task552 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task552.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _690_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   690,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task552.run = func(ctx context.Context) (err error) {
			taskEmitter := task552.emitter
			startTime := time.Now()
			defer func() {
				if task552.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task552.ran.Store(true)

			_690_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task552.job = sched.Enqueue(ctx, cff.Job{
			Run: task552.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task552)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:691:12
		task553 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task553.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _691_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   691,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task553.run = func(ctx context.Context) (err error) {
			taskEmitter := task553.emitter
			startTime := time.Now()
			defer func() {
				if task553.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task553.ran.Store(true)

			_691_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task553.job = sched.Enqueue(ctx, cff.Job{
			Run: task553.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task553)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:692:12
		task554 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task554.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _692_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   692,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task554.run = func(ctx context.Context) (err error) {
			taskEmitter := task554.emitter
			startTime := time.Now()
			defer func() {
				if task554.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task554.ran.Store(true)

			_692_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task554.job = sched.Enqueue(ctx, cff.Job{
			Run: task554.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task554)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:693:12
		task555 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task555.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _693_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   693,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task555.run = func(ctx context.Context) (err error) {
			taskEmitter := task555.emitter
			startTime := time.Now()
			defer func() {
				if task555.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task555.ran.Store(true)

			_693_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task555.job = sched.Enqueue(ctx, cff.Job{
			Run: task555.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task555)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:694:12
		task556 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task556.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _694_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   694,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task556.run = func(ctx context.Context) (err error) {
			taskEmitter := task556.emitter
			startTime := time.Now()
			defer func() {
				if task556.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task556.ran.Store(true)

			_694_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task556.job = sched.Enqueue(ctx, cff.Job{
			Run: task556.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task556)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:695:12
		task557 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task557.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _695_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   695,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task557.run = func(ctx context.Context) (err error) {
			taskEmitter := task557.emitter
			startTime := time.Now()
			defer func() {
				if task557.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task557.ran.Store(true)

			_695_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task557.job = sched.Enqueue(ctx, cff.Job{
			Run: task557.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task557)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:696:12
		task558 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task558.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _696_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   696,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task558.run = func(ctx context.Context) (err error) {
			taskEmitter := task558.emitter
			startTime := time.Now()
			defer func() {
				if task558.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task558.ran.Store(true)

			_696_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task558.job = sched.Enqueue(ctx, cff.Job{
			Run: task558.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task558)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:697:12
		task559 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task559.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _697_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   697,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task559.run = func(ctx context.Context) (err error) {
			taskEmitter := task559.emitter
			startTime := time.Now()
			defer func() {
				if task559.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task559.ran.Store(true)

			_697_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task559.job = sched.Enqueue(ctx, cff.Job{
			Run: task559.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task559)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:698:12
		task560 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task560.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _698_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   698,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task560.run = func(ctx context.Context) (err error) {
			taskEmitter := task560.emitter
			startTime := time.Now()
			defer func() {
				if task560.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task560.ran.Store(true)

			_698_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task560.job = sched.Enqueue(ctx, cff.Job{
			Run: task560.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task560)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:699:12
		task561 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task561.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _699_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   699,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task561.run = func(ctx context.Context) (err error) {
			taskEmitter := task561.emitter
			startTime := time.Now()
			defer func() {
				if task561.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task561.ran.Store(true)

			_699_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task561.job = sched.Enqueue(ctx, cff.Job{
			Run: task561.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task561)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:700:12
		task562 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task562.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _700_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   700,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task562.run = func(ctx context.Context) (err error) {
			taskEmitter := task562.emitter
			startTime := time.Now()
			defer func() {
				if task562.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task562.ran.Store(true)

			_700_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task562.job = sched.Enqueue(ctx, cff.Job{
			Run: task562.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task562)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:701:12
		task563 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task563.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _701_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   701,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task563.run = func(ctx context.Context) (err error) {
			taskEmitter := task563.emitter
			startTime := time.Now()
			defer func() {
				if task563.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task563.ran.Store(true)

			_701_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task563.job = sched.Enqueue(ctx, cff.Job{
			Run: task563.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task563)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:702:12
		task564 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task564.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _702_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   702,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task564.run = func(ctx context.Context) (err error) {
			taskEmitter := task564.emitter
			startTime := time.Now()
			defer func() {
				if task564.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task564.ran.Store(true)

			_702_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task564.job = sched.Enqueue(ctx, cff.Job{
			Run: task564.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task564)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:703:12
		task565 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task565.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _703_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   703,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task565.run = func(ctx context.Context) (err error) {
			taskEmitter := task565.emitter
			startTime := time.Now()
			defer func() {
				if task565.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task565.ran.Store(true)

			_703_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task565.job = sched.Enqueue(ctx, cff.Job{
			Run: task565.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task565)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:704:12
		task566 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task566.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _704_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   704,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task566.run = func(ctx context.Context) (err error) {
			taskEmitter := task566.emitter
			startTime := time.Now()
			defer func() {
				if task566.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task566.ran.Store(true)

			_704_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task566.job = sched.Enqueue(ctx, cff.Job{
			Run: task566.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task566)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:705:12
		task567 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task567.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _705_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   705,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task567.run = func(ctx context.Context) (err error) {
			taskEmitter := task567.emitter
			startTime := time.Now()
			defer func() {
				if task567.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task567.ran.Store(true)

			_705_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task567.job = sched.Enqueue(ctx, cff.Job{
			Run: task567.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task567)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:706:12
		task568 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task568.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _706_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   706,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task568.run = func(ctx context.Context) (err error) {
			taskEmitter := task568.emitter
			startTime := time.Now()
			defer func() {
				if task568.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task568.ran.Store(true)

			_706_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task568.job = sched.Enqueue(ctx, cff.Job{
			Run: task568.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task568)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:707:12
		task569 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task569.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _707_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   707,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task569.run = func(ctx context.Context) (err error) {
			taskEmitter := task569.emitter
			startTime := time.Now()
			defer func() {
				if task569.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task569.ran.Store(true)

			_707_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task569.job = sched.Enqueue(ctx, cff.Job{
			Run: task569.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task569)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:708:12
		task570 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task570.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _708_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   708,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task570.run = func(ctx context.Context) (err error) {
			taskEmitter := task570.emitter
			startTime := time.Now()
			defer func() {
				if task570.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task570.ran.Store(true)

			_708_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task570.job = sched.Enqueue(ctx, cff.Job{
			Run: task570.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task570)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:709:12
		task571 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task571.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _709_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   709,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task571.run = func(ctx context.Context) (err error) {
			taskEmitter := task571.emitter
			startTime := time.Now()
			defer func() {
				if task571.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task571.ran.Store(true)

			_709_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task571.job = sched.Enqueue(ctx, cff.Job{
			Run: task571.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task571)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:710:12
		task572 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task572.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _710_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   710,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task572.run = func(ctx context.Context) (err error) {
			taskEmitter := task572.emitter
			startTime := time.Now()
			defer func() {
				if task572.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task572.ran.Store(true)

			_710_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task572.job = sched.Enqueue(ctx, cff.Job{
			Run: task572.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task572)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:711:12
		task573 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task573.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _711_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   711,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task573.run = func(ctx context.Context) (err error) {
			taskEmitter := task573.emitter
			startTime := time.Now()
			defer func() {
				if task573.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task573.ran.Store(true)

			_711_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task573.job = sched.Enqueue(ctx, cff.Job{
			Run: task573.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task573)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:712:12
		task574 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task574.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _712_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   712,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task574.run = func(ctx context.Context) (err error) {
			taskEmitter := task574.emitter
			startTime := time.Now()
			defer func() {
				if task574.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task574.ran.Store(true)

			_712_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task574.job = sched.Enqueue(ctx, cff.Job{
			Run: task574.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task574)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:713:12
		task575 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task575.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _713_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   713,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task575.run = func(ctx context.Context) (err error) {
			taskEmitter := task575.emitter
			startTime := time.Now()
			defer func() {
				if task575.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task575.ran.Store(true)

			_713_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task575.job = sched.Enqueue(ctx, cff.Job{
			Run: task575.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task575)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:714:12
		task576 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task576.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _714_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   714,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task576.run = func(ctx context.Context) (err error) {
			taskEmitter := task576.emitter
			startTime := time.Now()
			defer func() {
				if task576.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task576.ran.Store(true)

			_714_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task576.job = sched.Enqueue(ctx, cff.Job{
			Run: task576.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task576)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:715:12
		task577 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task577.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _715_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   715,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task577.run = func(ctx context.Context) (err error) {
			taskEmitter := task577.emitter
			startTime := time.Now()
			defer func() {
				if task577.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task577.ran.Store(true)

			_715_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task577.job = sched.Enqueue(ctx, cff.Job{
			Run: task577.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task577)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:716:12
		task578 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task578.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _716_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   716,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task578.run = func(ctx context.Context) (err error) {
			taskEmitter := task578.emitter
			startTime := time.Now()
			defer func() {
				if task578.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task578.ran.Store(true)

			_716_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task578.job = sched.Enqueue(ctx, cff.Job{
			Run: task578.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task578)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:717:12
		task579 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task579.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _717_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   717,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task579.run = func(ctx context.Context) (err error) {
			taskEmitter := task579.emitter
			startTime := time.Now()
			defer func() {
				if task579.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task579.ran.Store(true)

			_717_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task579.job = sched.Enqueue(ctx, cff.Job{
			Run: task579.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task579)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:718:12
		task580 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task580.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _718_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   718,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task580.run = func(ctx context.Context) (err error) {
			taskEmitter := task580.emitter
			startTime := time.Now()
			defer func() {
				if task580.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task580.ran.Store(true)

			_718_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task580.job = sched.Enqueue(ctx, cff.Job{
			Run: task580.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task580)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:719:12
		task581 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task581.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _719_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   719,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task581.run = func(ctx context.Context) (err error) {
			taskEmitter := task581.emitter
			startTime := time.Now()
			defer func() {
				if task581.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task581.ran.Store(true)

			_719_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task581.job = sched.Enqueue(ctx, cff.Job{
			Run: task581.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task581)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:720:12
		task582 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task582.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _720_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   720,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task582.run = func(ctx context.Context) (err error) {
			taskEmitter := task582.emitter
			startTime := time.Now()
			defer func() {
				if task582.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task582.ran.Store(true)

			_720_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task582.job = sched.Enqueue(ctx, cff.Job{
			Run: task582.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task582)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:721:12
		task583 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task583.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _721_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   721,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task583.run = func(ctx context.Context) (err error) {
			taskEmitter := task583.emitter
			startTime := time.Now()
			defer func() {
				if task583.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task583.ran.Store(true)

			_721_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task583.job = sched.Enqueue(ctx, cff.Job{
			Run: task583.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task583)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:722:12
		task584 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task584.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _722_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   722,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task584.run = func(ctx context.Context) (err error) {
			taskEmitter := task584.emitter
			startTime := time.Now()
			defer func() {
				if task584.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task584.ran.Store(true)

			_722_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task584.job = sched.Enqueue(ctx, cff.Job{
			Run: task584.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task584)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:723:12
		task585 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task585.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _723_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   723,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task585.run = func(ctx context.Context) (err error) {
			taskEmitter := task585.emitter
			startTime := time.Now()
			defer func() {
				if task585.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task585.ran.Store(true)

			_723_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task585.job = sched.Enqueue(ctx, cff.Job{
			Run: task585.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task585)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:724:12
		task586 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task586.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _724_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   724,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task586.run = func(ctx context.Context) (err error) {
			taskEmitter := task586.emitter
			startTime := time.Now()
			defer func() {
				if task586.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task586.ran.Store(true)

			_724_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task586.job = sched.Enqueue(ctx, cff.Job{
			Run: task586.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task586)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:725:12
		task587 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task587.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _725_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   725,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task587.run = func(ctx context.Context) (err error) {
			taskEmitter := task587.emitter
			startTime := time.Now()
			defer func() {
				if task587.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task587.ran.Store(true)

			_725_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task587.job = sched.Enqueue(ctx, cff.Job{
			Run: task587.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task587)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:726:12
		task588 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task588.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _726_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   726,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task588.run = func(ctx context.Context) (err error) {
			taskEmitter := task588.emitter
			startTime := time.Now()
			defer func() {
				if task588.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task588.ran.Store(true)

			_726_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task588.job = sched.Enqueue(ctx, cff.Job{
			Run: task588.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task588)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:727:12
		task589 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task589.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _727_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   727,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task589.run = func(ctx context.Context) (err error) {
			taskEmitter := task589.emitter
			startTime := time.Now()
			defer func() {
				if task589.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task589.ran.Store(true)

			_727_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task589.job = sched.Enqueue(ctx, cff.Job{
			Run: task589.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task589)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:728:12
		task590 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task590.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _728_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   728,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task590.run = func(ctx context.Context) (err error) {
			taskEmitter := task590.emitter
			startTime := time.Now()
			defer func() {
				if task590.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task590.ran.Store(true)

			_728_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task590.job = sched.Enqueue(ctx, cff.Job{
			Run: task590.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task590)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:729:12
		task591 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task591.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _729_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   729,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task591.run = func(ctx context.Context) (err error) {
			taskEmitter := task591.emitter
			startTime := time.Now()
			defer func() {
				if task591.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task591.ran.Store(true)

			_729_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task591.job = sched.Enqueue(ctx, cff.Job{
			Run: task591.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task591)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:730:12
		task592 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task592.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _730_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   730,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task592.run = func(ctx context.Context) (err error) {
			taskEmitter := task592.emitter
			startTime := time.Now()
			defer func() {
				if task592.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task592.ran.Store(true)

			_730_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task592.job = sched.Enqueue(ctx, cff.Job{
			Run: task592.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task592)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:731:12
		task593 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task593.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _731_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   731,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task593.run = func(ctx context.Context) (err error) {
			taskEmitter := task593.emitter
			startTime := time.Now()
			defer func() {
				if task593.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task593.ran.Store(true)

			_731_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task593.job = sched.Enqueue(ctx, cff.Job{
			Run: task593.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task593)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:732:12
		task594 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task594.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _732_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   732,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task594.run = func(ctx context.Context) (err error) {
			taskEmitter := task594.emitter
			startTime := time.Now()
			defer func() {
				if task594.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task594.ran.Store(true)

			_732_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task594.job = sched.Enqueue(ctx, cff.Job{
			Run: task594.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task594)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:733:12
		task595 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task595.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _733_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   733,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task595.run = func(ctx context.Context) (err error) {
			taskEmitter := task595.emitter
			startTime := time.Now()
			defer func() {
				if task595.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task595.ran.Store(true)

			_733_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task595.job = sched.Enqueue(ctx, cff.Job{
			Run: task595.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task595)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:734:12
		task596 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task596.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _734_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   734,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task596.run = func(ctx context.Context) (err error) {
			taskEmitter := task596.emitter
			startTime := time.Now()
			defer func() {
				if task596.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task596.ran.Store(true)

			_734_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task596.job = sched.Enqueue(ctx, cff.Job{
			Run: task596.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task596)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:735:12
		task597 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task597.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _735_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   735,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task597.run = func(ctx context.Context) (err error) {
			taskEmitter := task597.emitter
			startTime := time.Now()
			defer func() {
				if task597.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task597.ran.Store(true)

			_735_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task597.job = sched.Enqueue(ctx, cff.Job{
			Run: task597.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task597)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:736:12
		task598 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task598.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _736_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   736,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task598.run = func(ctx context.Context) (err error) {
			taskEmitter := task598.emitter
			startTime := time.Now()
			defer func() {
				if task598.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task598.ran.Store(true)

			_736_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task598.job = sched.Enqueue(ctx, cff.Job{
			Run: task598.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task598)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:737:12
		task599 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task599.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _737_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   737,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task599.run = func(ctx context.Context) (err error) {
			taskEmitter := task599.emitter
			startTime := time.Now()
			defer func() {
				if task599.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task599.ran.Store(true)

			_737_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task599.job = sched.Enqueue(ctx, cff.Job{
			Run: task599.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task599)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:738:12
		task600 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task600.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _738_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   738,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task600.run = func(ctx context.Context) (err error) {
			taskEmitter := task600.emitter
			startTime := time.Now()
			defer func() {
				if task600.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task600.ran.Store(true)

			_738_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task600.job = sched.Enqueue(ctx, cff.Job{
			Run: task600.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task600)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:739:12
		task601 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task601.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _739_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   739,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task601.run = func(ctx context.Context) (err error) {
			taskEmitter := task601.emitter
			startTime := time.Now()
			defer func() {
				if task601.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task601.ran.Store(true)

			_739_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task601.job = sched.Enqueue(ctx, cff.Job{
			Run: task601.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task601)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:740:12
		task602 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task602.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _740_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   740,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task602.run = func(ctx context.Context) (err error) {
			taskEmitter := task602.emitter
			startTime := time.Now()
			defer func() {
				if task602.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task602.ran.Store(true)

			_740_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task602.job = sched.Enqueue(ctx, cff.Job{
			Run: task602.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task602)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:741:12
		task603 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task603.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _741_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   741,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task603.run = func(ctx context.Context) (err error) {
			taskEmitter := task603.emitter
			startTime := time.Now()
			defer func() {
				if task603.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task603.ran.Store(true)

			_741_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task603.job = sched.Enqueue(ctx, cff.Job{
			Run: task603.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task603)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:742:12
		task604 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task604.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _742_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   742,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task604.run = func(ctx context.Context) (err error) {
			taskEmitter := task604.emitter
			startTime := time.Now()
			defer func() {
				if task604.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task604.ran.Store(true)

			_742_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task604.job = sched.Enqueue(ctx, cff.Job{
			Run: task604.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task604)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:743:12
		task605 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task605.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _743_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   743,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task605.run = func(ctx context.Context) (err error) {
			taskEmitter := task605.emitter
			startTime := time.Now()
			defer func() {
				if task605.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task605.ran.Store(true)

			_743_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task605.job = sched.Enqueue(ctx, cff.Job{
			Run: task605.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task605)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:744:12
		task606 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task606.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _744_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   744,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task606.run = func(ctx context.Context) (err error) {
			taskEmitter := task606.emitter
			startTime := time.Now()
			defer func() {
				if task606.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task606.ran.Store(true)

			_744_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task606.job = sched.Enqueue(ctx, cff.Job{
			Run: task606.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task606)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:745:12
		task607 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task607.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _745_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   745,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task607.run = func(ctx context.Context) (err error) {
			taskEmitter := task607.emitter
			startTime := time.Now()
			defer func() {
				if task607.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task607.ran.Store(true)

			_745_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task607.job = sched.Enqueue(ctx, cff.Job{
			Run: task607.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task607)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:746:12
		task608 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task608.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _746_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   746,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task608.run = func(ctx context.Context) (err error) {
			taskEmitter := task608.emitter
			startTime := time.Now()
			defer func() {
				if task608.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task608.ran.Store(true)

			_746_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task608.job = sched.Enqueue(ctx, cff.Job{
			Run: task608.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task608)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:747:12
		task609 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task609.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _747_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   747,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task609.run = func(ctx context.Context) (err error) {
			taskEmitter := task609.emitter
			startTime := time.Now()
			defer func() {
				if task609.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task609.ran.Store(true)

			_747_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task609.job = sched.Enqueue(ctx, cff.Job{
			Run: task609.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task609)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:748:12
		task610 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task610.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _748_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   748,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task610.run = func(ctx context.Context) (err error) {
			taskEmitter := task610.emitter
			startTime := time.Now()
			defer func() {
				if task610.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task610.ran.Store(true)

			_748_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task610.job = sched.Enqueue(ctx, cff.Job{
			Run: task610.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task610)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:749:12
		task611 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task611.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _749_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   749,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task611.run = func(ctx context.Context) (err error) {
			taskEmitter := task611.emitter
			startTime := time.Now()
			defer func() {
				if task611.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task611.ran.Store(true)

			_749_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task611.job = sched.Enqueue(ctx, cff.Job{
			Run: task611.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task611)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:750:12
		task612 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task612.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _750_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   750,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task612.run = func(ctx context.Context) (err error) {
			taskEmitter := task612.emitter
			startTime := time.Now()
			defer func() {
				if task612.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task612.ran.Store(true)

			_750_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task612.job = sched.Enqueue(ctx, cff.Job{
			Run: task612.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task612)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:751:12
		task613 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task613.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _751_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   751,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task613.run = func(ctx context.Context) (err error) {
			taskEmitter := task613.emitter
			startTime := time.Now()
			defer func() {
				if task613.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task613.ran.Store(true)

			_751_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task613.job = sched.Enqueue(ctx, cff.Job{
			Run: task613.run,
			Dependencies: []*cff.ScheduledJob{
				task113.job,
			},
		})
		tasks = append(tasks, task613)

		if err := sched.Wait(ctx); err != nil {
			flowEmitter.FlowError(ctx, err)
			return err
		}

		*(_247_15) = v3 // float64

		flowEmitter.FlowSuccess(ctx)
		return nil
	}()
	return res
}

// Metrics1000 is a flow with 999 dependent tasks
func Metrics1000(logger *zap.Logger, scope tally.Scope) float64 {
	var res float64
	func() (err error) {

		_760_3 := context.Background()

		_761_22 := "Metrics1000"

		_762_19 := cff.TallyEmitter(scope)

		_763_19 := cff.LogEmitter(logger)

		_764_15 := &res

		_766_4 := func() float64 { return 0 }

		_767_19 := "base"

		_769_12 := func(i float64) {}

		_769_47 := "1"

		_770_12 := func(i float64) {}

		_770_47 := "2"

		_771_12 := func(i float64) {}

		_771_47 := "3"

		_772_12 := func(i float64) {}

		_772_47 := "4"

		_773_12 := func(i float64) {}

		_773_47 := "5"

		_774_12 := func(i float64) {}

		_774_47 := "6"

		_775_12 := func(i float64) {}

		_775_47 := "7"

		_776_12 := func(i float64) {}

		_776_47 := "8"

		_777_12 := func(i float64) {}

		_777_47 := "9"

		_778_12 := func(i float64) {}

		_778_47 := "10"

		_779_12 := func(i float64) {}

		_779_47 := "11"

		_780_12 := func(i float64) {}

		_780_47 := "12"

		_781_12 := func(i float64) {}

		_781_47 := "13"

		_782_12 := func(i float64) {}

		_782_47 := "14"

		_783_12 := func(i float64) {}

		_783_47 := "15"

		_784_12 := func(i float64) {}

		_784_47 := "16"

		_785_12 := func(i float64) {}

		_785_47 := "17"

		_786_12 := func(i float64) {}

		_786_47 := "18"

		_787_12 := func(i float64) {}

		_787_47 := "19"

		_788_12 := func(i float64) {}

		_788_47 := "20"

		_789_12 := func(i float64) {}

		_789_47 := "21"

		_790_12 := func(i float64) {}

		_790_47 := "22"

		_791_12 := func(i float64) {}

		_791_47 := "23"

		_792_12 := func(i float64) {}

		_792_47 := "24"

		_793_12 := func(i float64) {}

		_793_47 := "25"

		_794_12 := func(i float64) {}

		_794_47 := "26"

		_795_12 := func(i float64) {}

		_795_47 := "27"

		_796_12 := func(i float64) {}

		_796_47 := "28"

		_797_12 := func(i float64) {}

		_797_47 := "29"

		_798_12 := func(i float64) {}

		_798_47 := "30"

		_799_12 := func(i float64) {}

		_799_47 := "31"

		_800_12 := func(i float64) {}

		_800_47 := "32"

		_801_12 := func(i float64) {}

		_801_47 := "33"

		_802_12 := func(i float64) {}

		_802_47 := "34"

		_803_12 := func(i float64) {}

		_803_47 := "35"

		_804_12 := func(i float64) {}

		_804_47 := "36"

		_805_12 := func(i float64) {}

		_805_47 := "37"

		_806_12 := func(i float64) {}

		_806_47 := "38"

		_807_12 := func(i float64) {}

		_807_47 := "39"

		_808_12 := func(i float64) {}

		_808_47 := "40"

		_809_12 := func(i float64) {}

		_809_47 := "41"

		_810_12 := func(i float64) {}

		_810_47 := "42"

		_811_12 := func(i float64) {}

		_811_47 := "43"

		_812_12 := func(i float64) {}

		_812_47 := "44"

		_813_12 := func(i float64) {}

		_813_47 := "45"

		_814_12 := func(i float64) {}

		_814_47 := "46"

		_815_12 := func(i float64) {}

		_815_47 := "47"

		_816_12 := func(i float64) {}

		_816_47 := "48"

		_817_12 := func(i float64) {}

		_817_47 := "49"

		_818_12 := func(i float64) {}

		_818_47 := "50"

		_819_12 := func(i float64) {}

		_819_47 := "51"

		_820_12 := func(i float64) {}

		_820_47 := "52"

		_821_12 := func(i float64) {}

		_821_47 := "53"

		_822_12 := func(i float64) {}

		_822_47 := "54"

		_823_12 := func(i float64) {}

		_823_47 := "55"

		_824_12 := func(i float64) {}

		_824_47 := "56"

		_825_12 := func(i float64) {}

		_825_47 := "57"

		_826_12 := func(i float64) {}

		_826_47 := "58"

		_827_12 := func(i float64) {}

		_827_47 := "59"

		_828_12 := func(i float64) {}

		_828_47 := "60"

		_829_12 := func(i float64) {}

		_829_47 := "61"

		_830_12 := func(i float64) {}

		_830_47 := "62"

		_831_12 := func(i float64) {}

		_831_47 := "63"

		_832_12 := func(i float64) {}

		_832_47 := "64"

		_833_12 := func(i float64) {}

		_833_47 := "65"

		_834_12 := func(i float64) {}

		_834_47 := "66"

		_835_12 := func(i float64) {}

		_835_47 := "67"

		_836_12 := func(i float64) {}

		_836_47 := "68"

		_837_12 := func(i float64) {}

		_837_47 := "69"

		_838_12 := func(i float64) {}

		_838_47 := "70"

		_839_12 := func(i float64) {}

		_839_47 := "71"

		_840_12 := func(i float64) {}

		_840_47 := "72"

		_841_12 := func(i float64) {}

		_841_47 := "73"

		_842_12 := func(i float64) {}

		_842_47 := "74"

		_843_12 := func(i float64) {}

		_843_47 := "75"

		_844_12 := func(i float64) {}

		_844_47 := "76"

		_845_12 := func(i float64) {}

		_845_47 := "77"

		_846_12 := func(i float64) {}

		_846_47 := "78"

		_847_12 := func(i float64) {}

		_847_47 := "79"

		_848_12 := func(i float64) {}

		_848_47 := "80"

		_849_12 := func(i float64) {}

		_849_47 := "81"

		_850_12 := func(i float64) {}

		_850_47 := "82"

		_851_12 := func(i float64) {}

		_851_47 := "83"

		_852_12 := func(i float64) {}

		_852_47 := "84"

		_853_12 := func(i float64) {}

		_853_47 := "85"

		_854_12 := func(i float64) {}

		_854_47 := "86"

		_855_12 := func(i float64) {}

		_855_47 := "87"

		_856_12 := func(i float64) {}

		_856_47 := "88"

		_857_12 := func(i float64) {}

		_857_47 := "89"

		_858_12 := func(i float64) {}

		_858_47 := "90"

		_859_12 := func(i float64) {}

		_859_47 := "91"

		_860_12 := func(i float64) {}

		_860_47 := "92"

		_861_12 := func(i float64) {}

		_861_47 := "93"

		_862_12 := func(i float64) {}

		_862_47 := "94"

		_863_12 := func(i float64) {}

		_863_47 := "95"

		_864_12 := func(i float64) {}

		_864_47 := "96"

		_865_12 := func(i float64) {}

		_865_47 := "97"

		_866_12 := func(i float64) {}

		_866_47 := "98"

		_867_12 := func(i float64) {}

		_867_47 := "99"

		_868_12 := func(i float64) {}

		_868_47 := "100"

		_869_12 := func(i float64) {}

		_869_47 := "101"

		_870_12 := func(i float64) {}

		_870_47 := "102"

		_871_12 := func(i float64) {}

		_871_47 := "103"

		_872_12 := func(i float64) {}

		_872_47 := "104"

		_873_12 := func(i float64) {}

		_873_47 := "105"

		_874_12 := func(i float64) {}

		_874_47 := "106"

		_875_12 := func(i float64) {}

		_875_47 := "107"

		_876_12 := func(i float64) {}

		_876_47 := "108"

		_877_12 := func(i float64) {}

		_877_47 := "109"

		_878_12 := func(i float64) {}

		_878_47 := "110"

		_879_12 := func(i float64) {}

		_879_47 := "111"

		_880_12 := func(i float64) {}

		_880_47 := "112"

		_881_12 := func(i float64) {}

		_881_47 := "113"

		_882_12 := func(i float64) {}

		_882_47 := "114"

		_883_12 := func(i float64) {}

		_883_47 := "115"

		_884_12 := func(i float64) {}

		_884_47 := "116"

		_885_12 := func(i float64) {}

		_885_47 := "117"

		_886_12 := func(i float64) {}

		_886_47 := "118"

		_887_12 := func(i float64) {}

		_887_47 := "119"

		_888_12 := func(i float64) {}

		_888_47 := "120"

		_889_12 := func(i float64) {}

		_889_47 := "121"

		_890_12 := func(i float64) {}

		_890_47 := "122"

		_891_12 := func(i float64) {}

		_891_47 := "123"

		_892_12 := func(i float64) {}

		_892_47 := "124"

		_893_12 := func(i float64) {}

		_893_47 := "125"

		_894_12 := func(i float64) {}

		_894_47 := "126"

		_895_12 := func(i float64) {}

		_895_47 := "127"

		_896_12 := func(i float64) {}

		_896_47 := "128"

		_897_12 := func(i float64) {}

		_897_47 := "129"

		_898_12 := func(i float64) {}

		_898_47 := "130"

		_899_12 := func(i float64) {}

		_899_47 := "131"

		_900_12 := func(i float64) {}

		_900_47 := "132"

		_901_12 := func(i float64) {}

		_901_47 := "133"

		_902_12 := func(i float64) {}

		_902_47 := "134"

		_903_12 := func(i float64) {}

		_903_47 := "135"

		_904_12 := func(i float64) {}

		_904_47 := "136"

		_905_12 := func(i float64) {}

		_905_47 := "137"

		_906_12 := func(i float64) {}

		_906_47 := "138"

		_907_12 := func(i float64) {}

		_907_47 := "139"

		_908_12 := func(i float64) {}

		_908_47 := "140"

		_909_12 := func(i float64) {}

		_909_47 := "141"

		_910_12 := func(i float64) {}

		_910_47 := "142"

		_911_12 := func(i float64) {}

		_911_47 := "143"

		_912_12 := func(i float64) {}

		_912_47 := "144"

		_913_12 := func(i float64) {}

		_913_47 := "145"

		_914_12 := func(i float64) {}

		_914_47 := "146"

		_915_12 := func(i float64) {}

		_915_47 := "147"

		_916_12 := func(i float64) {}

		_916_47 := "148"

		_917_12 := func(i float64) {}

		_917_47 := "149"

		_918_12 := func(i float64) {}

		_918_47 := "150"

		_919_12 := func(i float64) {}

		_919_47 := "151"

		_920_12 := func(i float64) {}

		_920_47 := "152"

		_921_12 := func(i float64) {}

		_921_47 := "153"

		_922_12 := func(i float64) {}

		_922_47 := "154"

		_923_12 := func(i float64) {}

		_923_47 := "155"

		_924_12 := func(i float64) {}

		_924_47 := "156"

		_925_12 := func(i float64) {}

		_925_47 := "157"

		_926_12 := func(i float64) {}

		_926_47 := "158"

		_927_12 := func(i float64) {}

		_927_47 := "159"

		_928_12 := func(i float64) {}

		_928_47 := "160"

		_929_12 := func(i float64) {}

		_929_47 := "161"

		_930_12 := func(i float64) {}

		_930_47 := "162"

		_931_12 := func(i float64) {}

		_931_47 := "163"

		_932_12 := func(i float64) {}

		_932_47 := "164"

		_933_12 := func(i float64) {}

		_933_47 := "165"

		_934_12 := func(i float64) {}

		_934_47 := "166"

		_935_12 := func(i float64) {}

		_935_47 := "167"

		_936_12 := func(i float64) {}

		_936_47 := "168"

		_937_12 := func(i float64) {}

		_937_47 := "169"

		_938_12 := func(i float64) {}

		_938_47 := "170"

		_939_12 := func(i float64) {}

		_939_47 := "171"

		_940_12 := func(i float64) {}

		_940_47 := "172"

		_941_12 := func(i float64) {}

		_941_47 := "173"

		_942_12 := func(i float64) {}

		_942_47 := "174"

		_943_12 := func(i float64) {}

		_943_47 := "175"

		_944_12 := func(i float64) {}

		_944_47 := "176"

		_945_12 := func(i float64) {}

		_945_47 := "177"

		_946_12 := func(i float64) {}

		_946_47 := "178"

		_947_12 := func(i float64) {}

		_947_47 := "179"

		_948_12 := func(i float64) {}

		_948_47 := "180"

		_949_12 := func(i float64) {}

		_949_47 := "181"

		_950_12 := func(i float64) {}

		_950_47 := "182"

		_951_12 := func(i float64) {}

		_951_47 := "183"

		_952_12 := func(i float64) {}

		_952_47 := "184"

		_953_12 := func(i float64) {}

		_953_47 := "185"

		_954_12 := func(i float64) {}

		_954_47 := "186"

		_955_12 := func(i float64) {}

		_955_47 := "187"

		_956_12 := func(i float64) {}

		_956_47 := "188"

		_957_12 := func(i float64) {}

		_957_47 := "189"

		_958_12 := func(i float64) {}

		_958_47 := "190"

		_959_12 := func(i float64) {}

		_959_47 := "191"

		_960_12 := func(i float64) {}

		_960_47 := "192"

		_961_12 := func(i float64) {}

		_961_47 := "193"

		_962_12 := func(i float64) {}

		_962_47 := "194"

		_963_12 := func(i float64) {}

		_963_47 := "195"

		_964_12 := func(i float64) {}

		_964_47 := "196"

		_965_12 := func(i float64) {}

		_965_47 := "197"

		_966_12 := func(i float64) {}

		_966_47 := "198"

		_967_12 := func(i float64) {}

		_967_47 := "199"

		_968_12 := func(i float64) {}

		_968_47 := "200"

		_969_12 := func(i float64) {}

		_969_47 := "201"

		_970_12 := func(i float64) {}

		_970_47 := "202"

		_971_12 := func(i float64) {}

		_971_47 := "203"

		_972_12 := func(i float64) {}

		_972_47 := "204"

		_973_12 := func(i float64) {}

		_973_47 := "205"

		_974_12 := func(i float64) {}

		_974_47 := "206"

		_975_12 := func(i float64) {}

		_975_47 := "207"

		_976_12 := func(i float64) {}

		_976_47 := "208"

		_977_12 := func(i float64) {}

		_977_47 := "209"

		_978_12 := func(i float64) {}

		_978_47 := "210"

		_979_12 := func(i float64) {}

		_979_47 := "211"

		_980_12 := func(i float64) {}

		_980_47 := "212"

		_981_12 := func(i float64) {}

		_981_47 := "213"

		_982_12 := func(i float64) {}

		_982_47 := "214"

		_983_12 := func(i float64) {}

		_983_47 := "215"

		_984_12 := func(i float64) {}

		_984_47 := "216"

		_985_12 := func(i float64) {}

		_985_47 := "217"

		_986_12 := func(i float64) {}

		_986_47 := "218"

		_987_12 := func(i float64) {}

		_987_47 := "219"

		_988_12 := func(i float64) {}

		_988_47 := "220"

		_989_12 := func(i float64) {}

		_989_47 := "221"

		_990_12 := func(i float64) {}

		_990_47 := "222"

		_991_12 := func(i float64) {}

		_991_47 := "223"

		_992_12 := func(i float64) {}

		_992_47 := "224"

		_993_12 := func(i float64) {}

		_993_47 := "225"

		_994_12 := func(i float64) {}

		_994_47 := "226"

		_995_12 := func(i float64) {}

		_995_47 := "227"

		_996_12 := func(i float64) {}

		_996_47 := "228"

		_997_12 := func(i float64) {}

		_997_47 := "229"

		_998_12 := func(i float64) {}

		_998_47 := "230"

		_999_12 := func(i float64) {}

		_999_47 := "231"

		_1000_12 := func(i float64) {}

		_1000_47 := "232"

		_1001_12 := func(i float64) {}

		_1001_47 := "233"

		_1002_12 := func(i float64) {}

		_1002_47 := "234"

		_1003_12 := func(i float64) {}

		_1003_47 := "235"

		_1004_12 := func(i float64) {}

		_1004_47 := "236"

		_1005_12 := func(i float64) {}

		_1005_47 := "237"

		_1006_12 := func(i float64) {}

		_1006_47 := "238"

		_1007_12 := func(i float64) {}

		_1007_47 := "239"

		_1008_12 := func(i float64) {}

		_1008_47 := "240"

		_1009_12 := func(i float64) {}

		_1009_47 := "241"

		_1010_12 := func(i float64) {}

		_1010_47 := "242"

		_1011_12 := func(i float64) {}

		_1011_47 := "243"

		_1012_12 := func(i float64) {}

		_1012_47 := "244"

		_1013_12 := func(i float64) {}

		_1013_47 := "245"

		_1014_12 := func(i float64) {}

		_1014_47 := "246"

		_1015_12 := func(i float64) {}

		_1015_47 := "247"

		_1016_12 := func(i float64) {}

		_1016_47 := "248"

		_1017_12 := func(i float64) {}

		_1017_47 := "249"

		_1018_12 := func(i float64) {}

		_1018_47 := "250"

		_1019_12 := func(i float64) {}

		_1019_47 := "251"

		_1020_12 := func(i float64) {}

		_1020_47 := "252"

		_1021_12 := func(i float64) {}

		_1021_47 := "253"

		_1022_12 := func(i float64) {}

		_1022_47 := "254"

		_1023_12 := func(i float64) {}

		_1023_47 := "255"

		_1024_12 := func(i float64) {}

		_1024_47 := "256"

		_1025_12 := func(i float64) {}

		_1025_47 := "257"

		_1026_12 := func(i float64) {}

		_1026_47 := "258"

		_1027_12 := func(i float64) {}

		_1027_47 := "259"

		_1028_12 := func(i float64) {}

		_1028_47 := "260"

		_1029_12 := func(i float64) {}

		_1029_47 := "261"

		_1030_12 := func(i float64) {}

		_1030_47 := "262"

		_1031_12 := func(i float64) {}

		_1031_47 := "263"

		_1032_12 := func(i float64) {}

		_1032_47 := "264"

		_1033_12 := func(i float64) {}

		_1033_47 := "265"

		_1034_12 := func(i float64) {}

		_1034_47 := "266"

		_1035_12 := func(i float64) {}

		_1035_47 := "267"

		_1036_12 := func(i float64) {}

		_1036_47 := "268"

		_1037_12 := func(i float64) {}

		_1037_47 := "269"

		_1038_12 := func(i float64) {}

		_1038_47 := "270"

		_1039_12 := func(i float64) {}

		_1039_47 := "271"

		_1040_12 := func(i float64) {}

		_1040_47 := "272"

		_1041_12 := func(i float64) {}

		_1041_47 := "273"

		_1042_12 := func(i float64) {}

		_1042_47 := "274"

		_1043_12 := func(i float64) {}

		_1043_47 := "275"

		_1044_12 := func(i float64) {}

		_1044_47 := "276"

		_1045_12 := func(i float64) {}

		_1045_47 := "277"

		_1046_12 := func(i float64) {}

		_1046_47 := "278"

		_1047_12 := func(i float64) {}

		_1047_47 := "279"

		_1048_12 := func(i float64) {}

		_1048_47 := "280"

		_1049_12 := func(i float64) {}

		_1049_47 := "281"

		_1050_12 := func(i float64) {}

		_1050_47 := "282"

		_1051_12 := func(i float64) {}

		_1051_47 := "283"

		_1052_12 := func(i float64) {}

		_1052_47 := "284"

		_1053_12 := func(i float64) {}

		_1053_47 := "285"

		_1054_12 := func(i float64) {}

		_1054_47 := "286"

		_1055_12 := func(i float64) {}

		_1055_47 := "287"

		_1056_12 := func(i float64) {}

		_1056_47 := "288"

		_1057_12 := func(i float64) {}

		_1057_47 := "289"

		_1058_12 := func(i float64) {}

		_1058_47 := "290"

		_1059_12 := func(i float64) {}

		_1059_47 := "291"

		_1060_12 := func(i float64) {}

		_1060_47 := "292"

		_1061_12 := func(i float64) {}

		_1061_47 := "293"

		_1062_12 := func(i float64) {}

		_1062_47 := "294"

		_1063_12 := func(i float64) {}

		_1063_47 := "295"

		_1064_12 := func(i float64) {}

		_1064_47 := "296"

		_1065_12 := func(i float64) {}

		_1065_47 := "297"

		_1066_12 := func(i float64) {}

		_1066_47 := "298"

		_1067_12 := func(i float64) {}

		_1067_47 := "299"

		_1068_12 := func(i float64) {}

		_1068_47 := "300"

		_1069_12 := func(i float64) {}

		_1069_47 := "301"

		_1070_12 := func(i float64) {}

		_1070_47 := "302"

		_1071_12 := func(i float64) {}

		_1071_47 := "303"

		_1072_12 := func(i float64) {}

		_1072_47 := "304"

		_1073_12 := func(i float64) {}

		_1073_47 := "305"

		_1074_12 := func(i float64) {}

		_1074_47 := "306"

		_1075_12 := func(i float64) {}

		_1075_47 := "307"

		_1076_12 := func(i float64) {}

		_1076_47 := "308"

		_1077_12 := func(i float64) {}

		_1077_47 := "309"

		_1078_12 := func(i float64) {}

		_1078_47 := "310"

		_1079_12 := func(i float64) {}

		_1079_47 := "311"

		_1080_12 := func(i float64) {}

		_1080_47 := "312"

		_1081_12 := func(i float64) {}

		_1081_47 := "313"

		_1082_12 := func(i float64) {}

		_1082_47 := "314"

		_1083_12 := func(i float64) {}

		_1083_47 := "315"

		_1084_12 := func(i float64) {}

		_1084_47 := "316"

		_1085_12 := func(i float64) {}

		_1085_47 := "317"

		_1086_12 := func(i float64) {}

		_1086_47 := "318"

		_1087_12 := func(i float64) {}

		_1087_47 := "319"

		_1088_12 := func(i float64) {}

		_1088_47 := "320"

		_1089_12 := func(i float64) {}

		_1089_47 := "321"

		_1090_12 := func(i float64) {}

		_1090_47 := "322"

		_1091_12 := func(i float64) {}

		_1091_47 := "323"

		_1092_12 := func(i float64) {}

		_1092_47 := "324"

		_1093_12 := func(i float64) {}

		_1093_47 := "325"

		_1094_12 := func(i float64) {}

		_1094_47 := "326"

		_1095_12 := func(i float64) {}

		_1095_47 := "327"

		_1096_12 := func(i float64) {}

		_1096_47 := "328"

		_1097_12 := func(i float64) {}

		_1097_47 := "329"

		_1098_12 := func(i float64) {}

		_1098_47 := "330"

		_1099_12 := func(i float64) {}

		_1099_47 := "331"

		_1100_12 := func(i float64) {}

		_1100_47 := "332"

		_1101_12 := func(i float64) {}

		_1101_47 := "333"

		_1102_12 := func(i float64) {}

		_1102_47 := "334"

		_1103_12 := func(i float64) {}

		_1103_47 := "335"

		_1104_12 := func(i float64) {}

		_1104_47 := "336"

		_1105_12 := func(i float64) {}

		_1105_47 := "337"

		_1106_12 := func(i float64) {}

		_1106_47 := "338"

		_1107_12 := func(i float64) {}

		_1107_47 := "339"

		_1108_12 := func(i float64) {}

		_1108_47 := "340"

		_1109_12 := func(i float64) {}

		_1109_47 := "341"

		_1110_12 := func(i float64) {}

		_1110_47 := "342"

		_1111_12 := func(i float64) {}

		_1111_47 := "343"

		_1112_12 := func(i float64) {}

		_1112_47 := "344"

		_1113_12 := func(i float64) {}

		_1113_47 := "345"

		_1114_12 := func(i float64) {}

		_1114_47 := "346"

		_1115_12 := func(i float64) {}

		_1115_47 := "347"

		_1116_12 := func(i float64) {}

		_1116_47 := "348"

		_1117_12 := func(i float64) {}

		_1117_47 := "349"

		_1118_12 := func(i float64) {}

		_1118_47 := "350"

		_1119_12 := func(i float64) {}

		_1119_47 := "351"

		_1120_12 := func(i float64) {}

		_1120_47 := "352"

		_1121_12 := func(i float64) {}

		_1121_47 := "353"

		_1122_12 := func(i float64) {}

		_1122_47 := "354"

		_1123_12 := func(i float64) {}

		_1123_47 := "355"

		_1124_12 := func(i float64) {}

		_1124_47 := "356"

		_1125_12 := func(i float64) {}

		_1125_47 := "357"

		_1126_12 := func(i float64) {}

		_1126_47 := "358"

		_1127_12 := func(i float64) {}

		_1127_47 := "359"

		_1128_12 := func(i float64) {}

		_1128_47 := "360"

		_1129_12 := func(i float64) {}

		_1129_47 := "361"

		_1130_12 := func(i float64) {}

		_1130_47 := "362"

		_1131_12 := func(i float64) {}

		_1131_47 := "363"

		_1132_12 := func(i float64) {}

		_1132_47 := "364"

		_1133_12 := func(i float64) {}

		_1133_47 := "365"

		_1134_12 := func(i float64) {}

		_1134_47 := "366"

		_1135_12 := func(i float64) {}

		_1135_47 := "367"

		_1136_12 := func(i float64) {}

		_1136_47 := "368"

		_1137_12 := func(i float64) {}

		_1137_47 := "369"

		_1138_12 := func(i float64) {}

		_1138_47 := "370"

		_1139_12 := func(i float64) {}

		_1139_47 := "371"

		_1140_12 := func(i float64) {}

		_1140_47 := "372"

		_1141_12 := func(i float64) {}

		_1141_47 := "373"

		_1142_12 := func(i float64) {}

		_1142_47 := "374"

		_1143_12 := func(i float64) {}

		_1143_47 := "375"

		_1144_12 := func(i float64) {}

		_1144_47 := "376"

		_1145_12 := func(i float64) {}

		_1145_47 := "377"

		_1146_12 := func(i float64) {}

		_1146_47 := "378"

		_1147_12 := func(i float64) {}

		_1147_47 := "379"

		_1148_12 := func(i float64) {}

		_1148_47 := "380"

		_1149_12 := func(i float64) {}

		_1149_47 := "381"

		_1150_12 := func(i float64) {}

		_1150_47 := "382"

		_1151_12 := func(i float64) {}

		_1151_47 := "383"

		_1152_12 := func(i float64) {}

		_1152_47 := "384"

		_1153_12 := func(i float64) {}

		_1153_47 := "385"

		_1154_12 := func(i float64) {}

		_1154_47 := "386"

		_1155_12 := func(i float64) {}

		_1155_47 := "387"

		_1156_12 := func(i float64) {}

		_1156_47 := "388"

		_1157_12 := func(i float64) {}

		_1157_47 := "389"

		_1158_12 := func(i float64) {}

		_1158_47 := "390"

		_1159_12 := func(i float64) {}

		_1159_47 := "391"

		_1160_12 := func(i float64) {}

		_1160_47 := "392"

		_1161_12 := func(i float64) {}

		_1161_47 := "393"

		_1162_12 := func(i float64) {}

		_1162_47 := "394"

		_1163_12 := func(i float64) {}

		_1163_47 := "395"

		_1164_12 := func(i float64) {}

		_1164_47 := "396"

		_1165_12 := func(i float64) {}

		_1165_47 := "397"

		_1166_12 := func(i float64) {}

		_1166_47 := "398"

		_1167_12 := func(i float64) {}

		_1167_47 := "399"

		_1168_12 := func(i float64) {}

		_1168_47 := "400"

		_1169_12 := func(i float64) {}

		_1169_47 := "401"

		_1170_12 := func(i float64) {}

		_1170_47 := "402"

		_1171_12 := func(i float64) {}

		_1171_47 := "403"

		_1172_12 := func(i float64) {}

		_1172_47 := "404"

		_1173_12 := func(i float64) {}

		_1173_47 := "405"

		_1174_12 := func(i float64) {}

		_1174_47 := "406"

		_1175_12 := func(i float64) {}

		_1175_47 := "407"

		_1176_12 := func(i float64) {}

		_1176_47 := "408"

		_1177_12 := func(i float64) {}

		_1177_47 := "409"

		_1178_12 := func(i float64) {}

		_1178_47 := "410"

		_1179_12 := func(i float64) {}

		_1179_47 := "411"

		_1180_12 := func(i float64) {}

		_1180_47 := "412"

		_1181_12 := func(i float64) {}

		_1181_47 := "413"

		_1182_12 := func(i float64) {}

		_1182_47 := "414"

		_1183_12 := func(i float64) {}

		_1183_47 := "415"

		_1184_12 := func(i float64) {}

		_1184_47 := "416"

		_1185_12 := func(i float64) {}

		_1185_47 := "417"

		_1186_12 := func(i float64) {}

		_1186_47 := "418"

		_1187_12 := func(i float64) {}

		_1187_47 := "419"

		_1188_12 := func(i float64) {}

		_1188_47 := "420"

		_1189_12 := func(i float64) {}

		_1189_47 := "421"

		_1190_12 := func(i float64) {}

		_1190_47 := "422"

		_1191_12 := func(i float64) {}

		_1191_47 := "423"

		_1192_12 := func(i float64) {}

		_1192_47 := "424"

		_1193_12 := func(i float64) {}

		_1193_47 := "425"

		_1194_12 := func(i float64) {}

		_1194_47 := "426"

		_1195_12 := func(i float64) {}

		_1195_47 := "427"

		_1196_12 := func(i float64) {}

		_1196_47 := "428"

		_1197_12 := func(i float64) {}

		_1197_47 := "429"

		_1198_12 := func(i float64) {}

		_1198_47 := "430"

		_1199_12 := func(i float64) {}

		_1199_47 := "431"

		_1200_12 := func(i float64) {}

		_1200_47 := "432"

		_1201_12 := func(i float64) {}

		_1201_47 := "433"

		_1202_12 := func(i float64) {}

		_1202_47 := "434"

		_1203_12 := func(i float64) {}

		_1203_47 := "435"

		_1204_12 := func(i float64) {}

		_1204_47 := "436"

		_1205_12 := func(i float64) {}

		_1205_47 := "437"

		_1206_12 := func(i float64) {}

		_1206_47 := "438"

		_1207_12 := func(i float64) {}

		_1207_47 := "439"

		_1208_12 := func(i float64) {}

		_1208_47 := "440"

		_1209_12 := func(i float64) {}

		_1209_47 := "441"

		_1210_12 := func(i float64) {}

		_1210_47 := "442"

		_1211_12 := func(i float64) {}

		_1211_47 := "443"

		_1212_12 := func(i float64) {}

		_1212_47 := "444"

		_1213_12 := func(i float64) {}

		_1213_47 := "445"

		_1214_12 := func(i float64) {}

		_1214_47 := "446"

		_1215_12 := func(i float64) {}

		_1215_47 := "447"

		_1216_12 := func(i float64) {}

		_1216_47 := "448"

		_1217_12 := func(i float64) {}

		_1217_47 := "449"

		_1218_12 := func(i float64) {}

		_1218_47 := "450"

		_1219_12 := func(i float64) {}

		_1219_47 := "451"

		_1220_12 := func(i float64) {}

		_1220_47 := "452"

		_1221_12 := func(i float64) {}

		_1221_47 := "453"

		_1222_12 := func(i float64) {}

		_1222_47 := "454"

		_1223_12 := func(i float64) {}

		_1223_47 := "455"

		_1224_12 := func(i float64) {}

		_1224_47 := "456"

		_1225_12 := func(i float64) {}

		_1225_47 := "457"

		_1226_12 := func(i float64) {}

		_1226_47 := "458"

		_1227_12 := func(i float64) {}

		_1227_47 := "459"

		_1228_12 := func(i float64) {}

		_1228_47 := "460"

		_1229_12 := func(i float64) {}

		_1229_47 := "461"

		_1230_12 := func(i float64) {}

		_1230_47 := "462"

		_1231_12 := func(i float64) {}

		_1231_47 := "463"

		_1232_12 := func(i float64) {}

		_1232_47 := "464"

		_1233_12 := func(i float64) {}

		_1233_47 := "465"

		_1234_12 := func(i float64) {}

		_1234_47 := "466"

		_1235_12 := func(i float64) {}

		_1235_47 := "467"

		_1236_12 := func(i float64) {}

		_1236_47 := "468"

		_1237_12 := func(i float64) {}

		_1237_47 := "469"

		_1238_12 := func(i float64) {}

		_1238_47 := "470"

		_1239_12 := func(i float64) {}

		_1239_47 := "471"

		_1240_12 := func(i float64) {}

		_1240_47 := "472"

		_1241_12 := func(i float64) {}

		_1241_47 := "473"

		_1242_12 := func(i float64) {}

		_1242_47 := "474"

		_1243_12 := func(i float64) {}

		_1243_47 := "475"

		_1244_12 := func(i float64) {}

		_1244_47 := "476"

		_1245_12 := func(i float64) {}

		_1245_47 := "477"

		_1246_12 := func(i float64) {}

		_1246_47 := "478"

		_1247_12 := func(i float64) {}

		_1247_47 := "479"

		_1248_12 := func(i float64) {}

		_1248_47 := "480"

		_1249_12 := func(i float64) {}

		_1249_47 := "481"

		_1250_12 := func(i float64) {}

		_1250_47 := "482"

		_1251_12 := func(i float64) {}

		_1251_47 := "483"

		_1252_12 := func(i float64) {}

		_1252_47 := "484"

		_1253_12 := func(i float64) {}

		_1253_47 := "485"

		_1254_12 := func(i float64) {}

		_1254_47 := "486"

		_1255_12 := func(i float64) {}

		_1255_47 := "487"

		_1256_12 := func(i float64) {}

		_1256_47 := "488"

		_1257_12 := func(i float64) {}

		_1257_47 := "489"

		_1258_12 := func(i float64) {}

		_1258_47 := "490"

		_1259_12 := func(i float64) {}

		_1259_47 := "491"

		_1260_12 := func(i float64) {}

		_1260_47 := "492"

		_1261_12 := func(i float64) {}

		_1261_47 := "493"

		_1262_12 := func(i float64) {}

		_1262_47 := "494"

		_1263_12 := func(i float64) {}

		_1263_47 := "495"

		_1264_12 := func(i float64) {}

		_1264_47 := "496"

		_1265_12 := func(i float64) {}

		_1265_47 := "497"

		_1266_12 := func(i float64) {}

		_1266_47 := "498"

		_1267_12 := func(i float64) {}

		_1267_47 := "499"

		_1268_12 := func(i float64) {}

		_1268_47 := "500"

		_1269_12 := func(i float64) {}

		_1269_47 := "501"

		_1270_12 := func(i float64) {}

		_1270_47 := "502"

		_1271_12 := func(i float64) {}

		_1271_47 := "503"

		_1272_12 := func(i float64) {}

		_1272_47 := "504"

		_1273_12 := func(i float64) {}

		_1273_47 := "505"

		_1274_12 := func(i float64) {}

		_1274_47 := "506"

		_1275_12 := func(i float64) {}

		_1275_47 := "507"

		_1276_12 := func(i float64) {}

		_1276_47 := "508"

		_1277_12 := func(i float64) {}

		_1277_47 := "509"

		_1278_12 := func(i float64) {}

		_1278_47 := "510"

		_1279_12 := func(i float64) {}

		_1279_47 := "511"

		_1280_12 := func(i float64) {}

		_1280_47 := "512"

		_1281_12 := func(i float64) {}

		_1281_47 := "513"

		_1282_12 := func(i float64) {}

		_1282_47 := "514"

		_1283_12 := func(i float64) {}

		_1283_47 := "515"

		_1284_12 := func(i float64) {}

		_1284_47 := "516"

		_1285_12 := func(i float64) {}

		_1285_47 := "517"

		_1286_12 := func(i float64) {}

		_1286_47 := "518"

		_1287_12 := func(i float64) {}

		_1287_47 := "519"

		_1288_12 := func(i float64) {}

		_1288_47 := "520"

		_1289_12 := func(i float64) {}

		_1289_47 := "521"

		_1290_12 := func(i float64) {}

		_1290_47 := "522"

		_1291_12 := func(i float64) {}

		_1291_47 := "523"

		_1292_12 := func(i float64) {}

		_1292_47 := "524"

		_1293_12 := func(i float64) {}

		_1293_47 := "525"

		_1294_12 := func(i float64) {}

		_1294_47 := "526"

		_1295_12 := func(i float64) {}

		_1295_47 := "527"

		_1296_12 := func(i float64) {}

		_1296_47 := "528"

		_1297_12 := func(i float64) {}

		_1297_47 := "529"

		_1298_12 := func(i float64) {}

		_1298_47 := "530"

		_1299_12 := func(i float64) {}

		_1299_47 := "531"

		_1300_12 := func(i float64) {}

		_1300_47 := "532"

		_1301_12 := func(i float64) {}

		_1301_47 := "533"

		_1302_12 := func(i float64) {}

		_1302_47 := "534"

		_1303_12 := func(i float64) {}

		_1303_47 := "535"

		_1304_12 := func(i float64) {}

		_1304_47 := "536"

		_1305_12 := func(i float64) {}

		_1305_47 := "537"

		_1306_12 := func(i float64) {}

		_1306_47 := "538"

		_1307_12 := func(i float64) {}

		_1307_47 := "539"

		_1308_12 := func(i float64) {}

		_1308_47 := "540"

		_1309_12 := func(i float64) {}

		_1309_47 := "541"

		_1310_12 := func(i float64) {}

		_1310_47 := "542"

		_1311_12 := func(i float64) {}

		_1311_47 := "543"

		_1312_12 := func(i float64) {}

		_1312_47 := "544"

		_1313_12 := func(i float64) {}

		_1313_47 := "545"

		_1314_12 := func(i float64) {}

		_1314_47 := "546"

		_1315_12 := func(i float64) {}

		_1315_47 := "547"

		_1316_12 := func(i float64) {}

		_1316_47 := "548"

		_1317_12 := func(i float64) {}

		_1317_47 := "549"

		_1318_12 := func(i float64) {}

		_1318_47 := "550"

		_1319_12 := func(i float64) {}

		_1319_47 := "551"

		_1320_12 := func(i float64) {}

		_1320_47 := "552"

		_1321_12 := func(i float64) {}

		_1321_47 := "553"

		_1322_12 := func(i float64) {}

		_1322_47 := "554"

		_1323_12 := func(i float64) {}

		_1323_47 := "555"

		_1324_12 := func(i float64) {}

		_1324_47 := "556"

		_1325_12 := func(i float64) {}

		_1325_47 := "557"

		_1326_12 := func(i float64) {}

		_1326_47 := "558"

		_1327_12 := func(i float64) {}

		_1327_47 := "559"

		_1328_12 := func(i float64) {}

		_1328_47 := "560"

		_1329_12 := func(i float64) {}

		_1329_47 := "561"

		_1330_12 := func(i float64) {}

		_1330_47 := "562"

		_1331_12 := func(i float64) {}

		_1331_47 := "563"

		_1332_12 := func(i float64) {}

		_1332_47 := "564"

		_1333_12 := func(i float64) {}

		_1333_47 := "565"

		_1334_12 := func(i float64) {}

		_1334_47 := "566"

		_1335_12 := func(i float64) {}

		_1335_47 := "567"

		_1336_12 := func(i float64) {}

		_1336_47 := "568"

		_1337_12 := func(i float64) {}

		_1337_47 := "569"

		_1338_12 := func(i float64) {}

		_1338_47 := "570"

		_1339_12 := func(i float64) {}

		_1339_47 := "571"

		_1340_12 := func(i float64) {}

		_1340_47 := "572"

		_1341_12 := func(i float64) {}

		_1341_47 := "573"

		_1342_12 := func(i float64) {}

		_1342_47 := "574"

		_1343_12 := func(i float64) {}

		_1343_47 := "575"

		_1344_12 := func(i float64) {}

		_1344_47 := "576"

		_1345_12 := func(i float64) {}

		_1345_47 := "577"

		_1346_12 := func(i float64) {}

		_1346_47 := "578"

		_1347_12 := func(i float64) {}

		_1347_47 := "579"

		_1348_12 := func(i float64) {}

		_1348_47 := "580"

		_1349_12 := func(i float64) {}

		_1349_47 := "581"

		_1350_12 := func(i float64) {}

		_1350_47 := "582"

		_1351_12 := func(i float64) {}

		_1351_47 := "583"

		_1352_12 := func(i float64) {}

		_1352_47 := "584"

		_1353_12 := func(i float64) {}

		_1353_47 := "585"

		_1354_12 := func(i float64) {}

		_1354_47 := "586"

		_1355_12 := func(i float64) {}

		_1355_47 := "587"

		_1356_12 := func(i float64) {}

		_1356_47 := "588"

		_1357_12 := func(i float64) {}

		_1357_47 := "589"

		_1358_12 := func(i float64) {}

		_1358_47 := "590"

		_1359_12 := func(i float64) {}

		_1359_47 := "591"

		_1360_12 := func(i float64) {}

		_1360_47 := "592"

		_1361_12 := func(i float64) {}

		_1361_47 := "593"

		_1362_12 := func(i float64) {}

		_1362_47 := "594"

		_1363_12 := func(i float64) {}

		_1363_47 := "595"

		_1364_12 := func(i float64) {}

		_1364_47 := "596"

		_1365_12 := func(i float64) {}

		_1365_47 := "597"

		_1366_12 := func(i float64) {}

		_1366_47 := "598"

		_1367_12 := func(i float64) {}

		_1367_47 := "599"

		_1368_12 := func(i float64) {}

		_1368_47 := "600"

		_1369_12 := func(i float64) {}

		_1369_47 := "601"

		_1370_12 := func(i float64) {}

		_1370_47 := "602"

		_1371_12 := func(i float64) {}

		_1371_47 := "603"

		_1372_12 := func(i float64) {}

		_1372_47 := "604"

		_1373_12 := func(i float64) {}

		_1373_47 := "605"

		_1374_12 := func(i float64) {}

		_1374_47 := "606"

		_1375_12 := func(i float64) {}

		_1375_47 := "607"

		_1376_12 := func(i float64) {}

		_1376_47 := "608"

		_1377_12 := func(i float64) {}

		_1377_47 := "609"

		_1378_12 := func(i float64) {}

		_1378_47 := "610"

		_1379_12 := func(i float64) {}

		_1379_47 := "611"

		_1380_12 := func(i float64) {}

		_1380_47 := "612"

		_1381_12 := func(i float64) {}

		_1381_47 := "613"

		_1382_12 := func(i float64) {}

		_1382_47 := "614"

		_1383_12 := func(i float64) {}

		_1383_47 := "615"

		_1384_12 := func(i float64) {}

		_1384_47 := "616"

		_1385_12 := func(i float64) {}

		_1385_47 := "617"

		_1386_12 := func(i float64) {}

		_1386_47 := "618"

		_1387_12 := func(i float64) {}

		_1387_47 := "619"

		_1388_12 := func(i float64) {}

		_1388_47 := "620"

		_1389_12 := func(i float64) {}

		_1389_47 := "621"

		_1390_12 := func(i float64) {}

		_1390_47 := "622"

		_1391_12 := func(i float64) {}

		_1391_47 := "623"

		_1392_12 := func(i float64) {}

		_1392_47 := "624"

		_1393_12 := func(i float64) {}

		_1393_47 := "625"

		_1394_12 := func(i float64) {}

		_1394_47 := "626"

		_1395_12 := func(i float64) {}

		_1395_47 := "627"

		_1396_12 := func(i float64) {}

		_1396_47 := "628"

		_1397_12 := func(i float64) {}

		_1397_47 := "629"

		_1398_12 := func(i float64) {}

		_1398_47 := "630"

		_1399_12 := func(i float64) {}

		_1399_47 := "631"

		_1400_12 := func(i float64) {}

		_1400_47 := "632"

		_1401_12 := func(i float64) {}

		_1401_47 := "633"

		_1402_12 := func(i float64) {}

		_1402_47 := "634"

		_1403_12 := func(i float64) {}

		_1403_47 := "635"

		_1404_12 := func(i float64) {}

		_1404_47 := "636"

		_1405_12 := func(i float64) {}

		_1405_47 := "637"

		_1406_12 := func(i float64) {}

		_1406_47 := "638"

		_1407_12 := func(i float64) {}

		_1407_47 := "639"

		_1408_12 := func(i float64) {}

		_1408_47 := "640"

		_1409_12 := func(i float64) {}

		_1409_47 := "641"

		_1410_12 := func(i float64) {}

		_1410_47 := "642"

		_1411_12 := func(i float64) {}

		_1411_47 := "643"

		_1412_12 := func(i float64) {}

		_1412_47 := "644"

		_1413_12 := func(i float64) {}

		_1413_47 := "645"

		_1414_12 := func(i float64) {}

		_1414_47 := "646"

		_1415_12 := func(i float64) {}

		_1415_47 := "647"

		_1416_12 := func(i float64) {}

		_1416_47 := "648"

		_1417_12 := func(i float64) {}

		_1417_47 := "649"

		_1418_12 := func(i float64) {}

		_1418_47 := "650"

		_1419_12 := func(i float64) {}

		_1419_47 := "651"

		_1420_12 := func(i float64) {}

		_1420_47 := "652"

		_1421_12 := func(i float64) {}

		_1421_47 := "653"

		_1422_12 := func(i float64) {}

		_1422_47 := "654"

		_1423_12 := func(i float64) {}

		_1423_47 := "655"

		_1424_12 := func(i float64) {}

		_1424_47 := "656"

		_1425_12 := func(i float64) {}

		_1425_47 := "657"

		_1426_12 := func(i float64) {}

		_1426_47 := "658"

		_1427_12 := func(i float64) {}

		_1427_47 := "659"

		_1428_12 := func(i float64) {}

		_1428_47 := "660"

		_1429_12 := func(i float64) {}

		_1429_47 := "661"

		_1430_12 := func(i float64) {}

		_1430_47 := "662"

		_1431_12 := func(i float64) {}

		_1431_47 := "663"

		_1432_12 := func(i float64) {}

		_1432_47 := "664"

		_1433_12 := func(i float64) {}

		_1433_47 := "665"

		_1434_12 := func(i float64) {}

		_1434_47 := "666"

		_1435_12 := func(i float64) {}

		_1435_47 := "667"

		_1436_12 := func(i float64) {}

		_1436_47 := "668"

		_1437_12 := func(i float64) {}

		_1437_47 := "669"

		_1438_12 := func(i float64) {}

		_1438_47 := "670"

		_1439_12 := func(i float64) {}

		_1439_47 := "671"

		_1440_12 := func(i float64) {}

		_1440_47 := "672"

		_1441_12 := func(i float64) {}

		_1441_47 := "673"

		_1442_12 := func(i float64) {}

		_1442_47 := "674"

		_1443_12 := func(i float64) {}

		_1443_47 := "675"

		_1444_12 := func(i float64) {}

		_1444_47 := "676"

		_1445_12 := func(i float64) {}

		_1445_47 := "677"

		_1446_12 := func(i float64) {}

		_1446_47 := "678"

		_1447_12 := func(i float64) {}

		_1447_47 := "679"

		_1448_12 := func(i float64) {}

		_1448_47 := "680"

		_1449_12 := func(i float64) {}

		_1449_47 := "681"

		_1450_12 := func(i float64) {}

		_1450_47 := "682"

		_1451_12 := func(i float64) {}

		_1451_47 := "683"

		_1452_12 := func(i float64) {}

		_1452_47 := "684"

		_1453_12 := func(i float64) {}

		_1453_47 := "685"

		_1454_12 := func(i float64) {}

		_1454_47 := "686"

		_1455_12 := func(i float64) {}

		_1455_47 := "687"

		_1456_12 := func(i float64) {}

		_1456_47 := "688"

		_1457_12 := func(i float64) {}

		_1457_47 := "689"

		_1458_12 := func(i float64) {}

		_1458_47 := "690"

		_1459_12 := func(i float64) {}

		_1459_47 := "691"

		_1460_12 := func(i float64) {}

		_1460_47 := "692"

		_1461_12 := func(i float64) {}

		_1461_47 := "693"

		_1462_12 := func(i float64) {}

		_1462_47 := "694"

		_1463_12 := func(i float64) {}

		_1463_47 := "695"

		_1464_12 := func(i float64) {}

		_1464_47 := "696"

		_1465_12 := func(i float64) {}

		_1465_47 := "697"

		_1466_12 := func(i float64) {}

		_1466_47 := "698"

		_1467_12 := func(i float64) {}

		_1467_47 := "699"

		_1468_12 := func(i float64) {}

		_1468_47 := "700"

		_1469_12 := func(i float64) {}

		_1469_47 := "701"

		_1470_12 := func(i float64) {}

		_1470_47 := "702"

		_1471_12 := func(i float64) {}

		_1471_47 := "703"

		_1472_12 := func(i float64) {}

		_1472_47 := "704"

		_1473_12 := func(i float64) {}

		_1473_47 := "705"

		_1474_12 := func(i float64) {}

		_1474_47 := "706"

		_1475_12 := func(i float64) {}

		_1475_47 := "707"

		_1476_12 := func(i float64) {}

		_1476_47 := "708"

		_1477_12 := func(i float64) {}

		_1477_47 := "709"

		_1478_12 := func(i float64) {}

		_1478_47 := "710"

		_1479_12 := func(i float64) {}

		_1479_47 := "711"

		_1480_12 := func(i float64) {}

		_1480_47 := "712"

		_1481_12 := func(i float64) {}

		_1481_47 := "713"

		_1482_12 := func(i float64) {}

		_1482_47 := "714"

		_1483_12 := func(i float64) {}

		_1483_47 := "715"

		_1484_12 := func(i float64) {}

		_1484_47 := "716"

		_1485_12 := func(i float64) {}

		_1485_47 := "717"

		_1486_12 := func(i float64) {}

		_1486_47 := "718"

		_1487_12 := func(i float64) {}

		_1487_47 := "719"

		_1488_12 := func(i float64) {}

		_1488_47 := "720"

		_1489_12 := func(i float64) {}

		_1489_47 := "721"

		_1490_12 := func(i float64) {}

		_1490_47 := "722"

		_1491_12 := func(i float64) {}

		_1491_47 := "723"

		_1492_12 := func(i float64) {}

		_1492_47 := "724"

		_1493_12 := func(i float64) {}

		_1493_47 := "725"

		_1494_12 := func(i float64) {}

		_1494_47 := "726"

		_1495_12 := func(i float64) {}

		_1495_47 := "727"

		_1496_12 := func(i float64) {}

		_1496_47 := "728"

		_1497_12 := func(i float64) {}

		_1497_47 := "729"

		_1498_12 := func(i float64) {}

		_1498_47 := "730"

		_1499_12 := func(i float64) {}

		_1499_47 := "731"

		_1500_12 := func(i float64) {}

		_1500_47 := "732"

		_1501_12 := func(i float64) {}

		_1501_47 := "733"

		_1502_12 := func(i float64) {}

		_1502_47 := "734"

		_1503_12 := func(i float64) {}

		_1503_47 := "735"

		_1504_12 := func(i float64) {}

		_1504_47 := "736"

		_1505_12 := func(i float64) {}

		_1505_47 := "737"

		_1506_12 := func(i float64) {}

		_1506_47 := "738"

		_1507_12 := func(i float64) {}

		_1507_47 := "739"

		_1508_12 := func(i float64) {}

		_1508_47 := "740"

		_1509_12 := func(i float64) {}

		_1509_47 := "741"

		_1510_12 := func(i float64) {}

		_1510_47 := "742"

		_1511_12 := func(i float64) {}

		_1511_47 := "743"

		_1512_12 := func(i float64) {}

		_1512_47 := "744"

		_1513_12 := func(i float64) {}

		_1513_47 := "745"

		_1514_12 := func(i float64) {}

		_1514_47 := "746"

		_1515_12 := func(i float64) {}

		_1515_47 := "747"

		_1516_12 := func(i float64) {}

		_1516_47 := "748"

		_1517_12 := func(i float64) {}

		_1517_47 := "749"

		_1518_12 := func(i float64) {}

		_1518_47 := "750"

		_1519_12 := func(i float64) {}

		_1519_47 := "751"

		_1520_12 := func(i float64) {}

		_1520_47 := "752"

		_1521_12 := func(i float64) {}

		_1521_47 := "753"

		_1522_12 := func(i float64) {}

		_1522_47 := "754"

		_1523_12 := func(i float64) {}

		_1523_47 := "755"

		_1524_12 := func(i float64) {}

		_1524_47 := "756"

		_1525_12 := func(i float64) {}

		_1525_47 := "757"

		_1526_12 := func(i float64) {}

		_1526_47 := "758"

		_1527_12 := func(i float64) {}

		_1527_47 := "759"

		_1528_12 := func(i float64) {}

		_1528_47 := "760"

		_1529_12 := func(i float64) {}

		_1529_47 := "761"

		_1530_12 := func(i float64) {}

		_1530_47 := "762"

		_1531_12 := func(i float64) {}

		_1531_47 := "763"

		_1532_12 := func(i float64) {}

		_1532_47 := "764"

		_1533_12 := func(i float64) {}

		_1533_47 := "765"

		_1534_12 := func(i float64) {}

		_1534_47 := "766"

		_1535_12 := func(i float64) {}

		_1535_47 := "767"

		_1536_12 := func(i float64) {}

		_1536_47 := "768"

		_1537_12 := func(i float64) {}

		_1537_47 := "769"

		_1538_12 := func(i float64) {}

		_1538_47 := "770"

		_1539_12 := func(i float64) {}

		_1539_47 := "771"

		_1540_12 := func(i float64) {}

		_1540_47 := "772"

		_1541_12 := func(i float64) {}

		_1541_47 := "773"

		_1542_12 := func(i float64) {}

		_1542_47 := "774"

		_1543_12 := func(i float64) {}

		_1543_47 := "775"

		_1544_12 := func(i float64) {}

		_1544_47 := "776"

		_1545_12 := func(i float64) {}

		_1545_47 := "777"

		_1546_12 := func(i float64) {}

		_1546_47 := "778"

		_1547_12 := func(i float64) {}

		_1547_47 := "779"

		_1548_12 := func(i float64) {}

		_1548_47 := "780"

		_1549_12 := func(i float64) {}

		_1549_47 := "781"

		_1550_12 := func(i float64) {}

		_1550_47 := "782"

		_1551_12 := func(i float64) {}

		_1551_47 := "783"

		_1552_12 := func(i float64) {}

		_1552_47 := "784"

		_1553_12 := func(i float64) {}

		_1553_47 := "785"

		_1554_12 := func(i float64) {}

		_1554_47 := "786"

		_1555_12 := func(i float64) {}

		_1555_47 := "787"

		_1556_12 := func(i float64) {}

		_1556_47 := "788"

		_1557_12 := func(i float64) {}

		_1557_47 := "789"

		_1558_12 := func(i float64) {}

		_1558_47 := "790"

		_1559_12 := func(i float64) {}

		_1559_47 := "791"

		_1560_12 := func(i float64) {}

		_1560_47 := "792"

		_1561_12 := func(i float64) {}

		_1561_47 := "793"

		_1562_12 := func(i float64) {}

		_1562_47 := "794"

		_1563_12 := func(i float64) {}

		_1563_47 := "795"

		_1564_12 := func(i float64) {}

		_1564_47 := "796"

		_1565_12 := func(i float64) {}

		_1565_47 := "797"

		_1566_12 := func(i float64) {}

		_1566_47 := "798"

		_1567_12 := func(i float64) {}

		_1567_47 := "799"

		_1568_12 := func(i float64) {}

		_1568_47 := "800"

		_1569_12 := func(i float64) {}

		_1569_47 := "801"

		_1570_12 := func(i float64) {}

		_1570_47 := "802"

		_1571_12 := func(i float64) {}

		_1571_47 := "803"

		_1572_12 := func(i float64) {}

		_1572_47 := "804"

		_1573_12 := func(i float64) {}

		_1573_47 := "805"

		_1574_12 := func(i float64) {}

		_1574_47 := "806"

		_1575_12 := func(i float64) {}

		_1575_47 := "807"

		_1576_12 := func(i float64) {}

		_1576_47 := "808"

		_1577_12 := func(i float64) {}

		_1577_47 := "809"

		_1578_12 := func(i float64) {}

		_1578_47 := "810"

		_1579_12 := func(i float64) {}

		_1579_47 := "811"

		_1580_12 := func(i float64) {}

		_1580_47 := "812"

		_1581_12 := func(i float64) {}

		_1581_47 := "813"

		_1582_12 := func(i float64) {}

		_1582_47 := "814"

		_1583_12 := func(i float64) {}

		_1583_47 := "815"

		_1584_12 := func(i float64) {}

		_1584_47 := "816"

		_1585_12 := func(i float64) {}

		_1585_47 := "817"

		_1586_12 := func(i float64) {}

		_1586_47 := "818"

		_1587_12 := func(i float64) {}

		_1587_47 := "819"

		_1588_12 := func(i float64) {}

		_1588_47 := "820"

		_1589_12 := func(i float64) {}

		_1589_47 := "821"

		_1590_12 := func(i float64) {}

		_1590_47 := "822"

		_1591_12 := func(i float64) {}

		_1591_47 := "823"

		_1592_12 := func(i float64) {}

		_1592_47 := "824"

		_1593_12 := func(i float64) {}

		_1593_47 := "825"

		_1594_12 := func(i float64) {}

		_1594_47 := "826"

		_1595_12 := func(i float64) {}

		_1595_47 := "827"

		_1596_12 := func(i float64) {}

		_1596_47 := "828"

		_1597_12 := func(i float64) {}

		_1597_47 := "829"

		_1598_12 := func(i float64) {}

		_1598_47 := "830"

		_1599_12 := func(i float64) {}

		_1599_47 := "831"

		_1600_12 := func(i float64) {}

		_1600_47 := "832"

		_1601_12 := func(i float64) {}

		_1601_47 := "833"

		_1602_12 := func(i float64) {}

		_1602_47 := "834"

		_1603_12 := func(i float64) {}

		_1603_47 := "835"

		_1604_12 := func(i float64) {}

		_1604_47 := "836"

		_1605_12 := func(i float64) {}

		_1605_47 := "837"

		_1606_12 := func(i float64) {}

		_1606_47 := "838"

		_1607_12 := func(i float64) {}

		_1607_47 := "839"

		_1608_12 := func(i float64) {}

		_1608_47 := "840"

		_1609_12 := func(i float64) {}

		_1609_47 := "841"

		_1610_12 := func(i float64) {}

		_1610_47 := "842"

		_1611_12 := func(i float64) {}

		_1611_47 := "843"

		_1612_12 := func(i float64) {}

		_1612_47 := "844"

		_1613_12 := func(i float64) {}

		_1613_47 := "845"

		_1614_12 := func(i float64) {}

		_1614_47 := "846"

		_1615_12 := func(i float64) {}

		_1615_47 := "847"

		_1616_12 := func(i float64) {}

		_1616_47 := "848"

		_1617_12 := func(i float64) {}

		_1617_47 := "849"

		_1618_12 := func(i float64) {}

		_1618_47 := "850"

		_1619_12 := func(i float64) {}

		_1619_47 := "851"

		_1620_12 := func(i float64) {}

		_1620_47 := "852"

		_1621_12 := func(i float64) {}

		_1621_47 := "853"

		_1622_12 := func(i float64) {}

		_1622_47 := "854"

		_1623_12 := func(i float64) {}

		_1623_47 := "855"

		_1624_12 := func(i float64) {}

		_1624_47 := "856"

		_1625_12 := func(i float64) {}

		_1625_47 := "857"

		_1626_12 := func(i float64) {}

		_1626_47 := "858"

		_1627_12 := func(i float64) {}

		_1627_47 := "859"

		_1628_12 := func(i float64) {}

		_1628_47 := "860"

		_1629_12 := func(i float64) {}

		_1629_47 := "861"

		_1630_12 := func(i float64) {}

		_1630_47 := "862"

		_1631_12 := func(i float64) {}

		_1631_47 := "863"

		_1632_12 := func(i float64) {}

		_1632_47 := "864"

		_1633_12 := func(i float64) {}

		_1633_47 := "865"

		_1634_12 := func(i float64) {}

		_1634_47 := "866"

		_1635_12 := func(i float64) {}

		_1635_47 := "867"

		_1636_12 := func(i float64) {}

		_1636_47 := "868"

		_1637_12 := func(i float64) {}

		_1637_47 := "869"

		_1638_12 := func(i float64) {}

		_1638_47 := "870"

		_1639_12 := func(i float64) {}

		_1639_47 := "871"

		_1640_12 := func(i float64) {}

		_1640_47 := "872"

		_1641_12 := func(i float64) {}

		_1641_47 := "873"

		_1642_12 := func(i float64) {}

		_1642_47 := "874"

		_1643_12 := func(i float64) {}

		_1643_47 := "875"

		_1644_12 := func(i float64) {}

		_1644_47 := "876"

		_1645_12 := func(i float64) {}

		_1645_47 := "877"

		_1646_12 := func(i float64) {}

		_1646_47 := "878"

		_1647_12 := func(i float64) {}

		_1647_47 := "879"

		_1648_12 := func(i float64) {}

		_1648_47 := "880"

		_1649_12 := func(i float64) {}

		_1649_47 := "881"

		_1650_12 := func(i float64) {}

		_1650_47 := "882"

		_1651_12 := func(i float64) {}

		_1651_47 := "883"

		_1652_12 := func(i float64) {}

		_1652_47 := "884"

		_1653_12 := func(i float64) {}

		_1653_47 := "885"

		_1654_12 := func(i float64) {}

		_1654_47 := "886"

		_1655_12 := func(i float64) {}

		_1655_47 := "887"

		_1656_12 := func(i float64) {}

		_1656_47 := "888"

		_1657_12 := func(i float64) {}

		_1657_47 := "889"

		_1658_12 := func(i float64) {}

		_1658_47 := "890"

		_1659_12 := func(i float64) {}

		_1659_47 := "891"

		_1660_12 := func(i float64) {}

		_1660_47 := "892"

		_1661_12 := func(i float64) {}

		_1661_47 := "893"

		_1662_12 := func(i float64) {}

		_1662_47 := "894"

		_1663_12 := func(i float64) {}

		_1663_47 := "895"

		_1664_12 := func(i float64) {}

		_1664_47 := "896"

		_1665_12 := func(i float64) {}

		_1665_47 := "897"

		_1666_12 := func(i float64) {}

		_1666_47 := "898"

		_1667_12 := func(i float64) {}

		_1667_47 := "899"

		_1668_12 := func(i float64) {}

		_1668_47 := "900"

		_1669_12 := func(i float64) {}

		_1669_47 := "901"

		_1670_12 := func(i float64) {}

		_1670_47 := "902"

		_1671_12 := func(i float64) {}

		_1671_47 := "903"

		_1672_12 := func(i float64) {}

		_1672_47 := "904"

		_1673_12 := func(i float64) {}

		_1673_47 := "905"

		_1674_12 := func(i float64) {}

		_1674_47 := "906"

		_1675_12 := func(i float64) {}

		_1675_47 := "907"

		_1676_12 := func(i float64) {}

		_1676_47 := "908"

		_1677_12 := func(i float64) {}

		_1677_47 := "909"

		_1678_12 := func(i float64) {}

		_1678_47 := "910"

		_1679_12 := func(i float64) {}

		_1679_47 := "911"

		_1680_12 := func(i float64) {}

		_1680_47 := "912"

		_1681_12 := func(i float64) {}

		_1681_47 := "913"

		_1682_12 := func(i float64) {}

		_1682_47 := "914"

		_1683_12 := func(i float64) {}

		_1683_47 := "915"

		_1684_12 := func(i float64) {}

		_1684_47 := "916"

		_1685_12 := func(i float64) {}

		_1685_47 := "917"

		_1686_12 := func(i float64) {}

		_1686_47 := "918"

		_1687_12 := func(i float64) {}

		_1687_47 := "919"

		_1688_12 := func(i float64) {}

		_1688_47 := "920"

		_1689_12 := func(i float64) {}

		_1689_47 := "921"

		_1690_12 := func(i float64) {}

		_1690_47 := "922"

		_1691_12 := func(i float64) {}

		_1691_47 := "923"

		_1692_12 := func(i float64) {}

		_1692_47 := "924"

		_1693_12 := func(i float64) {}

		_1693_47 := "925"

		_1694_12 := func(i float64) {}

		_1694_47 := "926"

		_1695_12 := func(i float64) {}

		_1695_47 := "927"

		_1696_12 := func(i float64) {}

		_1696_47 := "928"

		_1697_12 := func(i float64) {}

		_1697_47 := "929"

		_1698_12 := func(i float64) {}

		_1698_47 := "930"

		_1699_12 := func(i float64) {}

		_1699_47 := "931"

		_1700_12 := func(i float64) {}

		_1700_47 := "932"

		_1701_12 := func(i float64) {}

		_1701_47 := "933"

		_1702_12 := func(i float64) {}

		_1702_47 := "934"

		_1703_12 := func(i float64) {}

		_1703_47 := "935"

		_1704_12 := func(i float64) {}

		_1704_47 := "936"

		_1705_12 := func(i float64) {}

		_1705_47 := "937"

		_1706_12 := func(i float64) {}

		_1706_47 := "938"

		_1707_12 := func(i float64) {}

		_1707_47 := "939"

		_1708_12 := func(i float64) {}

		_1708_47 := "940"

		_1709_12 := func(i float64) {}

		_1709_47 := "941"

		_1710_12 := func(i float64) {}

		_1710_47 := "942"

		_1711_12 := func(i float64) {}

		_1711_47 := "943"

		_1712_12 := func(i float64) {}

		_1712_47 := "944"

		_1713_12 := func(i float64) {}

		_1713_47 := "945"

		_1714_12 := func(i float64) {}

		_1714_47 := "946"

		_1715_12 := func(i float64) {}

		_1715_47 := "947"

		_1716_12 := func(i float64) {}

		_1716_47 := "948"

		_1717_12 := func(i float64) {}

		_1717_47 := "949"

		_1718_12 := func(i float64) {}

		_1718_47 := "950"

		_1719_12 := func(i float64) {}

		_1719_47 := "951"

		_1720_12 := func(i float64) {}

		_1720_47 := "952"

		_1721_12 := func(i float64) {}

		_1721_47 := "953"

		_1722_12 := func(i float64) {}

		_1722_47 := "954"

		_1723_12 := func(i float64) {}

		_1723_47 := "955"

		_1724_12 := func(i float64) {}

		_1724_47 := "956"

		_1725_12 := func(i float64) {}

		_1725_47 := "957"

		_1726_12 := func(i float64) {}

		_1726_47 := "958"

		_1727_12 := func(i float64) {}

		_1727_47 := "959"

		_1728_12 := func(i float64) {}

		_1728_47 := "960"

		_1729_12 := func(i float64) {}

		_1729_47 := "961"

		_1730_12 := func(i float64) {}

		_1730_47 := "962"

		_1731_12 := func(i float64) {}

		_1731_47 := "963"

		_1732_12 := func(i float64) {}

		_1732_47 := "964"

		_1733_12 := func(i float64) {}

		_1733_47 := "965"

		_1734_12 := func(i float64) {}

		_1734_47 := "966"

		_1735_12 := func(i float64) {}

		_1735_47 := "967"

		_1736_12 := func(i float64) {}

		_1736_47 := "968"

		_1737_12 := func(i float64) {}

		_1737_47 := "969"

		_1738_12 := func(i float64) {}

		_1738_47 := "970"

		_1739_12 := func(i float64) {}

		_1739_47 := "971"

		_1740_12 := func(i float64) {}

		_1740_47 := "972"

		_1741_12 := func(i float64) {}

		_1741_47 := "973"

		_1742_12 := func(i float64) {}

		_1742_47 := "974"

		_1743_12 := func(i float64) {}

		_1743_47 := "975"

		_1744_12 := func(i float64) {}

		_1744_47 := "976"

		_1745_12 := func(i float64) {}

		_1745_47 := "977"

		_1746_12 := func(i float64) {}

		_1746_47 := "978"

		_1747_12 := func(i float64) {}

		_1747_47 := "979"

		_1748_12 := func(i float64) {}

		_1748_47 := "980"

		_1749_12 := func(i float64) {}

		_1749_47 := "981"

		_1750_12 := func(i float64) {}

		_1750_47 := "982"

		_1751_12 := func(i float64) {}

		_1751_47 := "983"

		_1752_12 := func(i float64) {}

		_1752_47 := "984"

		_1753_12 := func(i float64) {}

		_1753_47 := "985"

		_1754_12 := func(i float64) {}

		_1754_47 := "986"

		_1755_12 := func(i float64) {}

		_1755_47 := "987"

		_1756_12 := func(i float64) {}

		_1756_47 := "988"

		_1757_12 := func(i float64) {}

		_1757_47 := "989"

		_1758_12 := func(i float64) {}

		_1758_47 := "990"

		_1759_12 := func(i float64) {}

		_1759_47 := "991"

		_1760_12 := func(i float64) {}

		_1760_47 := "992"

		_1761_12 := func(i float64) {}

		_1761_47 := "993"

		_1762_12 := func(i float64) {}

		_1762_47 := "994"

		_1763_12 := func(i float64) {}

		_1763_47 := "995"

		_1764_12 := func(i float64) {}

		_1764_47 := "996"

		_1765_12 := func(i float64) {}

		_1765_47 := "997"

		_1766_12 := func(i float64) {}

		_1766_47 := "998"

		_1767_12 := func(i float64) {}

		_1767_47 := "999"
		ctx := _760_3
		emitter := cff.EmitterStack(_762_19, _763_19)

		var (
			flowInfo = &cff.FlowInfo{
				Name:   _761_22,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   759,
				Column: 2,
			}
			flowEmitter = emitter.FlowInit(flowInfo)

			schedInfo = &cff.SchedulerInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			}

			// possibly unused
			_ = flowInfo
		)

		startTime := time.Now()
		defer func() { flowEmitter.FlowDone(ctx, time.Since(startTime)) }()

		schedEmitter := emitter.SchedulerInit(schedInfo)

		sched := cff.BeginFlow(
			cff.SchedulerParams{
				Emitter: schedEmitter,
			},
		)

		var tasks []*struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		}
		defer func() {
			for _, t := range tasks {
				if !t.ran.Load() {
					t.emitter.TaskSkipped(ctx, err)
				}
			}
		}()

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:766:4
		var (
			v3 float64
		)
		task614 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task614.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _767_19,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   766,
				Column: 4,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task614.run = func(ctx context.Context) (err error) {
			taskEmitter := task614.emitter
			startTime := time.Now()
			defer func() {
				if task614.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task614.ran.Store(true)

			v3 = _766_4()

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task614.job = sched.Enqueue(ctx, cff.Job{
			Run: task614.run,
		})
		tasks = append(tasks, task614)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:769:12
		task615 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task615.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _769_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   769,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task615.run = func(ctx context.Context) (err error) {
			taskEmitter := task615.emitter
			startTime := time.Now()
			defer func() {
				if task615.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task615.ran.Store(true)

			_769_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task615.job = sched.Enqueue(ctx, cff.Job{
			Run: task615.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task615)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:770:12
		task616 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task616.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _770_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   770,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task616.run = func(ctx context.Context) (err error) {
			taskEmitter := task616.emitter
			startTime := time.Now()
			defer func() {
				if task616.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task616.ran.Store(true)

			_770_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task616.job = sched.Enqueue(ctx, cff.Job{
			Run: task616.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task616)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:771:12
		task617 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task617.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _771_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   771,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task617.run = func(ctx context.Context) (err error) {
			taskEmitter := task617.emitter
			startTime := time.Now()
			defer func() {
				if task617.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task617.ran.Store(true)

			_771_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task617.job = sched.Enqueue(ctx, cff.Job{
			Run: task617.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task617)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:772:12
		task618 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task618.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _772_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   772,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task618.run = func(ctx context.Context) (err error) {
			taskEmitter := task618.emitter
			startTime := time.Now()
			defer func() {
				if task618.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task618.ran.Store(true)

			_772_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task618.job = sched.Enqueue(ctx, cff.Job{
			Run: task618.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task618)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:773:12
		task619 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task619.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _773_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   773,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task619.run = func(ctx context.Context) (err error) {
			taskEmitter := task619.emitter
			startTime := time.Now()
			defer func() {
				if task619.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task619.ran.Store(true)

			_773_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task619.job = sched.Enqueue(ctx, cff.Job{
			Run: task619.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task619)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:774:12
		task620 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task620.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _774_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   774,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task620.run = func(ctx context.Context) (err error) {
			taskEmitter := task620.emitter
			startTime := time.Now()
			defer func() {
				if task620.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task620.ran.Store(true)

			_774_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task620.job = sched.Enqueue(ctx, cff.Job{
			Run: task620.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task620)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:775:12
		task621 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task621.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _775_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   775,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task621.run = func(ctx context.Context) (err error) {
			taskEmitter := task621.emitter
			startTime := time.Now()
			defer func() {
				if task621.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task621.ran.Store(true)

			_775_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task621.job = sched.Enqueue(ctx, cff.Job{
			Run: task621.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task621)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:776:12
		task622 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task622.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _776_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   776,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task622.run = func(ctx context.Context) (err error) {
			taskEmitter := task622.emitter
			startTime := time.Now()
			defer func() {
				if task622.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task622.ran.Store(true)

			_776_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task622.job = sched.Enqueue(ctx, cff.Job{
			Run: task622.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task622)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:777:12
		task623 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task623.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _777_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   777,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task623.run = func(ctx context.Context) (err error) {
			taskEmitter := task623.emitter
			startTime := time.Now()
			defer func() {
				if task623.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task623.ran.Store(true)

			_777_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task623.job = sched.Enqueue(ctx, cff.Job{
			Run: task623.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task623)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:778:12
		task624 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task624.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _778_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   778,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task624.run = func(ctx context.Context) (err error) {
			taskEmitter := task624.emitter
			startTime := time.Now()
			defer func() {
				if task624.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task624.ran.Store(true)

			_778_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task624.job = sched.Enqueue(ctx, cff.Job{
			Run: task624.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task624)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:779:12
		task625 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task625.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _779_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   779,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task625.run = func(ctx context.Context) (err error) {
			taskEmitter := task625.emitter
			startTime := time.Now()
			defer func() {
				if task625.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task625.ran.Store(true)

			_779_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task625.job = sched.Enqueue(ctx, cff.Job{
			Run: task625.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task625)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:780:12
		task626 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task626.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _780_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   780,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task626.run = func(ctx context.Context) (err error) {
			taskEmitter := task626.emitter
			startTime := time.Now()
			defer func() {
				if task626.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task626.ran.Store(true)

			_780_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task626.job = sched.Enqueue(ctx, cff.Job{
			Run: task626.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task626)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:781:12
		task627 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task627.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _781_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   781,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task627.run = func(ctx context.Context) (err error) {
			taskEmitter := task627.emitter
			startTime := time.Now()
			defer func() {
				if task627.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task627.ran.Store(true)

			_781_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task627.job = sched.Enqueue(ctx, cff.Job{
			Run: task627.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task627)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:782:12
		task628 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task628.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _782_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   782,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task628.run = func(ctx context.Context) (err error) {
			taskEmitter := task628.emitter
			startTime := time.Now()
			defer func() {
				if task628.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task628.ran.Store(true)

			_782_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task628.job = sched.Enqueue(ctx, cff.Job{
			Run: task628.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task628)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:783:12
		task629 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task629.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _783_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   783,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task629.run = func(ctx context.Context) (err error) {
			taskEmitter := task629.emitter
			startTime := time.Now()
			defer func() {
				if task629.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task629.ran.Store(true)

			_783_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task629.job = sched.Enqueue(ctx, cff.Job{
			Run: task629.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task629)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:784:12
		task630 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task630.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _784_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   784,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task630.run = func(ctx context.Context) (err error) {
			taskEmitter := task630.emitter
			startTime := time.Now()
			defer func() {
				if task630.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task630.ran.Store(true)

			_784_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task630.job = sched.Enqueue(ctx, cff.Job{
			Run: task630.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task630)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:785:12
		task631 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task631.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _785_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   785,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task631.run = func(ctx context.Context) (err error) {
			taskEmitter := task631.emitter
			startTime := time.Now()
			defer func() {
				if task631.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task631.ran.Store(true)

			_785_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task631.job = sched.Enqueue(ctx, cff.Job{
			Run: task631.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task631)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:786:12
		task632 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task632.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _786_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   786,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task632.run = func(ctx context.Context) (err error) {
			taskEmitter := task632.emitter
			startTime := time.Now()
			defer func() {
				if task632.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task632.ran.Store(true)

			_786_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task632.job = sched.Enqueue(ctx, cff.Job{
			Run: task632.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task632)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:787:12
		task633 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task633.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _787_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   787,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task633.run = func(ctx context.Context) (err error) {
			taskEmitter := task633.emitter
			startTime := time.Now()
			defer func() {
				if task633.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task633.ran.Store(true)

			_787_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task633.job = sched.Enqueue(ctx, cff.Job{
			Run: task633.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task633)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:788:12
		task634 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task634.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _788_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   788,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task634.run = func(ctx context.Context) (err error) {
			taskEmitter := task634.emitter
			startTime := time.Now()
			defer func() {
				if task634.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task634.ran.Store(true)

			_788_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task634.job = sched.Enqueue(ctx, cff.Job{
			Run: task634.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task634)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:789:12
		task635 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task635.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _789_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   789,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task635.run = func(ctx context.Context) (err error) {
			taskEmitter := task635.emitter
			startTime := time.Now()
			defer func() {
				if task635.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task635.ran.Store(true)

			_789_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task635.job = sched.Enqueue(ctx, cff.Job{
			Run: task635.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task635)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:790:12
		task636 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task636.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _790_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   790,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task636.run = func(ctx context.Context) (err error) {
			taskEmitter := task636.emitter
			startTime := time.Now()
			defer func() {
				if task636.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task636.ran.Store(true)

			_790_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task636.job = sched.Enqueue(ctx, cff.Job{
			Run: task636.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task636)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:791:12
		task637 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task637.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _791_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   791,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task637.run = func(ctx context.Context) (err error) {
			taskEmitter := task637.emitter
			startTime := time.Now()
			defer func() {
				if task637.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task637.ran.Store(true)

			_791_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task637.job = sched.Enqueue(ctx, cff.Job{
			Run: task637.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task637)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:792:12
		task638 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task638.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _792_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   792,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task638.run = func(ctx context.Context) (err error) {
			taskEmitter := task638.emitter
			startTime := time.Now()
			defer func() {
				if task638.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task638.ran.Store(true)

			_792_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task638.job = sched.Enqueue(ctx, cff.Job{
			Run: task638.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task638)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:793:12
		task639 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task639.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _793_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   793,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task639.run = func(ctx context.Context) (err error) {
			taskEmitter := task639.emitter
			startTime := time.Now()
			defer func() {
				if task639.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task639.ran.Store(true)

			_793_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task639.job = sched.Enqueue(ctx, cff.Job{
			Run: task639.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task639)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:794:12
		task640 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task640.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _794_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   794,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task640.run = func(ctx context.Context) (err error) {
			taskEmitter := task640.emitter
			startTime := time.Now()
			defer func() {
				if task640.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task640.ran.Store(true)

			_794_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task640.job = sched.Enqueue(ctx, cff.Job{
			Run: task640.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task640)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:795:12
		task641 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task641.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _795_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   795,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task641.run = func(ctx context.Context) (err error) {
			taskEmitter := task641.emitter
			startTime := time.Now()
			defer func() {
				if task641.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task641.ran.Store(true)

			_795_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task641.job = sched.Enqueue(ctx, cff.Job{
			Run: task641.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task641)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:796:12
		task642 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task642.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _796_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   796,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task642.run = func(ctx context.Context) (err error) {
			taskEmitter := task642.emitter
			startTime := time.Now()
			defer func() {
				if task642.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task642.ran.Store(true)

			_796_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task642.job = sched.Enqueue(ctx, cff.Job{
			Run: task642.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task642)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:797:12
		task643 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task643.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _797_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   797,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task643.run = func(ctx context.Context) (err error) {
			taskEmitter := task643.emitter
			startTime := time.Now()
			defer func() {
				if task643.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task643.ran.Store(true)

			_797_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task643.job = sched.Enqueue(ctx, cff.Job{
			Run: task643.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task643)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:798:12
		task644 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task644.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _798_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   798,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task644.run = func(ctx context.Context) (err error) {
			taskEmitter := task644.emitter
			startTime := time.Now()
			defer func() {
				if task644.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task644.ran.Store(true)

			_798_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task644.job = sched.Enqueue(ctx, cff.Job{
			Run: task644.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task644)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:799:12
		task645 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task645.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _799_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   799,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task645.run = func(ctx context.Context) (err error) {
			taskEmitter := task645.emitter
			startTime := time.Now()
			defer func() {
				if task645.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task645.ran.Store(true)

			_799_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task645.job = sched.Enqueue(ctx, cff.Job{
			Run: task645.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task645)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:800:12
		task646 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task646.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _800_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   800,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task646.run = func(ctx context.Context) (err error) {
			taskEmitter := task646.emitter
			startTime := time.Now()
			defer func() {
				if task646.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task646.ran.Store(true)

			_800_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task646.job = sched.Enqueue(ctx, cff.Job{
			Run: task646.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task646)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:801:12
		task647 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task647.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _801_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   801,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task647.run = func(ctx context.Context) (err error) {
			taskEmitter := task647.emitter
			startTime := time.Now()
			defer func() {
				if task647.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task647.ran.Store(true)

			_801_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task647.job = sched.Enqueue(ctx, cff.Job{
			Run: task647.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task647)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:802:12
		task648 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task648.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _802_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   802,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task648.run = func(ctx context.Context) (err error) {
			taskEmitter := task648.emitter
			startTime := time.Now()
			defer func() {
				if task648.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task648.ran.Store(true)

			_802_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task648.job = sched.Enqueue(ctx, cff.Job{
			Run: task648.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task648)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:803:12
		task649 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task649.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _803_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   803,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task649.run = func(ctx context.Context) (err error) {
			taskEmitter := task649.emitter
			startTime := time.Now()
			defer func() {
				if task649.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task649.ran.Store(true)

			_803_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task649.job = sched.Enqueue(ctx, cff.Job{
			Run: task649.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task649)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:804:12
		task650 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task650.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _804_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   804,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task650.run = func(ctx context.Context) (err error) {
			taskEmitter := task650.emitter
			startTime := time.Now()
			defer func() {
				if task650.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task650.ran.Store(true)

			_804_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task650.job = sched.Enqueue(ctx, cff.Job{
			Run: task650.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task650)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:805:12
		task651 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task651.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _805_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   805,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task651.run = func(ctx context.Context) (err error) {
			taskEmitter := task651.emitter
			startTime := time.Now()
			defer func() {
				if task651.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task651.ran.Store(true)

			_805_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task651.job = sched.Enqueue(ctx, cff.Job{
			Run: task651.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task651)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:806:12
		task652 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task652.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _806_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   806,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task652.run = func(ctx context.Context) (err error) {
			taskEmitter := task652.emitter
			startTime := time.Now()
			defer func() {
				if task652.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task652.ran.Store(true)

			_806_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task652.job = sched.Enqueue(ctx, cff.Job{
			Run: task652.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task652)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:807:12
		task653 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task653.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _807_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   807,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task653.run = func(ctx context.Context) (err error) {
			taskEmitter := task653.emitter
			startTime := time.Now()
			defer func() {
				if task653.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task653.ran.Store(true)

			_807_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task653.job = sched.Enqueue(ctx, cff.Job{
			Run: task653.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task653)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:808:12
		task654 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task654.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _808_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   808,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task654.run = func(ctx context.Context) (err error) {
			taskEmitter := task654.emitter
			startTime := time.Now()
			defer func() {
				if task654.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task654.ran.Store(true)

			_808_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task654.job = sched.Enqueue(ctx, cff.Job{
			Run: task654.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task654)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:809:12
		task655 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task655.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _809_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   809,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task655.run = func(ctx context.Context) (err error) {
			taskEmitter := task655.emitter
			startTime := time.Now()
			defer func() {
				if task655.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task655.ran.Store(true)

			_809_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task655.job = sched.Enqueue(ctx, cff.Job{
			Run: task655.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task655)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:810:12
		task656 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task656.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _810_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   810,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task656.run = func(ctx context.Context) (err error) {
			taskEmitter := task656.emitter
			startTime := time.Now()
			defer func() {
				if task656.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task656.ran.Store(true)

			_810_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task656.job = sched.Enqueue(ctx, cff.Job{
			Run: task656.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task656)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:811:12
		task657 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task657.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _811_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   811,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task657.run = func(ctx context.Context) (err error) {
			taskEmitter := task657.emitter
			startTime := time.Now()
			defer func() {
				if task657.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task657.ran.Store(true)

			_811_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task657.job = sched.Enqueue(ctx, cff.Job{
			Run: task657.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task657)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:812:12
		task658 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task658.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _812_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   812,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task658.run = func(ctx context.Context) (err error) {
			taskEmitter := task658.emitter
			startTime := time.Now()
			defer func() {
				if task658.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task658.ran.Store(true)

			_812_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task658.job = sched.Enqueue(ctx, cff.Job{
			Run: task658.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task658)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:813:12
		task659 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task659.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _813_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   813,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task659.run = func(ctx context.Context) (err error) {
			taskEmitter := task659.emitter
			startTime := time.Now()
			defer func() {
				if task659.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task659.ran.Store(true)

			_813_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task659.job = sched.Enqueue(ctx, cff.Job{
			Run: task659.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task659)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:814:12
		task660 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task660.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _814_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   814,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task660.run = func(ctx context.Context) (err error) {
			taskEmitter := task660.emitter
			startTime := time.Now()
			defer func() {
				if task660.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task660.ran.Store(true)

			_814_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task660.job = sched.Enqueue(ctx, cff.Job{
			Run: task660.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task660)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:815:12
		task661 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task661.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _815_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   815,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task661.run = func(ctx context.Context) (err error) {
			taskEmitter := task661.emitter
			startTime := time.Now()
			defer func() {
				if task661.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task661.ran.Store(true)

			_815_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task661.job = sched.Enqueue(ctx, cff.Job{
			Run: task661.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task661)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:816:12
		task662 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task662.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _816_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   816,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task662.run = func(ctx context.Context) (err error) {
			taskEmitter := task662.emitter
			startTime := time.Now()
			defer func() {
				if task662.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task662.ran.Store(true)

			_816_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task662.job = sched.Enqueue(ctx, cff.Job{
			Run: task662.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task662)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:817:12
		task663 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task663.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _817_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   817,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task663.run = func(ctx context.Context) (err error) {
			taskEmitter := task663.emitter
			startTime := time.Now()
			defer func() {
				if task663.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task663.ran.Store(true)

			_817_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task663.job = sched.Enqueue(ctx, cff.Job{
			Run: task663.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task663)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:818:12
		task664 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task664.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _818_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   818,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task664.run = func(ctx context.Context) (err error) {
			taskEmitter := task664.emitter
			startTime := time.Now()
			defer func() {
				if task664.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task664.ran.Store(true)

			_818_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task664.job = sched.Enqueue(ctx, cff.Job{
			Run: task664.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task664)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:819:12
		task665 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task665.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _819_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   819,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task665.run = func(ctx context.Context) (err error) {
			taskEmitter := task665.emitter
			startTime := time.Now()
			defer func() {
				if task665.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task665.ran.Store(true)

			_819_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task665.job = sched.Enqueue(ctx, cff.Job{
			Run: task665.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task665)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:820:12
		task666 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task666.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _820_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   820,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task666.run = func(ctx context.Context) (err error) {
			taskEmitter := task666.emitter
			startTime := time.Now()
			defer func() {
				if task666.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task666.ran.Store(true)

			_820_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task666.job = sched.Enqueue(ctx, cff.Job{
			Run: task666.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task666)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:821:12
		task667 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task667.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _821_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   821,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task667.run = func(ctx context.Context) (err error) {
			taskEmitter := task667.emitter
			startTime := time.Now()
			defer func() {
				if task667.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task667.ran.Store(true)

			_821_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task667.job = sched.Enqueue(ctx, cff.Job{
			Run: task667.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task667)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:822:12
		task668 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task668.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _822_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   822,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task668.run = func(ctx context.Context) (err error) {
			taskEmitter := task668.emitter
			startTime := time.Now()
			defer func() {
				if task668.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task668.ran.Store(true)

			_822_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task668.job = sched.Enqueue(ctx, cff.Job{
			Run: task668.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task668)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:823:12
		task669 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task669.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _823_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   823,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task669.run = func(ctx context.Context) (err error) {
			taskEmitter := task669.emitter
			startTime := time.Now()
			defer func() {
				if task669.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task669.ran.Store(true)

			_823_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task669.job = sched.Enqueue(ctx, cff.Job{
			Run: task669.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task669)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:824:12
		task670 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task670.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _824_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   824,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task670.run = func(ctx context.Context) (err error) {
			taskEmitter := task670.emitter
			startTime := time.Now()
			defer func() {
				if task670.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task670.ran.Store(true)

			_824_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task670.job = sched.Enqueue(ctx, cff.Job{
			Run: task670.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task670)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:825:12
		task671 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task671.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _825_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   825,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task671.run = func(ctx context.Context) (err error) {
			taskEmitter := task671.emitter
			startTime := time.Now()
			defer func() {
				if task671.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task671.ran.Store(true)

			_825_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task671.job = sched.Enqueue(ctx, cff.Job{
			Run: task671.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task671)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:826:12
		task672 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task672.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _826_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   826,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task672.run = func(ctx context.Context) (err error) {
			taskEmitter := task672.emitter
			startTime := time.Now()
			defer func() {
				if task672.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task672.ran.Store(true)

			_826_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task672.job = sched.Enqueue(ctx, cff.Job{
			Run: task672.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task672)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:827:12
		task673 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task673.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _827_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   827,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task673.run = func(ctx context.Context) (err error) {
			taskEmitter := task673.emitter
			startTime := time.Now()
			defer func() {
				if task673.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task673.ran.Store(true)

			_827_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task673.job = sched.Enqueue(ctx, cff.Job{
			Run: task673.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task673)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:828:12
		task674 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task674.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _828_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   828,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task674.run = func(ctx context.Context) (err error) {
			taskEmitter := task674.emitter
			startTime := time.Now()
			defer func() {
				if task674.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task674.ran.Store(true)

			_828_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task674.job = sched.Enqueue(ctx, cff.Job{
			Run: task674.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task674)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:829:12
		task675 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task675.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _829_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   829,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task675.run = func(ctx context.Context) (err error) {
			taskEmitter := task675.emitter
			startTime := time.Now()
			defer func() {
				if task675.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task675.ran.Store(true)

			_829_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task675.job = sched.Enqueue(ctx, cff.Job{
			Run: task675.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task675)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:830:12
		task676 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task676.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _830_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   830,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task676.run = func(ctx context.Context) (err error) {
			taskEmitter := task676.emitter
			startTime := time.Now()
			defer func() {
				if task676.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task676.ran.Store(true)

			_830_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task676.job = sched.Enqueue(ctx, cff.Job{
			Run: task676.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task676)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:831:12
		task677 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task677.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _831_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   831,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task677.run = func(ctx context.Context) (err error) {
			taskEmitter := task677.emitter
			startTime := time.Now()
			defer func() {
				if task677.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task677.ran.Store(true)

			_831_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task677.job = sched.Enqueue(ctx, cff.Job{
			Run: task677.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task677)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:832:12
		task678 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task678.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _832_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   832,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task678.run = func(ctx context.Context) (err error) {
			taskEmitter := task678.emitter
			startTime := time.Now()
			defer func() {
				if task678.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task678.ran.Store(true)

			_832_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task678.job = sched.Enqueue(ctx, cff.Job{
			Run: task678.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task678)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:833:12
		task679 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task679.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _833_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   833,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task679.run = func(ctx context.Context) (err error) {
			taskEmitter := task679.emitter
			startTime := time.Now()
			defer func() {
				if task679.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task679.ran.Store(true)

			_833_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task679.job = sched.Enqueue(ctx, cff.Job{
			Run: task679.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task679)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:834:12
		task680 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task680.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _834_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   834,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task680.run = func(ctx context.Context) (err error) {
			taskEmitter := task680.emitter
			startTime := time.Now()
			defer func() {
				if task680.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task680.ran.Store(true)

			_834_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task680.job = sched.Enqueue(ctx, cff.Job{
			Run: task680.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task680)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:835:12
		task681 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task681.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _835_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   835,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task681.run = func(ctx context.Context) (err error) {
			taskEmitter := task681.emitter
			startTime := time.Now()
			defer func() {
				if task681.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task681.ran.Store(true)

			_835_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task681.job = sched.Enqueue(ctx, cff.Job{
			Run: task681.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task681)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:836:12
		task682 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task682.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _836_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   836,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task682.run = func(ctx context.Context) (err error) {
			taskEmitter := task682.emitter
			startTime := time.Now()
			defer func() {
				if task682.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task682.ran.Store(true)

			_836_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task682.job = sched.Enqueue(ctx, cff.Job{
			Run: task682.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task682)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:837:12
		task683 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task683.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _837_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   837,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task683.run = func(ctx context.Context) (err error) {
			taskEmitter := task683.emitter
			startTime := time.Now()
			defer func() {
				if task683.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task683.ran.Store(true)

			_837_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task683.job = sched.Enqueue(ctx, cff.Job{
			Run: task683.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task683)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:838:12
		task684 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task684.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _838_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   838,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task684.run = func(ctx context.Context) (err error) {
			taskEmitter := task684.emitter
			startTime := time.Now()
			defer func() {
				if task684.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task684.ran.Store(true)

			_838_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task684.job = sched.Enqueue(ctx, cff.Job{
			Run: task684.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task684)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:839:12
		task685 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task685.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _839_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   839,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task685.run = func(ctx context.Context) (err error) {
			taskEmitter := task685.emitter
			startTime := time.Now()
			defer func() {
				if task685.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task685.ran.Store(true)

			_839_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task685.job = sched.Enqueue(ctx, cff.Job{
			Run: task685.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task685)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:840:12
		task686 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task686.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _840_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   840,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task686.run = func(ctx context.Context) (err error) {
			taskEmitter := task686.emitter
			startTime := time.Now()
			defer func() {
				if task686.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task686.ran.Store(true)

			_840_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task686.job = sched.Enqueue(ctx, cff.Job{
			Run: task686.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task686)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:841:12
		task687 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task687.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _841_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   841,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task687.run = func(ctx context.Context) (err error) {
			taskEmitter := task687.emitter
			startTime := time.Now()
			defer func() {
				if task687.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task687.ran.Store(true)

			_841_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task687.job = sched.Enqueue(ctx, cff.Job{
			Run: task687.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task687)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:842:12
		task688 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task688.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _842_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   842,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task688.run = func(ctx context.Context) (err error) {
			taskEmitter := task688.emitter
			startTime := time.Now()
			defer func() {
				if task688.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task688.ran.Store(true)

			_842_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task688.job = sched.Enqueue(ctx, cff.Job{
			Run: task688.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task688)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:843:12
		task689 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task689.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _843_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   843,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task689.run = func(ctx context.Context) (err error) {
			taskEmitter := task689.emitter
			startTime := time.Now()
			defer func() {
				if task689.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task689.ran.Store(true)

			_843_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task689.job = sched.Enqueue(ctx, cff.Job{
			Run: task689.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task689)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:844:12
		task690 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task690.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _844_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   844,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task690.run = func(ctx context.Context) (err error) {
			taskEmitter := task690.emitter
			startTime := time.Now()
			defer func() {
				if task690.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task690.ran.Store(true)

			_844_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task690.job = sched.Enqueue(ctx, cff.Job{
			Run: task690.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task690)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:845:12
		task691 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task691.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _845_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   845,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task691.run = func(ctx context.Context) (err error) {
			taskEmitter := task691.emitter
			startTime := time.Now()
			defer func() {
				if task691.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task691.ran.Store(true)

			_845_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task691.job = sched.Enqueue(ctx, cff.Job{
			Run: task691.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task691)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:846:12
		task692 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task692.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _846_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   846,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task692.run = func(ctx context.Context) (err error) {
			taskEmitter := task692.emitter
			startTime := time.Now()
			defer func() {
				if task692.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task692.ran.Store(true)

			_846_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task692.job = sched.Enqueue(ctx, cff.Job{
			Run: task692.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task692)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:847:12
		task693 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task693.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _847_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   847,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task693.run = func(ctx context.Context) (err error) {
			taskEmitter := task693.emitter
			startTime := time.Now()
			defer func() {
				if task693.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task693.ran.Store(true)

			_847_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task693.job = sched.Enqueue(ctx, cff.Job{
			Run: task693.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task693)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:848:12
		task694 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task694.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _848_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   848,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task694.run = func(ctx context.Context) (err error) {
			taskEmitter := task694.emitter
			startTime := time.Now()
			defer func() {
				if task694.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task694.ran.Store(true)

			_848_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task694.job = sched.Enqueue(ctx, cff.Job{
			Run: task694.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task694)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:849:12
		task695 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task695.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _849_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   849,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task695.run = func(ctx context.Context) (err error) {
			taskEmitter := task695.emitter
			startTime := time.Now()
			defer func() {
				if task695.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task695.ran.Store(true)

			_849_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task695.job = sched.Enqueue(ctx, cff.Job{
			Run: task695.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task695)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:850:12
		task696 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task696.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _850_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   850,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task696.run = func(ctx context.Context) (err error) {
			taskEmitter := task696.emitter
			startTime := time.Now()
			defer func() {
				if task696.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task696.ran.Store(true)

			_850_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task696.job = sched.Enqueue(ctx, cff.Job{
			Run: task696.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task696)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:851:12
		task697 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task697.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _851_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   851,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task697.run = func(ctx context.Context) (err error) {
			taskEmitter := task697.emitter
			startTime := time.Now()
			defer func() {
				if task697.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task697.ran.Store(true)

			_851_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task697.job = sched.Enqueue(ctx, cff.Job{
			Run: task697.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task697)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:852:12
		task698 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task698.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _852_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   852,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task698.run = func(ctx context.Context) (err error) {
			taskEmitter := task698.emitter
			startTime := time.Now()
			defer func() {
				if task698.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task698.ran.Store(true)

			_852_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task698.job = sched.Enqueue(ctx, cff.Job{
			Run: task698.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task698)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:853:12
		task699 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task699.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _853_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   853,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task699.run = func(ctx context.Context) (err error) {
			taskEmitter := task699.emitter
			startTime := time.Now()
			defer func() {
				if task699.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task699.ran.Store(true)

			_853_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task699.job = sched.Enqueue(ctx, cff.Job{
			Run: task699.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task699)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:854:12
		task700 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task700.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _854_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   854,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task700.run = func(ctx context.Context) (err error) {
			taskEmitter := task700.emitter
			startTime := time.Now()
			defer func() {
				if task700.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task700.ran.Store(true)

			_854_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task700.job = sched.Enqueue(ctx, cff.Job{
			Run: task700.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task700)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:855:12
		task701 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task701.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _855_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   855,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task701.run = func(ctx context.Context) (err error) {
			taskEmitter := task701.emitter
			startTime := time.Now()
			defer func() {
				if task701.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task701.ran.Store(true)

			_855_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task701.job = sched.Enqueue(ctx, cff.Job{
			Run: task701.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task701)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:856:12
		task702 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task702.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _856_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   856,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task702.run = func(ctx context.Context) (err error) {
			taskEmitter := task702.emitter
			startTime := time.Now()
			defer func() {
				if task702.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task702.ran.Store(true)

			_856_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task702.job = sched.Enqueue(ctx, cff.Job{
			Run: task702.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task702)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:857:12
		task703 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task703.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _857_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   857,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task703.run = func(ctx context.Context) (err error) {
			taskEmitter := task703.emitter
			startTime := time.Now()
			defer func() {
				if task703.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task703.ran.Store(true)

			_857_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task703.job = sched.Enqueue(ctx, cff.Job{
			Run: task703.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task703)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:858:12
		task704 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task704.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _858_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   858,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task704.run = func(ctx context.Context) (err error) {
			taskEmitter := task704.emitter
			startTime := time.Now()
			defer func() {
				if task704.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task704.ran.Store(true)

			_858_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task704.job = sched.Enqueue(ctx, cff.Job{
			Run: task704.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task704)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:859:12
		task705 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task705.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _859_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   859,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task705.run = func(ctx context.Context) (err error) {
			taskEmitter := task705.emitter
			startTime := time.Now()
			defer func() {
				if task705.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task705.ran.Store(true)

			_859_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task705.job = sched.Enqueue(ctx, cff.Job{
			Run: task705.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task705)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:860:12
		task706 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task706.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _860_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   860,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task706.run = func(ctx context.Context) (err error) {
			taskEmitter := task706.emitter
			startTime := time.Now()
			defer func() {
				if task706.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task706.ran.Store(true)

			_860_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task706.job = sched.Enqueue(ctx, cff.Job{
			Run: task706.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task706)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:861:12
		task707 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task707.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _861_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   861,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task707.run = func(ctx context.Context) (err error) {
			taskEmitter := task707.emitter
			startTime := time.Now()
			defer func() {
				if task707.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task707.ran.Store(true)

			_861_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task707.job = sched.Enqueue(ctx, cff.Job{
			Run: task707.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task707)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:862:12
		task708 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task708.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _862_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   862,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task708.run = func(ctx context.Context) (err error) {
			taskEmitter := task708.emitter
			startTime := time.Now()
			defer func() {
				if task708.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task708.ran.Store(true)

			_862_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task708.job = sched.Enqueue(ctx, cff.Job{
			Run: task708.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task708)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:863:12
		task709 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task709.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _863_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   863,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task709.run = func(ctx context.Context) (err error) {
			taskEmitter := task709.emitter
			startTime := time.Now()
			defer func() {
				if task709.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task709.ran.Store(true)

			_863_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task709.job = sched.Enqueue(ctx, cff.Job{
			Run: task709.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task709)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:864:12
		task710 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task710.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _864_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   864,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task710.run = func(ctx context.Context) (err error) {
			taskEmitter := task710.emitter
			startTime := time.Now()
			defer func() {
				if task710.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task710.ran.Store(true)

			_864_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task710.job = sched.Enqueue(ctx, cff.Job{
			Run: task710.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task710)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:865:12
		task711 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task711.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _865_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   865,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task711.run = func(ctx context.Context) (err error) {
			taskEmitter := task711.emitter
			startTime := time.Now()
			defer func() {
				if task711.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task711.ran.Store(true)

			_865_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task711.job = sched.Enqueue(ctx, cff.Job{
			Run: task711.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task711)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:866:12
		task712 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task712.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _866_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   866,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task712.run = func(ctx context.Context) (err error) {
			taskEmitter := task712.emitter
			startTime := time.Now()
			defer func() {
				if task712.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task712.ran.Store(true)

			_866_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task712.job = sched.Enqueue(ctx, cff.Job{
			Run: task712.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task712)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:867:12
		task713 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task713.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _867_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   867,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task713.run = func(ctx context.Context) (err error) {
			taskEmitter := task713.emitter
			startTime := time.Now()
			defer func() {
				if task713.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task713.ran.Store(true)

			_867_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task713.job = sched.Enqueue(ctx, cff.Job{
			Run: task713.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task713)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:868:12
		task714 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task714.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _868_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   868,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task714.run = func(ctx context.Context) (err error) {
			taskEmitter := task714.emitter
			startTime := time.Now()
			defer func() {
				if task714.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task714.ran.Store(true)

			_868_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task714.job = sched.Enqueue(ctx, cff.Job{
			Run: task714.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task714)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:869:12
		task715 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task715.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _869_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   869,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task715.run = func(ctx context.Context) (err error) {
			taskEmitter := task715.emitter
			startTime := time.Now()
			defer func() {
				if task715.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task715.ran.Store(true)

			_869_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task715.job = sched.Enqueue(ctx, cff.Job{
			Run: task715.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task715)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:870:12
		task716 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task716.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _870_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   870,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task716.run = func(ctx context.Context) (err error) {
			taskEmitter := task716.emitter
			startTime := time.Now()
			defer func() {
				if task716.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task716.ran.Store(true)

			_870_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task716.job = sched.Enqueue(ctx, cff.Job{
			Run: task716.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task716)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:871:12
		task717 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task717.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _871_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   871,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task717.run = func(ctx context.Context) (err error) {
			taskEmitter := task717.emitter
			startTime := time.Now()
			defer func() {
				if task717.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task717.ran.Store(true)

			_871_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task717.job = sched.Enqueue(ctx, cff.Job{
			Run: task717.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task717)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:872:12
		task718 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task718.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _872_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   872,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task718.run = func(ctx context.Context) (err error) {
			taskEmitter := task718.emitter
			startTime := time.Now()
			defer func() {
				if task718.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task718.ran.Store(true)

			_872_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task718.job = sched.Enqueue(ctx, cff.Job{
			Run: task718.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task718)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:873:12
		task719 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task719.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _873_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   873,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task719.run = func(ctx context.Context) (err error) {
			taskEmitter := task719.emitter
			startTime := time.Now()
			defer func() {
				if task719.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task719.ran.Store(true)

			_873_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task719.job = sched.Enqueue(ctx, cff.Job{
			Run: task719.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task719)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:874:12
		task720 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task720.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _874_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   874,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task720.run = func(ctx context.Context) (err error) {
			taskEmitter := task720.emitter
			startTime := time.Now()
			defer func() {
				if task720.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task720.ran.Store(true)

			_874_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task720.job = sched.Enqueue(ctx, cff.Job{
			Run: task720.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task720)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:875:12
		task721 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task721.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _875_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   875,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task721.run = func(ctx context.Context) (err error) {
			taskEmitter := task721.emitter
			startTime := time.Now()
			defer func() {
				if task721.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task721.ran.Store(true)

			_875_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task721.job = sched.Enqueue(ctx, cff.Job{
			Run: task721.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task721)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:876:12
		task722 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task722.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _876_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   876,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task722.run = func(ctx context.Context) (err error) {
			taskEmitter := task722.emitter
			startTime := time.Now()
			defer func() {
				if task722.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task722.ran.Store(true)

			_876_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task722.job = sched.Enqueue(ctx, cff.Job{
			Run: task722.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task722)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:877:12
		task723 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task723.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _877_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   877,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task723.run = func(ctx context.Context) (err error) {
			taskEmitter := task723.emitter
			startTime := time.Now()
			defer func() {
				if task723.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task723.ran.Store(true)

			_877_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task723.job = sched.Enqueue(ctx, cff.Job{
			Run: task723.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task723)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:878:12
		task724 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task724.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _878_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   878,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task724.run = func(ctx context.Context) (err error) {
			taskEmitter := task724.emitter
			startTime := time.Now()
			defer func() {
				if task724.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task724.ran.Store(true)

			_878_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task724.job = sched.Enqueue(ctx, cff.Job{
			Run: task724.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task724)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:879:12
		task725 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task725.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _879_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   879,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task725.run = func(ctx context.Context) (err error) {
			taskEmitter := task725.emitter
			startTime := time.Now()
			defer func() {
				if task725.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task725.ran.Store(true)

			_879_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task725.job = sched.Enqueue(ctx, cff.Job{
			Run: task725.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task725)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:880:12
		task726 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task726.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _880_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   880,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task726.run = func(ctx context.Context) (err error) {
			taskEmitter := task726.emitter
			startTime := time.Now()
			defer func() {
				if task726.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task726.ran.Store(true)

			_880_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task726.job = sched.Enqueue(ctx, cff.Job{
			Run: task726.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task726)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:881:12
		task727 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task727.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _881_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   881,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task727.run = func(ctx context.Context) (err error) {
			taskEmitter := task727.emitter
			startTime := time.Now()
			defer func() {
				if task727.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task727.ran.Store(true)

			_881_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task727.job = sched.Enqueue(ctx, cff.Job{
			Run: task727.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task727)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:882:12
		task728 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task728.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _882_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   882,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task728.run = func(ctx context.Context) (err error) {
			taskEmitter := task728.emitter
			startTime := time.Now()
			defer func() {
				if task728.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task728.ran.Store(true)

			_882_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task728.job = sched.Enqueue(ctx, cff.Job{
			Run: task728.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task728)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:883:12
		task729 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task729.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _883_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   883,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task729.run = func(ctx context.Context) (err error) {
			taskEmitter := task729.emitter
			startTime := time.Now()
			defer func() {
				if task729.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task729.ran.Store(true)

			_883_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task729.job = sched.Enqueue(ctx, cff.Job{
			Run: task729.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task729)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:884:12
		task730 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task730.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _884_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   884,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task730.run = func(ctx context.Context) (err error) {
			taskEmitter := task730.emitter
			startTime := time.Now()
			defer func() {
				if task730.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task730.ran.Store(true)

			_884_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task730.job = sched.Enqueue(ctx, cff.Job{
			Run: task730.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task730)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:885:12
		task731 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task731.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _885_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   885,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task731.run = func(ctx context.Context) (err error) {
			taskEmitter := task731.emitter
			startTime := time.Now()
			defer func() {
				if task731.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task731.ran.Store(true)

			_885_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task731.job = sched.Enqueue(ctx, cff.Job{
			Run: task731.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task731)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:886:12
		task732 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task732.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _886_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   886,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task732.run = func(ctx context.Context) (err error) {
			taskEmitter := task732.emitter
			startTime := time.Now()
			defer func() {
				if task732.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task732.ran.Store(true)

			_886_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task732.job = sched.Enqueue(ctx, cff.Job{
			Run: task732.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task732)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:887:12
		task733 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task733.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _887_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   887,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task733.run = func(ctx context.Context) (err error) {
			taskEmitter := task733.emitter
			startTime := time.Now()
			defer func() {
				if task733.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task733.ran.Store(true)

			_887_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task733.job = sched.Enqueue(ctx, cff.Job{
			Run: task733.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task733)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:888:12
		task734 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task734.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _888_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   888,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task734.run = func(ctx context.Context) (err error) {
			taskEmitter := task734.emitter
			startTime := time.Now()
			defer func() {
				if task734.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task734.ran.Store(true)

			_888_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task734.job = sched.Enqueue(ctx, cff.Job{
			Run: task734.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task734)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:889:12
		task735 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task735.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _889_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   889,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task735.run = func(ctx context.Context) (err error) {
			taskEmitter := task735.emitter
			startTime := time.Now()
			defer func() {
				if task735.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task735.ran.Store(true)

			_889_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task735.job = sched.Enqueue(ctx, cff.Job{
			Run: task735.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task735)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:890:12
		task736 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task736.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _890_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   890,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task736.run = func(ctx context.Context) (err error) {
			taskEmitter := task736.emitter
			startTime := time.Now()
			defer func() {
				if task736.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task736.ran.Store(true)

			_890_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task736.job = sched.Enqueue(ctx, cff.Job{
			Run: task736.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task736)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:891:12
		task737 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task737.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _891_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   891,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task737.run = func(ctx context.Context) (err error) {
			taskEmitter := task737.emitter
			startTime := time.Now()
			defer func() {
				if task737.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task737.ran.Store(true)

			_891_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task737.job = sched.Enqueue(ctx, cff.Job{
			Run: task737.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task737)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:892:12
		task738 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task738.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _892_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   892,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task738.run = func(ctx context.Context) (err error) {
			taskEmitter := task738.emitter
			startTime := time.Now()
			defer func() {
				if task738.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task738.ran.Store(true)

			_892_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task738.job = sched.Enqueue(ctx, cff.Job{
			Run: task738.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task738)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:893:12
		task739 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task739.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _893_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   893,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task739.run = func(ctx context.Context) (err error) {
			taskEmitter := task739.emitter
			startTime := time.Now()
			defer func() {
				if task739.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task739.ran.Store(true)

			_893_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task739.job = sched.Enqueue(ctx, cff.Job{
			Run: task739.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task739)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:894:12
		task740 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task740.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _894_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   894,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task740.run = func(ctx context.Context) (err error) {
			taskEmitter := task740.emitter
			startTime := time.Now()
			defer func() {
				if task740.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task740.ran.Store(true)

			_894_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task740.job = sched.Enqueue(ctx, cff.Job{
			Run: task740.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task740)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:895:12
		task741 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task741.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _895_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   895,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task741.run = func(ctx context.Context) (err error) {
			taskEmitter := task741.emitter
			startTime := time.Now()
			defer func() {
				if task741.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task741.ran.Store(true)

			_895_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task741.job = sched.Enqueue(ctx, cff.Job{
			Run: task741.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task741)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:896:12
		task742 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task742.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _896_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   896,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task742.run = func(ctx context.Context) (err error) {
			taskEmitter := task742.emitter
			startTime := time.Now()
			defer func() {
				if task742.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task742.ran.Store(true)

			_896_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task742.job = sched.Enqueue(ctx, cff.Job{
			Run: task742.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task742)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:897:12
		task743 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task743.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _897_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   897,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task743.run = func(ctx context.Context) (err error) {
			taskEmitter := task743.emitter
			startTime := time.Now()
			defer func() {
				if task743.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task743.ran.Store(true)

			_897_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task743.job = sched.Enqueue(ctx, cff.Job{
			Run: task743.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task743)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:898:12
		task744 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task744.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _898_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   898,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task744.run = func(ctx context.Context) (err error) {
			taskEmitter := task744.emitter
			startTime := time.Now()
			defer func() {
				if task744.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task744.ran.Store(true)

			_898_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task744.job = sched.Enqueue(ctx, cff.Job{
			Run: task744.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task744)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:899:12
		task745 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task745.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _899_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   899,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task745.run = func(ctx context.Context) (err error) {
			taskEmitter := task745.emitter
			startTime := time.Now()
			defer func() {
				if task745.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task745.ran.Store(true)

			_899_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task745.job = sched.Enqueue(ctx, cff.Job{
			Run: task745.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task745)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:900:12
		task746 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task746.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _900_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   900,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task746.run = func(ctx context.Context) (err error) {
			taskEmitter := task746.emitter
			startTime := time.Now()
			defer func() {
				if task746.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task746.ran.Store(true)

			_900_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task746.job = sched.Enqueue(ctx, cff.Job{
			Run: task746.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task746)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:901:12
		task747 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task747.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _901_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   901,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task747.run = func(ctx context.Context) (err error) {
			taskEmitter := task747.emitter
			startTime := time.Now()
			defer func() {
				if task747.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task747.ran.Store(true)

			_901_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task747.job = sched.Enqueue(ctx, cff.Job{
			Run: task747.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task747)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:902:12
		task748 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task748.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _902_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   902,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task748.run = func(ctx context.Context) (err error) {
			taskEmitter := task748.emitter
			startTime := time.Now()
			defer func() {
				if task748.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task748.ran.Store(true)

			_902_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task748.job = sched.Enqueue(ctx, cff.Job{
			Run: task748.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task748)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:903:12
		task749 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task749.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _903_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   903,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task749.run = func(ctx context.Context) (err error) {
			taskEmitter := task749.emitter
			startTime := time.Now()
			defer func() {
				if task749.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task749.ran.Store(true)

			_903_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task749.job = sched.Enqueue(ctx, cff.Job{
			Run: task749.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task749)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:904:12
		task750 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task750.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _904_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   904,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task750.run = func(ctx context.Context) (err error) {
			taskEmitter := task750.emitter
			startTime := time.Now()
			defer func() {
				if task750.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task750.ran.Store(true)

			_904_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task750.job = sched.Enqueue(ctx, cff.Job{
			Run: task750.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task750)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:905:12
		task751 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task751.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _905_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   905,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task751.run = func(ctx context.Context) (err error) {
			taskEmitter := task751.emitter
			startTime := time.Now()
			defer func() {
				if task751.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task751.ran.Store(true)

			_905_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task751.job = sched.Enqueue(ctx, cff.Job{
			Run: task751.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task751)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:906:12
		task752 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task752.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _906_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   906,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task752.run = func(ctx context.Context) (err error) {
			taskEmitter := task752.emitter
			startTime := time.Now()
			defer func() {
				if task752.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task752.ran.Store(true)

			_906_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task752.job = sched.Enqueue(ctx, cff.Job{
			Run: task752.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task752)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:907:12
		task753 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task753.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _907_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   907,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task753.run = func(ctx context.Context) (err error) {
			taskEmitter := task753.emitter
			startTime := time.Now()
			defer func() {
				if task753.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task753.ran.Store(true)

			_907_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task753.job = sched.Enqueue(ctx, cff.Job{
			Run: task753.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task753)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:908:12
		task754 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task754.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _908_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   908,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task754.run = func(ctx context.Context) (err error) {
			taskEmitter := task754.emitter
			startTime := time.Now()
			defer func() {
				if task754.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task754.ran.Store(true)

			_908_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task754.job = sched.Enqueue(ctx, cff.Job{
			Run: task754.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task754)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:909:12
		task755 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task755.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _909_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   909,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task755.run = func(ctx context.Context) (err error) {
			taskEmitter := task755.emitter
			startTime := time.Now()
			defer func() {
				if task755.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task755.ran.Store(true)

			_909_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task755.job = sched.Enqueue(ctx, cff.Job{
			Run: task755.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task755)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:910:12
		task756 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task756.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _910_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   910,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task756.run = func(ctx context.Context) (err error) {
			taskEmitter := task756.emitter
			startTime := time.Now()
			defer func() {
				if task756.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task756.ran.Store(true)

			_910_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task756.job = sched.Enqueue(ctx, cff.Job{
			Run: task756.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task756)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:911:12
		task757 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task757.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _911_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   911,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task757.run = func(ctx context.Context) (err error) {
			taskEmitter := task757.emitter
			startTime := time.Now()
			defer func() {
				if task757.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task757.ran.Store(true)

			_911_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task757.job = sched.Enqueue(ctx, cff.Job{
			Run: task757.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task757)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:912:12
		task758 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task758.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _912_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   912,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task758.run = func(ctx context.Context) (err error) {
			taskEmitter := task758.emitter
			startTime := time.Now()
			defer func() {
				if task758.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task758.ran.Store(true)

			_912_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task758.job = sched.Enqueue(ctx, cff.Job{
			Run: task758.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task758)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:913:12
		task759 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task759.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _913_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   913,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task759.run = func(ctx context.Context) (err error) {
			taskEmitter := task759.emitter
			startTime := time.Now()
			defer func() {
				if task759.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task759.ran.Store(true)

			_913_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task759.job = sched.Enqueue(ctx, cff.Job{
			Run: task759.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task759)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:914:12
		task760 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task760.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _914_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   914,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task760.run = func(ctx context.Context) (err error) {
			taskEmitter := task760.emitter
			startTime := time.Now()
			defer func() {
				if task760.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task760.ran.Store(true)

			_914_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task760.job = sched.Enqueue(ctx, cff.Job{
			Run: task760.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task760)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:915:12
		task761 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task761.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _915_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   915,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task761.run = func(ctx context.Context) (err error) {
			taskEmitter := task761.emitter
			startTime := time.Now()
			defer func() {
				if task761.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task761.ran.Store(true)

			_915_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task761.job = sched.Enqueue(ctx, cff.Job{
			Run: task761.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task761)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:916:12
		task762 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task762.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _916_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   916,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task762.run = func(ctx context.Context) (err error) {
			taskEmitter := task762.emitter
			startTime := time.Now()
			defer func() {
				if task762.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task762.ran.Store(true)

			_916_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task762.job = sched.Enqueue(ctx, cff.Job{
			Run: task762.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task762)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:917:12
		task763 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task763.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _917_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   917,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task763.run = func(ctx context.Context) (err error) {
			taskEmitter := task763.emitter
			startTime := time.Now()
			defer func() {
				if task763.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task763.ran.Store(true)

			_917_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task763.job = sched.Enqueue(ctx, cff.Job{
			Run: task763.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task763)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:918:12
		task764 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task764.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _918_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   918,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task764.run = func(ctx context.Context) (err error) {
			taskEmitter := task764.emitter
			startTime := time.Now()
			defer func() {
				if task764.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task764.ran.Store(true)

			_918_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task764.job = sched.Enqueue(ctx, cff.Job{
			Run: task764.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task764)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:919:12
		task765 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task765.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _919_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   919,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task765.run = func(ctx context.Context) (err error) {
			taskEmitter := task765.emitter
			startTime := time.Now()
			defer func() {
				if task765.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task765.ran.Store(true)

			_919_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task765.job = sched.Enqueue(ctx, cff.Job{
			Run: task765.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task765)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:920:12
		task766 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task766.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _920_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   920,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task766.run = func(ctx context.Context) (err error) {
			taskEmitter := task766.emitter
			startTime := time.Now()
			defer func() {
				if task766.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task766.ran.Store(true)

			_920_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task766.job = sched.Enqueue(ctx, cff.Job{
			Run: task766.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task766)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:921:12
		task767 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task767.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _921_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   921,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task767.run = func(ctx context.Context) (err error) {
			taskEmitter := task767.emitter
			startTime := time.Now()
			defer func() {
				if task767.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task767.ran.Store(true)

			_921_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task767.job = sched.Enqueue(ctx, cff.Job{
			Run: task767.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task767)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:922:12
		task768 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task768.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _922_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   922,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task768.run = func(ctx context.Context) (err error) {
			taskEmitter := task768.emitter
			startTime := time.Now()
			defer func() {
				if task768.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task768.ran.Store(true)

			_922_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task768.job = sched.Enqueue(ctx, cff.Job{
			Run: task768.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task768)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:923:12
		task769 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task769.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _923_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   923,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task769.run = func(ctx context.Context) (err error) {
			taskEmitter := task769.emitter
			startTime := time.Now()
			defer func() {
				if task769.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task769.ran.Store(true)

			_923_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task769.job = sched.Enqueue(ctx, cff.Job{
			Run: task769.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task769)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:924:12
		task770 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task770.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _924_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   924,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task770.run = func(ctx context.Context) (err error) {
			taskEmitter := task770.emitter
			startTime := time.Now()
			defer func() {
				if task770.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task770.ran.Store(true)

			_924_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task770.job = sched.Enqueue(ctx, cff.Job{
			Run: task770.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task770)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:925:12
		task771 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task771.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _925_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   925,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task771.run = func(ctx context.Context) (err error) {
			taskEmitter := task771.emitter
			startTime := time.Now()
			defer func() {
				if task771.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task771.ran.Store(true)

			_925_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task771.job = sched.Enqueue(ctx, cff.Job{
			Run: task771.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task771)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:926:12
		task772 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task772.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _926_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   926,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task772.run = func(ctx context.Context) (err error) {
			taskEmitter := task772.emitter
			startTime := time.Now()
			defer func() {
				if task772.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task772.ran.Store(true)

			_926_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task772.job = sched.Enqueue(ctx, cff.Job{
			Run: task772.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task772)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:927:12
		task773 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task773.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _927_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   927,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task773.run = func(ctx context.Context) (err error) {
			taskEmitter := task773.emitter
			startTime := time.Now()
			defer func() {
				if task773.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task773.ran.Store(true)

			_927_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task773.job = sched.Enqueue(ctx, cff.Job{
			Run: task773.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task773)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:928:12
		task774 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task774.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _928_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   928,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task774.run = func(ctx context.Context) (err error) {
			taskEmitter := task774.emitter
			startTime := time.Now()
			defer func() {
				if task774.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task774.ran.Store(true)

			_928_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task774.job = sched.Enqueue(ctx, cff.Job{
			Run: task774.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task774)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:929:12
		task775 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task775.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _929_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   929,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task775.run = func(ctx context.Context) (err error) {
			taskEmitter := task775.emitter
			startTime := time.Now()
			defer func() {
				if task775.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task775.ran.Store(true)

			_929_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task775.job = sched.Enqueue(ctx, cff.Job{
			Run: task775.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task775)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:930:12
		task776 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task776.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _930_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   930,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task776.run = func(ctx context.Context) (err error) {
			taskEmitter := task776.emitter
			startTime := time.Now()
			defer func() {
				if task776.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task776.ran.Store(true)

			_930_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task776.job = sched.Enqueue(ctx, cff.Job{
			Run: task776.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task776)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:931:12
		task777 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task777.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _931_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   931,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task777.run = func(ctx context.Context) (err error) {
			taskEmitter := task777.emitter
			startTime := time.Now()
			defer func() {
				if task777.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task777.ran.Store(true)

			_931_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task777.job = sched.Enqueue(ctx, cff.Job{
			Run: task777.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task777)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:932:12
		task778 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task778.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _932_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   932,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task778.run = func(ctx context.Context) (err error) {
			taskEmitter := task778.emitter
			startTime := time.Now()
			defer func() {
				if task778.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task778.ran.Store(true)

			_932_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task778.job = sched.Enqueue(ctx, cff.Job{
			Run: task778.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task778)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:933:12
		task779 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task779.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _933_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   933,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task779.run = func(ctx context.Context) (err error) {
			taskEmitter := task779.emitter
			startTime := time.Now()
			defer func() {
				if task779.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task779.ran.Store(true)

			_933_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task779.job = sched.Enqueue(ctx, cff.Job{
			Run: task779.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task779)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:934:12
		task780 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task780.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _934_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   934,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task780.run = func(ctx context.Context) (err error) {
			taskEmitter := task780.emitter
			startTime := time.Now()
			defer func() {
				if task780.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task780.ran.Store(true)

			_934_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task780.job = sched.Enqueue(ctx, cff.Job{
			Run: task780.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task780)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:935:12
		task781 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task781.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _935_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   935,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task781.run = func(ctx context.Context) (err error) {
			taskEmitter := task781.emitter
			startTime := time.Now()
			defer func() {
				if task781.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task781.ran.Store(true)

			_935_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task781.job = sched.Enqueue(ctx, cff.Job{
			Run: task781.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task781)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:936:12
		task782 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task782.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _936_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   936,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task782.run = func(ctx context.Context) (err error) {
			taskEmitter := task782.emitter
			startTime := time.Now()
			defer func() {
				if task782.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task782.ran.Store(true)

			_936_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task782.job = sched.Enqueue(ctx, cff.Job{
			Run: task782.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task782)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:937:12
		task783 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task783.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _937_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   937,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task783.run = func(ctx context.Context) (err error) {
			taskEmitter := task783.emitter
			startTime := time.Now()
			defer func() {
				if task783.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task783.ran.Store(true)

			_937_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task783.job = sched.Enqueue(ctx, cff.Job{
			Run: task783.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task783)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:938:12
		task784 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task784.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _938_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   938,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task784.run = func(ctx context.Context) (err error) {
			taskEmitter := task784.emitter
			startTime := time.Now()
			defer func() {
				if task784.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task784.ran.Store(true)

			_938_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task784.job = sched.Enqueue(ctx, cff.Job{
			Run: task784.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task784)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:939:12
		task785 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task785.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _939_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   939,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task785.run = func(ctx context.Context) (err error) {
			taskEmitter := task785.emitter
			startTime := time.Now()
			defer func() {
				if task785.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task785.ran.Store(true)

			_939_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task785.job = sched.Enqueue(ctx, cff.Job{
			Run: task785.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task785)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:940:12
		task786 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task786.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _940_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   940,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task786.run = func(ctx context.Context) (err error) {
			taskEmitter := task786.emitter
			startTime := time.Now()
			defer func() {
				if task786.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task786.ran.Store(true)

			_940_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task786.job = sched.Enqueue(ctx, cff.Job{
			Run: task786.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task786)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:941:12
		task787 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task787.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _941_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   941,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task787.run = func(ctx context.Context) (err error) {
			taskEmitter := task787.emitter
			startTime := time.Now()
			defer func() {
				if task787.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task787.ran.Store(true)

			_941_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task787.job = sched.Enqueue(ctx, cff.Job{
			Run: task787.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task787)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:942:12
		task788 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task788.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _942_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   942,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task788.run = func(ctx context.Context) (err error) {
			taskEmitter := task788.emitter
			startTime := time.Now()
			defer func() {
				if task788.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task788.ran.Store(true)

			_942_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task788.job = sched.Enqueue(ctx, cff.Job{
			Run: task788.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task788)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:943:12
		task789 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task789.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _943_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   943,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task789.run = func(ctx context.Context) (err error) {
			taskEmitter := task789.emitter
			startTime := time.Now()
			defer func() {
				if task789.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task789.ran.Store(true)

			_943_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task789.job = sched.Enqueue(ctx, cff.Job{
			Run: task789.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task789)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:944:12
		task790 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task790.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _944_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   944,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task790.run = func(ctx context.Context) (err error) {
			taskEmitter := task790.emitter
			startTime := time.Now()
			defer func() {
				if task790.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task790.ran.Store(true)

			_944_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task790.job = sched.Enqueue(ctx, cff.Job{
			Run: task790.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task790)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:945:12
		task791 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task791.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _945_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   945,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task791.run = func(ctx context.Context) (err error) {
			taskEmitter := task791.emitter
			startTime := time.Now()
			defer func() {
				if task791.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task791.ran.Store(true)

			_945_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task791.job = sched.Enqueue(ctx, cff.Job{
			Run: task791.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task791)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:946:12
		task792 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task792.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _946_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   946,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task792.run = func(ctx context.Context) (err error) {
			taskEmitter := task792.emitter
			startTime := time.Now()
			defer func() {
				if task792.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task792.ran.Store(true)

			_946_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task792.job = sched.Enqueue(ctx, cff.Job{
			Run: task792.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task792)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:947:12
		task793 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task793.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _947_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   947,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task793.run = func(ctx context.Context) (err error) {
			taskEmitter := task793.emitter
			startTime := time.Now()
			defer func() {
				if task793.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task793.ran.Store(true)

			_947_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task793.job = sched.Enqueue(ctx, cff.Job{
			Run: task793.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task793)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:948:12
		task794 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task794.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _948_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   948,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task794.run = func(ctx context.Context) (err error) {
			taskEmitter := task794.emitter
			startTime := time.Now()
			defer func() {
				if task794.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task794.ran.Store(true)

			_948_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task794.job = sched.Enqueue(ctx, cff.Job{
			Run: task794.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task794)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:949:12
		task795 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task795.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _949_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   949,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task795.run = func(ctx context.Context) (err error) {
			taskEmitter := task795.emitter
			startTime := time.Now()
			defer func() {
				if task795.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task795.ran.Store(true)

			_949_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task795.job = sched.Enqueue(ctx, cff.Job{
			Run: task795.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task795)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:950:12
		task796 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task796.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _950_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   950,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task796.run = func(ctx context.Context) (err error) {
			taskEmitter := task796.emitter
			startTime := time.Now()
			defer func() {
				if task796.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task796.ran.Store(true)

			_950_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task796.job = sched.Enqueue(ctx, cff.Job{
			Run: task796.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task796)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:951:12
		task797 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task797.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _951_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   951,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task797.run = func(ctx context.Context) (err error) {
			taskEmitter := task797.emitter
			startTime := time.Now()
			defer func() {
				if task797.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task797.ran.Store(true)

			_951_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task797.job = sched.Enqueue(ctx, cff.Job{
			Run: task797.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task797)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:952:12
		task798 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task798.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _952_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   952,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task798.run = func(ctx context.Context) (err error) {
			taskEmitter := task798.emitter
			startTime := time.Now()
			defer func() {
				if task798.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task798.ran.Store(true)

			_952_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task798.job = sched.Enqueue(ctx, cff.Job{
			Run: task798.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task798)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:953:12
		task799 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task799.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _953_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   953,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task799.run = func(ctx context.Context) (err error) {
			taskEmitter := task799.emitter
			startTime := time.Now()
			defer func() {
				if task799.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task799.ran.Store(true)

			_953_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task799.job = sched.Enqueue(ctx, cff.Job{
			Run: task799.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task799)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:954:12
		task800 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task800.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _954_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   954,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task800.run = func(ctx context.Context) (err error) {
			taskEmitter := task800.emitter
			startTime := time.Now()
			defer func() {
				if task800.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task800.ran.Store(true)

			_954_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task800.job = sched.Enqueue(ctx, cff.Job{
			Run: task800.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task800)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:955:12
		task801 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task801.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _955_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   955,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task801.run = func(ctx context.Context) (err error) {
			taskEmitter := task801.emitter
			startTime := time.Now()
			defer func() {
				if task801.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task801.ran.Store(true)

			_955_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task801.job = sched.Enqueue(ctx, cff.Job{
			Run: task801.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task801)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:956:12
		task802 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task802.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _956_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   956,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task802.run = func(ctx context.Context) (err error) {
			taskEmitter := task802.emitter
			startTime := time.Now()
			defer func() {
				if task802.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task802.ran.Store(true)

			_956_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task802.job = sched.Enqueue(ctx, cff.Job{
			Run: task802.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task802)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:957:12
		task803 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task803.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _957_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   957,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task803.run = func(ctx context.Context) (err error) {
			taskEmitter := task803.emitter
			startTime := time.Now()
			defer func() {
				if task803.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task803.ran.Store(true)

			_957_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task803.job = sched.Enqueue(ctx, cff.Job{
			Run: task803.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task803)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:958:12
		task804 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task804.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _958_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   958,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task804.run = func(ctx context.Context) (err error) {
			taskEmitter := task804.emitter
			startTime := time.Now()
			defer func() {
				if task804.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task804.ran.Store(true)

			_958_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task804.job = sched.Enqueue(ctx, cff.Job{
			Run: task804.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task804)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:959:12
		task805 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task805.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _959_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   959,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task805.run = func(ctx context.Context) (err error) {
			taskEmitter := task805.emitter
			startTime := time.Now()
			defer func() {
				if task805.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task805.ran.Store(true)

			_959_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task805.job = sched.Enqueue(ctx, cff.Job{
			Run: task805.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task805)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:960:12
		task806 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task806.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _960_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   960,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task806.run = func(ctx context.Context) (err error) {
			taskEmitter := task806.emitter
			startTime := time.Now()
			defer func() {
				if task806.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task806.ran.Store(true)

			_960_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task806.job = sched.Enqueue(ctx, cff.Job{
			Run: task806.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task806)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:961:12
		task807 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task807.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _961_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   961,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task807.run = func(ctx context.Context) (err error) {
			taskEmitter := task807.emitter
			startTime := time.Now()
			defer func() {
				if task807.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task807.ran.Store(true)

			_961_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task807.job = sched.Enqueue(ctx, cff.Job{
			Run: task807.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task807)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:962:12
		task808 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task808.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _962_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   962,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task808.run = func(ctx context.Context) (err error) {
			taskEmitter := task808.emitter
			startTime := time.Now()
			defer func() {
				if task808.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task808.ran.Store(true)

			_962_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task808.job = sched.Enqueue(ctx, cff.Job{
			Run: task808.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task808)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:963:12
		task809 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task809.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _963_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   963,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task809.run = func(ctx context.Context) (err error) {
			taskEmitter := task809.emitter
			startTime := time.Now()
			defer func() {
				if task809.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task809.ran.Store(true)

			_963_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task809.job = sched.Enqueue(ctx, cff.Job{
			Run: task809.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task809)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:964:12
		task810 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task810.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _964_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   964,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task810.run = func(ctx context.Context) (err error) {
			taskEmitter := task810.emitter
			startTime := time.Now()
			defer func() {
				if task810.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task810.ran.Store(true)

			_964_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task810.job = sched.Enqueue(ctx, cff.Job{
			Run: task810.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task810)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:965:12
		task811 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task811.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _965_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   965,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task811.run = func(ctx context.Context) (err error) {
			taskEmitter := task811.emitter
			startTime := time.Now()
			defer func() {
				if task811.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task811.ran.Store(true)

			_965_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task811.job = sched.Enqueue(ctx, cff.Job{
			Run: task811.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task811)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:966:12
		task812 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task812.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _966_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   966,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task812.run = func(ctx context.Context) (err error) {
			taskEmitter := task812.emitter
			startTime := time.Now()
			defer func() {
				if task812.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task812.ran.Store(true)

			_966_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task812.job = sched.Enqueue(ctx, cff.Job{
			Run: task812.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task812)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:967:12
		task813 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task813.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _967_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   967,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task813.run = func(ctx context.Context) (err error) {
			taskEmitter := task813.emitter
			startTime := time.Now()
			defer func() {
				if task813.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task813.ran.Store(true)

			_967_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task813.job = sched.Enqueue(ctx, cff.Job{
			Run: task813.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task813)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:968:12
		task814 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task814.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _968_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   968,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task814.run = func(ctx context.Context) (err error) {
			taskEmitter := task814.emitter
			startTime := time.Now()
			defer func() {
				if task814.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task814.ran.Store(true)

			_968_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task814.job = sched.Enqueue(ctx, cff.Job{
			Run: task814.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task814)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:969:12
		task815 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task815.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _969_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   969,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task815.run = func(ctx context.Context) (err error) {
			taskEmitter := task815.emitter
			startTime := time.Now()
			defer func() {
				if task815.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task815.ran.Store(true)

			_969_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task815.job = sched.Enqueue(ctx, cff.Job{
			Run: task815.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task815)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:970:12
		task816 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task816.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _970_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   970,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task816.run = func(ctx context.Context) (err error) {
			taskEmitter := task816.emitter
			startTime := time.Now()
			defer func() {
				if task816.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task816.ran.Store(true)

			_970_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task816.job = sched.Enqueue(ctx, cff.Job{
			Run: task816.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task816)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:971:12
		task817 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task817.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _971_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   971,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task817.run = func(ctx context.Context) (err error) {
			taskEmitter := task817.emitter
			startTime := time.Now()
			defer func() {
				if task817.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task817.ran.Store(true)

			_971_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task817.job = sched.Enqueue(ctx, cff.Job{
			Run: task817.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task817)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:972:12
		task818 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task818.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _972_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   972,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task818.run = func(ctx context.Context) (err error) {
			taskEmitter := task818.emitter
			startTime := time.Now()
			defer func() {
				if task818.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task818.ran.Store(true)

			_972_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task818.job = sched.Enqueue(ctx, cff.Job{
			Run: task818.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task818)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:973:12
		task819 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task819.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _973_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   973,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task819.run = func(ctx context.Context) (err error) {
			taskEmitter := task819.emitter
			startTime := time.Now()
			defer func() {
				if task819.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task819.ran.Store(true)

			_973_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task819.job = sched.Enqueue(ctx, cff.Job{
			Run: task819.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task819)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:974:12
		task820 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task820.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _974_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   974,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task820.run = func(ctx context.Context) (err error) {
			taskEmitter := task820.emitter
			startTime := time.Now()
			defer func() {
				if task820.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task820.ran.Store(true)

			_974_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task820.job = sched.Enqueue(ctx, cff.Job{
			Run: task820.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task820)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:975:12
		task821 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task821.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _975_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   975,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task821.run = func(ctx context.Context) (err error) {
			taskEmitter := task821.emitter
			startTime := time.Now()
			defer func() {
				if task821.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task821.ran.Store(true)

			_975_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task821.job = sched.Enqueue(ctx, cff.Job{
			Run: task821.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task821)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:976:12
		task822 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task822.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _976_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   976,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task822.run = func(ctx context.Context) (err error) {
			taskEmitter := task822.emitter
			startTime := time.Now()
			defer func() {
				if task822.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task822.ran.Store(true)

			_976_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task822.job = sched.Enqueue(ctx, cff.Job{
			Run: task822.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task822)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:977:12
		task823 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task823.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _977_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   977,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task823.run = func(ctx context.Context) (err error) {
			taskEmitter := task823.emitter
			startTime := time.Now()
			defer func() {
				if task823.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task823.ran.Store(true)

			_977_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task823.job = sched.Enqueue(ctx, cff.Job{
			Run: task823.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task823)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:978:12
		task824 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task824.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _978_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   978,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task824.run = func(ctx context.Context) (err error) {
			taskEmitter := task824.emitter
			startTime := time.Now()
			defer func() {
				if task824.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task824.ran.Store(true)

			_978_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task824.job = sched.Enqueue(ctx, cff.Job{
			Run: task824.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task824)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:979:12
		task825 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task825.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _979_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   979,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task825.run = func(ctx context.Context) (err error) {
			taskEmitter := task825.emitter
			startTime := time.Now()
			defer func() {
				if task825.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task825.ran.Store(true)

			_979_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task825.job = sched.Enqueue(ctx, cff.Job{
			Run: task825.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task825)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:980:12
		task826 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task826.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _980_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   980,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task826.run = func(ctx context.Context) (err error) {
			taskEmitter := task826.emitter
			startTime := time.Now()
			defer func() {
				if task826.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task826.ran.Store(true)

			_980_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task826.job = sched.Enqueue(ctx, cff.Job{
			Run: task826.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task826)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:981:12
		task827 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task827.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _981_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   981,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task827.run = func(ctx context.Context) (err error) {
			taskEmitter := task827.emitter
			startTime := time.Now()
			defer func() {
				if task827.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task827.ran.Store(true)

			_981_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task827.job = sched.Enqueue(ctx, cff.Job{
			Run: task827.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task827)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:982:12
		task828 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task828.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _982_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   982,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task828.run = func(ctx context.Context) (err error) {
			taskEmitter := task828.emitter
			startTime := time.Now()
			defer func() {
				if task828.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task828.ran.Store(true)

			_982_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task828.job = sched.Enqueue(ctx, cff.Job{
			Run: task828.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task828)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:983:12
		task829 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task829.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _983_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   983,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task829.run = func(ctx context.Context) (err error) {
			taskEmitter := task829.emitter
			startTime := time.Now()
			defer func() {
				if task829.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task829.ran.Store(true)

			_983_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task829.job = sched.Enqueue(ctx, cff.Job{
			Run: task829.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task829)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:984:12
		task830 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task830.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _984_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   984,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task830.run = func(ctx context.Context) (err error) {
			taskEmitter := task830.emitter
			startTime := time.Now()
			defer func() {
				if task830.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task830.ran.Store(true)

			_984_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task830.job = sched.Enqueue(ctx, cff.Job{
			Run: task830.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task830)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:985:12
		task831 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task831.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _985_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   985,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task831.run = func(ctx context.Context) (err error) {
			taskEmitter := task831.emitter
			startTime := time.Now()
			defer func() {
				if task831.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task831.ran.Store(true)

			_985_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task831.job = sched.Enqueue(ctx, cff.Job{
			Run: task831.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task831)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:986:12
		task832 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task832.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _986_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   986,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task832.run = func(ctx context.Context) (err error) {
			taskEmitter := task832.emitter
			startTime := time.Now()
			defer func() {
				if task832.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task832.ran.Store(true)

			_986_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task832.job = sched.Enqueue(ctx, cff.Job{
			Run: task832.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task832)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:987:12
		task833 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task833.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _987_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   987,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task833.run = func(ctx context.Context) (err error) {
			taskEmitter := task833.emitter
			startTime := time.Now()
			defer func() {
				if task833.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task833.ran.Store(true)

			_987_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task833.job = sched.Enqueue(ctx, cff.Job{
			Run: task833.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task833)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:988:12
		task834 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task834.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _988_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   988,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task834.run = func(ctx context.Context) (err error) {
			taskEmitter := task834.emitter
			startTime := time.Now()
			defer func() {
				if task834.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task834.ran.Store(true)

			_988_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task834.job = sched.Enqueue(ctx, cff.Job{
			Run: task834.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task834)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:989:12
		task835 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task835.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _989_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   989,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task835.run = func(ctx context.Context) (err error) {
			taskEmitter := task835.emitter
			startTime := time.Now()
			defer func() {
				if task835.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task835.ran.Store(true)

			_989_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task835.job = sched.Enqueue(ctx, cff.Job{
			Run: task835.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task835)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:990:12
		task836 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task836.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _990_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   990,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task836.run = func(ctx context.Context) (err error) {
			taskEmitter := task836.emitter
			startTime := time.Now()
			defer func() {
				if task836.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task836.ran.Store(true)

			_990_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task836.job = sched.Enqueue(ctx, cff.Job{
			Run: task836.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task836)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:991:12
		task837 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task837.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _991_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   991,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task837.run = func(ctx context.Context) (err error) {
			taskEmitter := task837.emitter
			startTime := time.Now()
			defer func() {
				if task837.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task837.ran.Store(true)

			_991_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task837.job = sched.Enqueue(ctx, cff.Job{
			Run: task837.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task837)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:992:12
		task838 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task838.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _992_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   992,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task838.run = func(ctx context.Context) (err error) {
			taskEmitter := task838.emitter
			startTime := time.Now()
			defer func() {
				if task838.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task838.ran.Store(true)

			_992_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task838.job = sched.Enqueue(ctx, cff.Job{
			Run: task838.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task838)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:993:12
		task839 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task839.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _993_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   993,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task839.run = func(ctx context.Context) (err error) {
			taskEmitter := task839.emitter
			startTime := time.Now()
			defer func() {
				if task839.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task839.ran.Store(true)

			_993_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task839.job = sched.Enqueue(ctx, cff.Job{
			Run: task839.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task839)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:994:12
		task840 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task840.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _994_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   994,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task840.run = func(ctx context.Context) (err error) {
			taskEmitter := task840.emitter
			startTime := time.Now()
			defer func() {
				if task840.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task840.ran.Store(true)

			_994_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task840.job = sched.Enqueue(ctx, cff.Job{
			Run: task840.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task840)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:995:12
		task841 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task841.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _995_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   995,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task841.run = func(ctx context.Context) (err error) {
			taskEmitter := task841.emitter
			startTime := time.Now()
			defer func() {
				if task841.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task841.ran.Store(true)

			_995_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task841.job = sched.Enqueue(ctx, cff.Job{
			Run: task841.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task841)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:996:12
		task842 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task842.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _996_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   996,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task842.run = func(ctx context.Context) (err error) {
			taskEmitter := task842.emitter
			startTime := time.Now()
			defer func() {
				if task842.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task842.ran.Store(true)

			_996_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task842.job = sched.Enqueue(ctx, cff.Job{
			Run: task842.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task842)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:997:12
		task843 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task843.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _997_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   997,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task843.run = func(ctx context.Context) (err error) {
			taskEmitter := task843.emitter
			startTime := time.Now()
			defer func() {
				if task843.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task843.ran.Store(true)

			_997_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task843.job = sched.Enqueue(ctx, cff.Job{
			Run: task843.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task843)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:998:12
		task844 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task844.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _998_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   998,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task844.run = func(ctx context.Context) (err error) {
			taskEmitter := task844.emitter
			startTime := time.Now()
			defer func() {
				if task844.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task844.ran.Store(true)

			_998_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task844.job = sched.Enqueue(ctx, cff.Job{
			Run: task844.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task844)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:999:12
		task845 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task845.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _999_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   999,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task845.run = func(ctx context.Context) (err error) {
			taskEmitter := task845.emitter
			startTime := time.Now()
			defer func() {
				if task845.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task845.ran.Store(true)

			_999_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task845.job = sched.Enqueue(ctx, cff.Job{
			Run: task845.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task845)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1000:12
		task846 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task846.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1000_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1000,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task846.run = func(ctx context.Context) (err error) {
			taskEmitter := task846.emitter
			startTime := time.Now()
			defer func() {
				if task846.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task846.ran.Store(true)

			_1000_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task846.job = sched.Enqueue(ctx, cff.Job{
			Run: task846.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task846)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1001:12
		task847 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task847.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1001_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1001,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task847.run = func(ctx context.Context) (err error) {
			taskEmitter := task847.emitter
			startTime := time.Now()
			defer func() {
				if task847.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task847.ran.Store(true)

			_1001_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task847.job = sched.Enqueue(ctx, cff.Job{
			Run: task847.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task847)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1002:12
		task848 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task848.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1002_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1002,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task848.run = func(ctx context.Context) (err error) {
			taskEmitter := task848.emitter
			startTime := time.Now()
			defer func() {
				if task848.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task848.ran.Store(true)

			_1002_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task848.job = sched.Enqueue(ctx, cff.Job{
			Run: task848.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task848)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1003:12
		task849 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task849.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1003_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1003,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task849.run = func(ctx context.Context) (err error) {
			taskEmitter := task849.emitter
			startTime := time.Now()
			defer func() {
				if task849.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task849.ran.Store(true)

			_1003_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task849.job = sched.Enqueue(ctx, cff.Job{
			Run: task849.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task849)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1004:12
		task850 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task850.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1004_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1004,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task850.run = func(ctx context.Context) (err error) {
			taskEmitter := task850.emitter
			startTime := time.Now()
			defer func() {
				if task850.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task850.ran.Store(true)

			_1004_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task850.job = sched.Enqueue(ctx, cff.Job{
			Run: task850.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task850)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1005:12
		task851 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task851.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1005_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1005,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task851.run = func(ctx context.Context) (err error) {
			taskEmitter := task851.emitter
			startTime := time.Now()
			defer func() {
				if task851.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task851.ran.Store(true)

			_1005_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task851.job = sched.Enqueue(ctx, cff.Job{
			Run: task851.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task851)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1006:12
		task852 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task852.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1006_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1006,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task852.run = func(ctx context.Context) (err error) {
			taskEmitter := task852.emitter
			startTime := time.Now()
			defer func() {
				if task852.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task852.ran.Store(true)

			_1006_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task852.job = sched.Enqueue(ctx, cff.Job{
			Run: task852.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task852)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1007:12
		task853 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task853.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1007_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1007,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task853.run = func(ctx context.Context) (err error) {
			taskEmitter := task853.emitter
			startTime := time.Now()
			defer func() {
				if task853.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task853.ran.Store(true)

			_1007_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task853.job = sched.Enqueue(ctx, cff.Job{
			Run: task853.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task853)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1008:12
		task854 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task854.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1008_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1008,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task854.run = func(ctx context.Context) (err error) {
			taskEmitter := task854.emitter
			startTime := time.Now()
			defer func() {
				if task854.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task854.ran.Store(true)

			_1008_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task854.job = sched.Enqueue(ctx, cff.Job{
			Run: task854.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task854)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1009:12
		task855 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task855.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1009_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1009,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task855.run = func(ctx context.Context) (err error) {
			taskEmitter := task855.emitter
			startTime := time.Now()
			defer func() {
				if task855.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task855.ran.Store(true)

			_1009_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task855.job = sched.Enqueue(ctx, cff.Job{
			Run: task855.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task855)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1010:12
		task856 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task856.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1010_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1010,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task856.run = func(ctx context.Context) (err error) {
			taskEmitter := task856.emitter
			startTime := time.Now()
			defer func() {
				if task856.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task856.ran.Store(true)

			_1010_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task856.job = sched.Enqueue(ctx, cff.Job{
			Run: task856.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task856)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1011:12
		task857 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task857.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1011_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1011,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task857.run = func(ctx context.Context) (err error) {
			taskEmitter := task857.emitter
			startTime := time.Now()
			defer func() {
				if task857.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task857.ran.Store(true)

			_1011_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task857.job = sched.Enqueue(ctx, cff.Job{
			Run: task857.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task857)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1012:12
		task858 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task858.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1012_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1012,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task858.run = func(ctx context.Context) (err error) {
			taskEmitter := task858.emitter
			startTime := time.Now()
			defer func() {
				if task858.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task858.ran.Store(true)

			_1012_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task858.job = sched.Enqueue(ctx, cff.Job{
			Run: task858.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task858)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1013:12
		task859 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task859.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1013_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1013,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task859.run = func(ctx context.Context) (err error) {
			taskEmitter := task859.emitter
			startTime := time.Now()
			defer func() {
				if task859.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task859.ran.Store(true)

			_1013_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task859.job = sched.Enqueue(ctx, cff.Job{
			Run: task859.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task859)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1014:12
		task860 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task860.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1014_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1014,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task860.run = func(ctx context.Context) (err error) {
			taskEmitter := task860.emitter
			startTime := time.Now()
			defer func() {
				if task860.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task860.ran.Store(true)

			_1014_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task860.job = sched.Enqueue(ctx, cff.Job{
			Run: task860.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task860)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1015:12
		task861 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task861.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1015_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1015,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task861.run = func(ctx context.Context) (err error) {
			taskEmitter := task861.emitter
			startTime := time.Now()
			defer func() {
				if task861.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task861.ran.Store(true)

			_1015_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task861.job = sched.Enqueue(ctx, cff.Job{
			Run: task861.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task861)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1016:12
		task862 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task862.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1016_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1016,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task862.run = func(ctx context.Context) (err error) {
			taskEmitter := task862.emitter
			startTime := time.Now()
			defer func() {
				if task862.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task862.ran.Store(true)

			_1016_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task862.job = sched.Enqueue(ctx, cff.Job{
			Run: task862.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task862)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1017:12
		task863 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task863.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1017_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1017,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task863.run = func(ctx context.Context) (err error) {
			taskEmitter := task863.emitter
			startTime := time.Now()
			defer func() {
				if task863.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task863.ran.Store(true)

			_1017_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task863.job = sched.Enqueue(ctx, cff.Job{
			Run: task863.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task863)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1018:12
		task864 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task864.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1018_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1018,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task864.run = func(ctx context.Context) (err error) {
			taskEmitter := task864.emitter
			startTime := time.Now()
			defer func() {
				if task864.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task864.ran.Store(true)

			_1018_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task864.job = sched.Enqueue(ctx, cff.Job{
			Run: task864.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task864)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1019:12
		task865 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task865.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1019_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1019,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task865.run = func(ctx context.Context) (err error) {
			taskEmitter := task865.emitter
			startTime := time.Now()
			defer func() {
				if task865.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task865.ran.Store(true)

			_1019_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task865.job = sched.Enqueue(ctx, cff.Job{
			Run: task865.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task865)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1020:12
		task866 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task866.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1020_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1020,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task866.run = func(ctx context.Context) (err error) {
			taskEmitter := task866.emitter
			startTime := time.Now()
			defer func() {
				if task866.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task866.ran.Store(true)

			_1020_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task866.job = sched.Enqueue(ctx, cff.Job{
			Run: task866.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task866)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1021:12
		task867 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task867.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1021_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1021,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task867.run = func(ctx context.Context) (err error) {
			taskEmitter := task867.emitter
			startTime := time.Now()
			defer func() {
				if task867.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task867.ran.Store(true)

			_1021_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task867.job = sched.Enqueue(ctx, cff.Job{
			Run: task867.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task867)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1022:12
		task868 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task868.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1022_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1022,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task868.run = func(ctx context.Context) (err error) {
			taskEmitter := task868.emitter
			startTime := time.Now()
			defer func() {
				if task868.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task868.ran.Store(true)

			_1022_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task868.job = sched.Enqueue(ctx, cff.Job{
			Run: task868.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task868)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1023:12
		task869 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task869.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1023_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1023,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task869.run = func(ctx context.Context) (err error) {
			taskEmitter := task869.emitter
			startTime := time.Now()
			defer func() {
				if task869.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task869.ran.Store(true)

			_1023_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task869.job = sched.Enqueue(ctx, cff.Job{
			Run: task869.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task869)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1024:12
		task870 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task870.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1024_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1024,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task870.run = func(ctx context.Context) (err error) {
			taskEmitter := task870.emitter
			startTime := time.Now()
			defer func() {
				if task870.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task870.ran.Store(true)

			_1024_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task870.job = sched.Enqueue(ctx, cff.Job{
			Run: task870.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task870)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1025:12
		task871 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task871.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1025_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1025,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task871.run = func(ctx context.Context) (err error) {
			taskEmitter := task871.emitter
			startTime := time.Now()
			defer func() {
				if task871.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task871.ran.Store(true)

			_1025_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task871.job = sched.Enqueue(ctx, cff.Job{
			Run: task871.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task871)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1026:12
		task872 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task872.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1026_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1026,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task872.run = func(ctx context.Context) (err error) {
			taskEmitter := task872.emitter
			startTime := time.Now()
			defer func() {
				if task872.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task872.ran.Store(true)

			_1026_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task872.job = sched.Enqueue(ctx, cff.Job{
			Run: task872.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task872)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1027:12
		task873 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task873.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1027_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1027,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task873.run = func(ctx context.Context) (err error) {
			taskEmitter := task873.emitter
			startTime := time.Now()
			defer func() {
				if task873.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task873.ran.Store(true)

			_1027_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task873.job = sched.Enqueue(ctx, cff.Job{
			Run: task873.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task873)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1028:12
		task874 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task874.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1028_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1028,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task874.run = func(ctx context.Context) (err error) {
			taskEmitter := task874.emitter
			startTime := time.Now()
			defer func() {
				if task874.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task874.ran.Store(true)

			_1028_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task874.job = sched.Enqueue(ctx, cff.Job{
			Run: task874.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task874)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1029:12
		task875 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task875.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1029_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1029,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task875.run = func(ctx context.Context) (err error) {
			taskEmitter := task875.emitter
			startTime := time.Now()
			defer func() {
				if task875.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task875.ran.Store(true)

			_1029_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task875.job = sched.Enqueue(ctx, cff.Job{
			Run: task875.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task875)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1030:12
		task876 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task876.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1030_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1030,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task876.run = func(ctx context.Context) (err error) {
			taskEmitter := task876.emitter
			startTime := time.Now()
			defer func() {
				if task876.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task876.ran.Store(true)

			_1030_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task876.job = sched.Enqueue(ctx, cff.Job{
			Run: task876.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task876)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1031:12
		task877 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task877.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1031_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1031,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task877.run = func(ctx context.Context) (err error) {
			taskEmitter := task877.emitter
			startTime := time.Now()
			defer func() {
				if task877.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task877.ran.Store(true)

			_1031_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task877.job = sched.Enqueue(ctx, cff.Job{
			Run: task877.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task877)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1032:12
		task878 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task878.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1032_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1032,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task878.run = func(ctx context.Context) (err error) {
			taskEmitter := task878.emitter
			startTime := time.Now()
			defer func() {
				if task878.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task878.ran.Store(true)

			_1032_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task878.job = sched.Enqueue(ctx, cff.Job{
			Run: task878.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task878)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1033:12
		task879 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task879.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1033_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1033,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task879.run = func(ctx context.Context) (err error) {
			taskEmitter := task879.emitter
			startTime := time.Now()
			defer func() {
				if task879.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task879.ran.Store(true)

			_1033_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task879.job = sched.Enqueue(ctx, cff.Job{
			Run: task879.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task879)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1034:12
		task880 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task880.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1034_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1034,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task880.run = func(ctx context.Context) (err error) {
			taskEmitter := task880.emitter
			startTime := time.Now()
			defer func() {
				if task880.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task880.ran.Store(true)

			_1034_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task880.job = sched.Enqueue(ctx, cff.Job{
			Run: task880.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task880)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1035:12
		task881 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task881.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1035_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1035,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task881.run = func(ctx context.Context) (err error) {
			taskEmitter := task881.emitter
			startTime := time.Now()
			defer func() {
				if task881.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task881.ran.Store(true)

			_1035_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task881.job = sched.Enqueue(ctx, cff.Job{
			Run: task881.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task881)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1036:12
		task882 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task882.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1036_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1036,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task882.run = func(ctx context.Context) (err error) {
			taskEmitter := task882.emitter
			startTime := time.Now()
			defer func() {
				if task882.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task882.ran.Store(true)

			_1036_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task882.job = sched.Enqueue(ctx, cff.Job{
			Run: task882.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task882)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1037:12
		task883 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task883.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1037_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1037,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task883.run = func(ctx context.Context) (err error) {
			taskEmitter := task883.emitter
			startTime := time.Now()
			defer func() {
				if task883.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task883.ran.Store(true)

			_1037_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task883.job = sched.Enqueue(ctx, cff.Job{
			Run: task883.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task883)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1038:12
		task884 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task884.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1038_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1038,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task884.run = func(ctx context.Context) (err error) {
			taskEmitter := task884.emitter
			startTime := time.Now()
			defer func() {
				if task884.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task884.ran.Store(true)

			_1038_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task884.job = sched.Enqueue(ctx, cff.Job{
			Run: task884.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task884)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1039:12
		task885 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task885.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1039_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1039,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task885.run = func(ctx context.Context) (err error) {
			taskEmitter := task885.emitter
			startTime := time.Now()
			defer func() {
				if task885.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task885.ran.Store(true)

			_1039_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task885.job = sched.Enqueue(ctx, cff.Job{
			Run: task885.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task885)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1040:12
		task886 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task886.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1040_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1040,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task886.run = func(ctx context.Context) (err error) {
			taskEmitter := task886.emitter
			startTime := time.Now()
			defer func() {
				if task886.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task886.ran.Store(true)

			_1040_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task886.job = sched.Enqueue(ctx, cff.Job{
			Run: task886.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task886)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1041:12
		task887 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task887.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1041_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1041,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task887.run = func(ctx context.Context) (err error) {
			taskEmitter := task887.emitter
			startTime := time.Now()
			defer func() {
				if task887.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task887.ran.Store(true)

			_1041_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task887.job = sched.Enqueue(ctx, cff.Job{
			Run: task887.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task887)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1042:12
		task888 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task888.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1042_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1042,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task888.run = func(ctx context.Context) (err error) {
			taskEmitter := task888.emitter
			startTime := time.Now()
			defer func() {
				if task888.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task888.ran.Store(true)

			_1042_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task888.job = sched.Enqueue(ctx, cff.Job{
			Run: task888.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task888)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1043:12
		task889 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task889.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1043_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1043,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task889.run = func(ctx context.Context) (err error) {
			taskEmitter := task889.emitter
			startTime := time.Now()
			defer func() {
				if task889.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task889.ran.Store(true)

			_1043_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task889.job = sched.Enqueue(ctx, cff.Job{
			Run: task889.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task889)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1044:12
		task890 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task890.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1044_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1044,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task890.run = func(ctx context.Context) (err error) {
			taskEmitter := task890.emitter
			startTime := time.Now()
			defer func() {
				if task890.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task890.ran.Store(true)

			_1044_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task890.job = sched.Enqueue(ctx, cff.Job{
			Run: task890.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task890)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1045:12
		task891 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task891.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1045_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1045,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task891.run = func(ctx context.Context) (err error) {
			taskEmitter := task891.emitter
			startTime := time.Now()
			defer func() {
				if task891.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task891.ran.Store(true)

			_1045_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task891.job = sched.Enqueue(ctx, cff.Job{
			Run: task891.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task891)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1046:12
		task892 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task892.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1046_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1046,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task892.run = func(ctx context.Context) (err error) {
			taskEmitter := task892.emitter
			startTime := time.Now()
			defer func() {
				if task892.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task892.ran.Store(true)

			_1046_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task892.job = sched.Enqueue(ctx, cff.Job{
			Run: task892.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task892)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1047:12
		task893 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task893.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1047_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1047,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task893.run = func(ctx context.Context) (err error) {
			taskEmitter := task893.emitter
			startTime := time.Now()
			defer func() {
				if task893.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task893.ran.Store(true)

			_1047_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task893.job = sched.Enqueue(ctx, cff.Job{
			Run: task893.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task893)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1048:12
		task894 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task894.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1048_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1048,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task894.run = func(ctx context.Context) (err error) {
			taskEmitter := task894.emitter
			startTime := time.Now()
			defer func() {
				if task894.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task894.ran.Store(true)

			_1048_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task894.job = sched.Enqueue(ctx, cff.Job{
			Run: task894.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task894)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1049:12
		task895 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task895.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1049_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1049,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task895.run = func(ctx context.Context) (err error) {
			taskEmitter := task895.emitter
			startTime := time.Now()
			defer func() {
				if task895.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task895.ran.Store(true)

			_1049_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task895.job = sched.Enqueue(ctx, cff.Job{
			Run: task895.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task895)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1050:12
		task896 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task896.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1050_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1050,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task896.run = func(ctx context.Context) (err error) {
			taskEmitter := task896.emitter
			startTime := time.Now()
			defer func() {
				if task896.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task896.ran.Store(true)

			_1050_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task896.job = sched.Enqueue(ctx, cff.Job{
			Run: task896.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task896)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1051:12
		task897 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task897.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1051_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1051,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task897.run = func(ctx context.Context) (err error) {
			taskEmitter := task897.emitter
			startTime := time.Now()
			defer func() {
				if task897.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task897.ran.Store(true)

			_1051_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task897.job = sched.Enqueue(ctx, cff.Job{
			Run: task897.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task897)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1052:12
		task898 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task898.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1052_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1052,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task898.run = func(ctx context.Context) (err error) {
			taskEmitter := task898.emitter
			startTime := time.Now()
			defer func() {
				if task898.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task898.ran.Store(true)

			_1052_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task898.job = sched.Enqueue(ctx, cff.Job{
			Run: task898.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task898)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1053:12
		task899 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task899.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1053_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1053,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task899.run = func(ctx context.Context) (err error) {
			taskEmitter := task899.emitter
			startTime := time.Now()
			defer func() {
				if task899.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task899.ran.Store(true)

			_1053_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task899.job = sched.Enqueue(ctx, cff.Job{
			Run: task899.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task899)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1054:12
		task900 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task900.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1054_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1054,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task900.run = func(ctx context.Context) (err error) {
			taskEmitter := task900.emitter
			startTime := time.Now()
			defer func() {
				if task900.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task900.ran.Store(true)

			_1054_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task900.job = sched.Enqueue(ctx, cff.Job{
			Run: task900.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task900)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1055:12
		task901 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task901.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1055_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1055,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task901.run = func(ctx context.Context) (err error) {
			taskEmitter := task901.emitter
			startTime := time.Now()
			defer func() {
				if task901.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task901.ran.Store(true)

			_1055_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task901.job = sched.Enqueue(ctx, cff.Job{
			Run: task901.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task901)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1056:12
		task902 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task902.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1056_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1056,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task902.run = func(ctx context.Context) (err error) {
			taskEmitter := task902.emitter
			startTime := time.Now()
			defer func() {
				if task902.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task902.ran.Store(true)

			_1056_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task902.job = sched.Enqueue(ctx, cff.Job{
			Run: task902.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task902)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1057:12
		task903 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task903.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1057_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1057,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task903.run = func(ctx context.Context) (err error) {
			taskEmitter := task903.emitter
			startTime := time.Now()
			defer func() {
				if task903.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task903.ran.Store(true)

			_1057_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task903.job = sched.Enqueue(ctx, cff.Job{
			Run: task903.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task903)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1058:12
		task904 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task904.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1058_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1058,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task904.run = func(ctx context.Context) (err error) {
			taskEmitter := task904.emitter
			startTime := time.Now()
			defer func() {
				if task904.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task904.ran.Store(true)

			_1058_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task904.job = sched.Enqueue(ctx, cff.Job{
			Run: task904.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task904)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1059:12
		task905 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task905.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1059_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1059,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task905.run = func(ctx context.Context) (err error) {
			taskEmitter := task905.emitter
			startTime := time.Now()
			defer func() {
				if task905.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task905.ran.Store(true)

			_1059_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task905.job = sched.Enqueue(ctx, cff.Job{
			Run: task905.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task905)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1060:12
		task906 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task906.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1060_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1060,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task906.run = func(ctx context.Context) (err error) {
			taskEmitter := task906.emitter
			startTime := time.Now()
			defer func() {
				if task906.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task906.ran.Store(true)

			_1060_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task906.job = sched.Enqueue(ctx, cff.Job{
			Run: task906.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task906)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1061:12
		task907 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task907.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1061_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1061,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task907.run = func(ctx context.Context) (err error) {
			taskEmitter := task907.emitter
			startTime := time.Now()
			defer func() {
				if task907.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task907.ran.Store(true)

			_1061_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task907.job = sched.Enqueue(ctx, cff.Job{
			Run: task907.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task907)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1062:12
		task908 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task908.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1062_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1062,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task908.run = func(ctx context.Context) (err error) {
			taskEmitter := task908.emitter
			startTime := time.Now()
			defer func() {
				if task908.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task908.ran.Store(true)

			_1062_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task908.job = sched.Enqueue(ctx, cff.Job{
			Run: task908.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task908)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1063:12
		task909 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task909.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1063_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1063,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task909.run = func(ctx context.Context) (err error) {
			taskEmitter := task909.emitter
			startTime := time.Now()
			defer func() {
				if task909.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task909.ran.Store(true)

			_1063_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task909.job = sched.Enqueue(ctx, cff.Job{
			Run: task909.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task909)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1064:12
		task910 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task910.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1064_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1064,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task910.run = func(ctx context.Context) (err error) {
			taskEmitter := task910.emitter
			startTime := time.Now()
			defer func() {
				if task910.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task910.ran.Store(true)

			_1064_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task910.job = sched.Enqueue(ctx, cff.Job{
			Run: task910.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task910)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1065:12
		task911 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task911.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1065_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1065,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task911.run = func(ctx context.Context) (err error) {
			taskEmitter := task911.emitter
			startTime := time.Now()
			defer func() {
				if task911.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task911.ran.Store(true)

			_1065_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task911.job = sched.Enqueue(ctx, cff.Job{
			Run: task911.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task911)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1066:12
		task912 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task912.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1066_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1066,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task912.run = func(ctx context.Context) (err error) {
			taskEmitter := task912.emitter
			startTime := time.Now()
			defer func() {
				if task912.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task912.ran.Store(true)

			_1066_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task912.job = sched.Enqueue(ctx, cff.Job{
			Run: task912.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task912)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1067:12
		task913 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task913.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1067_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1067,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task913.run = func(ctx context.Context) (err error) {
			taskEmitter := task913.emitter
			startTime := time.Now()
			defer func() {
				if task913.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task913.ran.Store(true)

			_1067_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task913.job = sched.Enqueue(ctx, cff.Job{
			Run: task913.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task913)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1068:12
		task914 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task914.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1068_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1068,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task914.run = func(ctx context.Context) (err error) {
			taskEmitter := task914.emitter
			startTime := time.Now()
			defer func() {
				if task914.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task914.ran.Store(true)

			_1068_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task914.job = sched.Enqueue(ctx, cff.Job{
			Run: task914.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task914)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1069:12
		task915 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task915.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1069_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1069,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task915.run = func(ctx context.Context) (err error) {
			taskEmitter := task915.emitter
			startTime := time.Now()
			defer func() {
				if task915.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task915.ran.Store(true)

			_1069_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task915.job = sched.Enqueue(ctx, cff.Job{
			Run: task915.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task915)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1070:12
		task916 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task916.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1070_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1070,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task916.run = func(ctx context.Context) (err error) {
			taskEmitter := task916.emitter
			startTime := time.Now()
			defer func() {
				if task916.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task916.ran.Store(true)

			_1070_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task916.job = sched.Enqueue(ctx, cff.Job{
			Run: task916.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task916)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1071:12
		task917 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task917.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1071_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1071,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task917.run = func(ctx context.Context) (err error) {
			taskEmitter := task917.emitter
			startTime := time.Now()
			defer func() {
				if task917.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task917.ran.Store(true)

			_1071_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task917.job = sched.Enqueue(ctx, cff.Job{
			Run: task917.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task917)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1072:12
		task918 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task918.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1072_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1072,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task918.run = func(ctx context.Context) (err error) {
			taskEmitter := task918.emitter
			startTime := time.Now()
			defer func() {
				if task918.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task918.ran.Store(true)

			_1072_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task918.job = sched.Enqueue(ctx, cff.Job{
			Run: task918.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task918)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1073:12
		task919 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task919.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1073_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1073,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task919.run = func(ctx context.Context) (err error) {
			taskEmitter := task919.emitter
			startTime := time.Now()
			defer func() {
				if task919.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task919.ran.Store(true)

			_1073_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task919.job = sched.Enqueue(ctx, cff.Job{
			Run: task919.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task919)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1074:12
		task920 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task920.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1074_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1074,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task920.run = func(ctx context.Context) (err error) {
			taskEmitter := task920.emitter
			startTime := time.Now()
			defer func() {
				if task920.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task920.ran.Store(true)

			_1074_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task920.job = sched.Enqueue(ctx, cff.Job{
			Run: task920.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task920)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1075:12
		task921 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task921.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1075_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1075,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task921.run = func(ctx context.Context) (err error) {
			taskEmitter := task921.emitter
			startTime := time.Now()
			defer func() {
				if task921.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task921.ran.Store(true)

			_1075_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task921.job = sched.Enqueue(ctx, cff.Job{
			Run: task921.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task921)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1076:12
		task922 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task922.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1076_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1076,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task922.run = func(ctx context.Context) (err error) {
			taskEmitter := task922.emitter
			startTime := time.Now()
			defer func() {
				if task922.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task922.ran.Store(true)

			_1076_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task922.job = sched.Enqueue(ctx, cff.Job{
			Run: task922.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task922)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1077:12
		task923 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task923.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1077_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1077,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task923.run = func(ctx context.Context) (err error) {
			taskEmitter := task923.emitter
			startTime := time.Now()
			defer func() {
				if task923.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task923.ran.Store(true)

			_1077_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task923.job = sched.Enqueue(ctx, cff.Job{
			Run: task923.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task923)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1078:12
		task924 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task924.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1078_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1078,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task924.run = func(ctx context.Context) (err error) {
			taskEmitter := task924.emitter
			startTime := time.Now()
			defer func() {
				if task924.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task924.ran.Store(true)

			_1078_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task924.job = sched.Enqueue(ctx, cff.Job{
			Run: task924.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task924)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1079:12
		task925 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task925.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1079_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1079,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task925.run = func(ctx context.Context) (err error) {
			taskEmitter := task925.emitter
			startTime := time.Now()
			defer func() {
				if task925.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task925.ran.Store(true)

			_1079_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task925.job = sched.Enqueue(ctx, cff.Job{
			Run: task925.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task925)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1080:12
		task926 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task926.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1080_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1080,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task926.run = func(ctx context.Context) (err error) {
			taskEmitter := task926.emitter
			startTime := time.Now()
			defer func() {
				if task926.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task926.ran.Store(true)

			_1080_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task926.job = sched.Enqueue(ctx, cff.Job{
			Run: task926.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task926)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1081:12
		task927 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task927.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1081_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1081,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task927.run = func(ctx context.Context) (err error) {
			taskEmitter := task927.emitter
			startTime := time.Now()
			defer func() {
				if task927.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task927.ran.Store(true)

			_1081_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task927.job = sched.Enqueue(ctx, cff.Job{
			Run: task927.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task927)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1082:12
		task928 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task928.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1082_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1082,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task928.run = func(ctx context.Context) (err error) {
			taskEmitter := task928.emitter
			startTime := time.Now()
			defer func() {
				if task928.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task928.ran.Store(true)

			_1082_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task928.job = sched.Enqueue(ctx, cff.Job{
			Run: task928.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task928)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1083:12
		task929 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task929.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1083_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1083,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task929.run = func(ctx context.Context) (err error) {
			taskEmitter := task929.emitter
			startTime := time.Now()
			defer func() {
				if task929.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task929.ran.Store(true)

			_1083_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task929.job = sched.Enqueue(ctx, cff.Job{
			Run: task929.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task929)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1084:12
		task930 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task930.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1084_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1084,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task930.run = func(ctx context.Context) (err error) {
			taskEmitter := task930.emitter
			startTime := time.Now()
			defer func() {
				if task930.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task930.ran.Store(true)

			_1084_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task930.job = sched.Enqueue(ctx, cff.Job{
			Run: task930.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task930)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1085:12
		task931 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task931.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1085_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1085,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task931.run = func(ctx context.Context) (err error) {
			taskEmitter := task931.emitter
			startTime := time.Now()
			defer func() {
				if task931.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task931.ran.Store(true)

			_1085_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task931.job = sched.Enqueue(ctx, cff.Job{
			Run: task931.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task931)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1086:12
		task932 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task932.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1086_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1086,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task932.run = func(ctx context.Context) (err error) {
			taskEmitter := task932.emitter
			startTime := time.Now()
			defer func() {
				if task932.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task932.ran.Store(true)

			_1086_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task932.job = sched.Enqueue(ctx, cff.Job{
			Run: task932.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task932)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1087:12
		task933 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task933.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1087_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1087,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task933.run = func(ctx context.Context) (err error) {
			taskEmitter := task933.emitter
			startTime := time.Now()
			defer func() {
				if task933.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task933.ran.Store(true)

			_1087_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task933.job = sched.Enqueue(ctx, cff.Job{
			Run: task933.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task933)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1088:12
		task934 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task934.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1088_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1088,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task934.run = func(ctx context.Context) (err error) {
			taskEmitter := task934.emitter
			startTime := time.Now()
			defer func() {
				if task934.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task934.ran.Store(true)

			_1088_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task934.job = sched.Enqueue(ctx, cff.Job{
			Run: task934.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task934)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1089:12
		task935 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task935.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1089_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1089,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task935.run = func(ctx context.Context) (err error) {
			taskEmitter := task935.emitter
			startTime := time.Now()
			defer func() {
				if task935.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task935.ran.Store(true)

			_1089_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task935.job = sched.Enqueue(ctx, cff.Job{
			Run: task935.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task935)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1090:12
		task936 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task936.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1090_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1090,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task936.run = func(ctx context.Context) (err error) {
			taskEmitter := task936.emitter
			startTime := time.Now()
			defer func() {
				if task936.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task936.ran.Store(true)

			_1090_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task936.job = sched.Enqueue(ctx, cff.Job{
			Run: task936.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task936)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1091:12
		task937 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task937.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1091_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1091,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task937.run = func(ctx context.Context) (err error) {
			taskEmitter := task937.emitter
			startTime := time.Now()
			defer func() {
				if task937.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task937.ran.Store(true)

			_1091_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task937.job = sched.Enqueue(ctx, cff.Job{
			Run: task937.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task937)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1092:12
		task938 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task938.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1092_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1092,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task938.run = func(ctx context.Context) (err error) {
			taskEmitter := task938.emitter
			startTime := time.Now()
			defer func() {
				if task938.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task938.ran.Store(true)

			_1092_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task938.job = sched.Enqueue(ctx, cff.Job{
			Run: task938.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task938)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1093:12
		task939 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task939.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1093_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1093,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task939.run = func(ctx context.Context) (err error) {
			taskEmitter := task939.emitter
			startTime := time.Now()
			defer func() {
				if task939.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task939.ran.Store(true)

			_1093_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task939.job = sched.Enqueue(ctx, cff.Job{
			Run: task939.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task939)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1094:12
		task940 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task940.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1094_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1094,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task940.run = func(ctx context.Context) (err error) {
			taskEmitter := task940.emitter
			startTime := time.Now()
			defer func() {
				if task940.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task940.ran.Store(true)

			_1094_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task940.job = sched.Enqueue(ctx, cff.Job{
			Run: task940.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task940)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1095:12
		task941 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task941.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1095_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1095,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task941.run = func(ctx context.Context) (err error) {
			taskEmitter := task941.emitter
			startTime := time.Now()
			defer func() {
				if task941.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task941.ran.Store(true)

			_1095_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task941.job = sched.Enqueue(ctx, cff.Job{
			Run: task941.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task941)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1096:12
		task942 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task942.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1096_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1096,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task942.run = func(ctx context.Context) (err error) {
			taskEmitter := task942.emitter
			startTime := time.Now()
			defer func() {
				if task942.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task942.ran.Store(true)

			_1096_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task942.job = sched.Enqueue(ctx, cff.Job{
			Run: task942.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task942)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1097:12
		task943 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task943.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1097_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1097,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task943.run = func(ctx context.Context) (err error) {
			taskEmitter := task943.emitter
			startTime := time.Now()
			defer func() {
				if task943.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task943.ran.Store(true)

			_1097_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task943.job = sched.Enqueue(ctx, cff.Job{
			Run: task943.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task943)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1098:12
		task944 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task944.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1098_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1098,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task944.run = func(ctx context.Context) (err error) {
			taskEmitter := task944.emitter
			startTime := time.Now()
			defer func() {
				if task944.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task944.ran.Store(true)

			_1098_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task944.job = sched.Enqueue(ctx, cff.Job{
			Run: task944.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task944)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1099:12
		task945 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task945.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1099_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1099,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task945.run = func(ctx context.Context) (err error) {
			taskEmitter := task945.emitter
			startTime := time.Now()
			defer func() {
				if task945.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task945.ran.Store(true)

			_1099_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task945.job = sched.Enqueue(ctx, cff.Job{
			Run: task945.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task945)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1100:12
		task946 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task946.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1100_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1100,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task946.run = func(ctx context.Context) (err error) {
			taskEmitter := task946.emitter
			startTime := time.Now()
			defer func() {
				if task946.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task946.ran.Store(true)

			_1100_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task946.job = sched.Enqueue(ctx, cff.Job{
			Run: task946.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task946)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1101:12
		task947 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task947.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1101_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1101,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task947.run = func(ctx context.Context) (err error) {
			taskEmitter := task947.emitter
			startTime := time.Now()
			defer func() {
				if task947.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task947.ran.Store(true)

			_1101_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task947.job = sched.Enqueue(ctx, cff.Job{
			Run: task947.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task947)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1102:12
		task948 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task948.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1102_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1102,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task948.run = func(ctx context.Context) (err error) {
			taskEmitter := task948.emitter
			startTime := time.Now()
			defer func() {
				if task948.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task948.ran.Store(true)

			_1102_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task948.job = sched.Enqueue(ctx, cff.Job{
			Run: task948.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task948)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1103:12
		task949 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task949.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1103_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1103,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task949.run = func(ctx context.Context) (err error) {
			taskEmitter := task949.emitter
			startTime := time.Now()
			defer func() {
				if task949.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task949.ran.Store(true)

			_1103_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task949.job = sched.Enqueue(ctx, cff.Job{
			Run: task949.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task949)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1104:12
		task950 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task950.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1104_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1104,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task950.run = func(ctx context.Context) (err error) {
			taskEmitter := task950.emitter
			startTime := time.Now()
			defer func() {
				if task950.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task950.ran.Store(true)

			_1104_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task950.job = sched.Enqueue(ctx, cff.Job{
			Run: task950.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task950)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1105:12
		task951 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task951.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1105_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1105,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task951.run = func(ctx context.Context) (err error) {
			taskEmitter := task951.emitter
			startTime := time.Now()
			defer func() {
				if task951.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task951.ran.Store(true)

			_1105_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task951.job = sched.Enqueue(ctx, cff.Job{
			Run: task951.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task951)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1106:12
		task952 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task952.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1106_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1106,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task952.run = func(ctx context.Context) (err error) {
			taskEmitter := task952.emitter
			startTime := time.Now()
			defer func() {
				if task952.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task952.ran.Store(true)

			_1106_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task952.job = sched.Enqueue(ctx, cff.Job{
			Run: task952.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task952)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1107:12
		task953 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task953.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1107_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1107,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task953.run = func(ctx context.Context) (err error) {
			taskEmitter := task953.emitter
			startTime := time.Now()
			defer func() {
				if task953.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task953.ran.Store(true)

			_1107_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task953.job = sched.Enqueue(ctx, cff.Job{
			Run: task953.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task953)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1108:12
		task954 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task954.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1108_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1108,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task954.run = func(ctx context.Context) (err error) {
			taskEmitter := task954.emitter
			startTime := time.Now()
			defer func() {
				if task954.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task954.ran.Store(true)

			_1108_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task954.job = sched.Enqueue(ctx, cff.Job{
			Run: task954.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task954)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1109:12
		task955 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task955.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1109_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1109,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task955.run = func(ctx context.Context) (err error) {
			taskEmitter := task955.emitter
			startTime := time.Now()
			defer func() {
				if task955.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task955.ran.Store(true)

			_1109_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task955.job = sched.Enqueue(ctx, cff.Job{
			Run: task955.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task955)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1110:12
		task956 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task956.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1110_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1110,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task956.run = func(ctx context.Context) (err error) {
			taskEmitter := task956.emitter
			startTime := time.Now()
			defer func() {
				if task956.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task956.ran.Store(true)

			_1110_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task956.job = sched.Enqueue(ctx, cff.Job{
			Run: task956.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task956)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1111:12
		task957 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task957.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1111_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1111,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task957.run = func(ctx context.Context) (err error) {
			taskEmitter := task957.emitter
			startTime := time.Now()
			defer func() {
				if task957.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task957.ran.Store(true)

			_1111_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task957.job = sched.Enqueue(ctx, cff.Job{
			Run: task957.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task957)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1112:12
		task958 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task958.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1112_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1112,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task958.run = func(ctx context.Context) (err error) {
			taskEmitter := task958.emitter
			startTime := time.Now()
			defer func() {
				if task958.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task958.ran.Store(true)

			_1112_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task958.job = sched.Enqueue(ctx, cff.Job{
			Run: task958.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task958)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1113:12
		task959 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task959.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1113_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1113,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task959.run = func(ctx context.Context) (err error) {
			taskEmitter := task959.emitter
			startTime := time.Now()
			defer func() {
				if task959.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task959.ran.Store(true)

			_1113_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task959.job = sched.Enqueue(ctx, cff.Job{
			Run: task959.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task959)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1114:12
		task960 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task960.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1114_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1114,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task960.run = func(ctx context.Context) (err error) {
			taskEmitter := task960.emitter
			startTime := time.Now()
			defer func() {
				if task960.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task960.ran.Store(true)

			_1114_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task960.job = sched.Enqueue(ctx, cff.Job{
			Run: task960.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task960)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1115:12
		task961 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task961.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1115_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1115,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task961.run = func(ctx context.Context) (err error) {
			taskEmitter := task961.emitter
			startTime := time.Now()
			defer func() {
				if task961.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task961.ran.Store(true)

			_1115_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task961.job = sched.Enqueue(ctx, cff.Job{
			Run: task961.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task961)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1116:12
		task962 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task962.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1116_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1116,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task962.run = func(ctx context.Context) (err error) {
			taskEmitter := task962.emitter
			startTime := time.Now()
			defer func() {
				if task962.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task962.ran.Store(true)

			_1116_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task962.job = sched.Enqueue(ctx, cff.Job{
			Run: task962.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task962)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1117:12
		task963 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task963.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1117_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1117,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task963.run = func(ctx context.Context) (err error) {
			taskEmitter := task963.emitter
			startTime := time.Now()
			defer func() {
				if task963.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task963.ran.Store(true)

			_1117_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task963.job = sched.Enqueue(ctx, cff.Job{
			Run: task963.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task963)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1118:12
		task964 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task964.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1118_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1118,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task964.run = func(ctx context.Context) (err error) {
			taskEmitter := task964.emitter
			startTime := time.Now()
			defer func() {
				if task964.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task964.ran.Store(true)

			_1118_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task964.job = sched.Enqueue(ctx, cff.Job{
			Run: task964.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task964)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1119:12
		task965 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task965.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1119_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1119,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task965.run = func(ctx context.Context) (err error) {
			taskEmitter := task965.emitter
			startTime := time.Now()
			defer func() {
				if task965.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task965.ran.Store(true)

			_1119_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task965.job = sched.Enqueue(ctx, cff.Job{
			Run: task965.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task965)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1120:12
		task966 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task966.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1120_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1120,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task966.run = func(ctx context.Context) (err error) {
			taskEmitter := task966.emitter
			startTime := time.Now()
			defer func() {
				if task966.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task966.ran.Store(true)

			_1120_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task966.job = sched.Enqueue(ctx, cff.Job{
			Run: task966.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task966)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1121:12
		task967 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task967.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1121_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1121,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task967.run = func(ctx context.Context) (err error) {
			taskEmitter := task967.emitter
			startTime := time.Now()
			defer func() {
				if task967.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task967.ran.Store(true)

			_1121_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task967.job = sched.Enqueue(ctx, cff.Job{
			Run: task967.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task967)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1122:12
		task968 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task968.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1122_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1122,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task968.run = func(ctx context.Context) (err error) {
			taskEmitter := task968.emitter
			startTime := time.Now()
			defer func() {
				if task968.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task968.ran.Store(true)

			_1122_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task968.job = sched.Enqueue(ctx, cff.Job{
			Run: task968.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task968)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1123:12
		task969 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task969.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1123_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1123,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task969.run = func(ctx context.Context) (err error) {
			taskEmitter := task969.emitter
			startTime := time.Now()
			defer func() {
				if task969.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task969.ran.Store(true)

			_1123_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task969.job = sched.Enqueue(ctx, cff.Job{
			Run: task969.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task969)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1124:12
		task970 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task970.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1124_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1124,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task970.run = func(ctx context.Context) (err error) {
			taskEmitter := task970.emitter
			startTime := time.Now()
			defer func() {
				if task970.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task970.ran.Store(true)

			_1124_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task970.job = sched.Enqueue(ctx, cff.Job{
			Run: task970.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task970)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1125:12
		task971 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task971.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1125_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1125,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task971.run = func(ctx context.Context) (err error) {
			taskEmitter := task971.emitter
			startTime := time.Now()
			defer func() {
				if task971.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task971.ran.Store(true)

			_1125_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task971.job = sched.Enqueue(ctx, cff.Job{
			Run: task971.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task971)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1126:12
		task972 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task972.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1126_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1126,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task972.run = func(ctx context.Context) (err error) {
			taskEmitter := task972.emitter
			startTime := time.Now()
			defer func() {
				if task972.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task972.ran.Store(true)

			_1126_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task972.job = sched.Enqueue(ctx, cff.Job{
			Run: task972.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task972)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1127:12
		task973 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task973.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1127_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1127,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task973.run = func(ctx context.Context) (err error) {
			taskEmitter := task973.emitter
			startTime := time.Now()
			defer func() {
				if task973.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task973.ran.Store(true)

			_1127_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task973.job = sched.Enqueue(ctx, cff.Job{
			Run: task973.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task973)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1128:12
		task974 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task974.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1128_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1128,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task974.run = func(ctx context.Context) (err error) {
			taskEmitter := task974.emitter
			startTime := time.Now()
			defer func() {
				if task974.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task974.ran.Store(true)

			_1128_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task974.job = sched.Enqueue(ctx, cff.Job{
			Run: task974.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task974)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1129:12
		task975 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task975.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1129_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1129,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task975.run = func(ctx context.Context) (err error) {
			taskEmitter := task975.emitter
			startTime := time.Now()
			defer func() {
				if task975.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task975.ran.Store(true)

			_1129_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task975.job = sched.Enqueue(ctx, cff.Job{
			Run: task975.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task975)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1130:12
		task976 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task976.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1130_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1130,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task976.run = func(ctx context.Context) (err error) {
			taskEmitter := task976.emitter
			startTime := time.Now()
			defer func() {
				if task976.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task976.ran.Store(true)

			_1130_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task976.job = sched.Enqueue(ctx, cff.Job{
			Run: task976.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task976)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1131:12
		task977 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task977.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1131_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1131,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task977.run = func(ctx context.Context) (err error) {
			taskEmitter := task977.emitter
			startTime := time.Now()
			defer func() {
				if task977.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task977.ran.Store(true)

			_1131_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task977.job = sched.Enqueue(ctx, cff.Job{
			Run: task977.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task977)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1132:12
		task978 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task978.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1132_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1132,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task978.run = func(ctx context.Context) (err error) {
			taskEmitter := task978.emitter
			startTime := time.Now()
			defer func() {
				if task978.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task978.ran.Store(true)

			_1132_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task978.job = sched.Enqueue(ctx, cff.Job{
			Run: task978.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task978)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1133:12
		task979 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task979.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1133_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1133,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task979.run = func(ctx context.Context) (err error) {
			taskEmitter := task979.emitter
			startTime := time.Now()
			defer func() {
				if task979.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task979.ran.Store(true)

			_1133_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task979.job = sched.Enqueue(ctx, cff.Job{
			Run: task979.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task979)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1134:12
		task980 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task980.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1134_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1134,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task980.run = func(ctx context.Context) (err error) {
			taskEmitter := task980.emitter
			startTime := time.Now()
			defer func() {
				if task980.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task980.ran.Store(true)

			_1134_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task980.job = sched.Enqueue(ctx, cff.Job{
			Run: task980.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task980)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1135:12
		task981 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task981.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1135_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1135,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task981.run = func(ctx context.Context) (err error) {
			taskEmitter := task981.emitter
			startTime := time.Now()
			defer func() {
				if task981.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task981.ran.Store(true)

			_1135_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task981.job = sched.Enqueue(ctx, cff.Job{
			Run: task981.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task981)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1136:12
		task982 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task982.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1136_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1136,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task982.run = func(ctx context.Context) (err error) {
			taskEmitter := task982.emitter
			startTime := time.Now()
			defer func() {
				if task982.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task982.ran.Store(true)

			_1136_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task982.job = sched.Enqueue(ctx, cff.Job{
			Run: task982.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task982)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1137:12
		task983 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task983.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1137_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1137,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task983.run = func(ctx context.Context) (err error) {
			taskEmitter := task983.emitter
			startTime := time.Now()
			defer func() {
				if task983.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task983.ran.Store(true)

			_1137_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task983.job = sched.Enqueue(ctx, cff.Job{
			Run: task983.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task983)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1138:12
		task984 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task984.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1138_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1138,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task984.run = func(ctx context.Context) (err error) {
			taskEmitter := task984.emitter
			startTime := time.Now()
			defer func() {
				if task984.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task984.ran.Store(true)

			_1138_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task984.job = sched.Enqueue(ctx, cff.Job{
			Run: task984.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task984)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1139:12
		task985 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task985.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1139_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1139,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task985.run = func(ctx context.Context) (err error) {
			taskEmitter := task985.emitter
			startTime := time.Now()
			defer func() {
				if task985.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task985.ran.Store(true)

			_1139_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task985.job = sched.Enqueue(ctx, cff.Job{
			Run: task985.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task985)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1140:12
		task986 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task986.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1140_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1140,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task986.run = func(ctx context.Context) (err error) {
			taskEmitter := task986.emitter
			startTime := time.Now()
			defer func() {
				if task986.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task986.ran.Store(true)

			_1140_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task986.job = sched.Enqueue(ctx, cff.Job{
			Run: task986.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task986)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1141:12
		task987 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task987.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1141_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1141,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task987.run = func(ctx context.Context) (err error) {
			taskEmitter := task987.emitter
			startTime := time.Now()
			defer func() {
				if task987.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task987.ran.Store(true)

			_1141_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task987.job = sched.Enqueue(ctx, cff.Job{
			Run: task987.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task987)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1142:12
		task988 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task988.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1142_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1142,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task988.run = func(ctx context.Context) (err error) {
			taskEmitter := task988.emitter
			startTime := time.Now()
			defer func() {
				if task988.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task988.ran.Store(true)

			_1142_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task988.job = sched.Enqueue(ctx, cff.Job{
			Run: task988.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task988)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1143:12
		task989 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task989.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1143_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1143,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task989.run = func(ctx context.Context) (err error) {
			taskEmitter := task989.emitter
			startTime := time.Now()
			defer func() {
				if task989.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task989.ran.Store(true)

			_1143_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task989.job = sched.Enqueue(ctx, cff.Job{
			Run: task989.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task989)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1144:12
		task990 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task990.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1144_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1144,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task990.run = func(ctx context.Context) (err error) {
			taskEmitter := task990.emitter
			startTime := time.Now()
			defer func() {
				if task990.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task990.ran.Store(true)

			_1144_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task990.job = sched.Enqueue(ctx, cff.Job{
			Run: task990.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task990)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1145:12
		task991 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task991.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1145_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1145,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task991.run = func(ctx context.Context) (err error) {
			taskEmitter := task991.emitter
			startTime := time.Now()
			defer func() {
				if task991.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task991.ran.Store(true)

			_1145_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task991.job = sched.Enqueue(ctx, cff.Job{
			Run: task991.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task991)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1146:12
		task992 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task992.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1146_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1146,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task992.run = func(ctx context.Context) (err error) {
			taskEmitter := task992.emitter
			startTime := time.Now()
			defer func() {
				if task992.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task992.ran.Store(true)

			_1146_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task992.job = sched.Enqueue(ctx, cff.Job{
			Run: task992.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task992)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1147:12
		task993 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task993.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1147_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1147,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task993.run = func(ctx context.Context) (err error) {
			taskEmitter := task993.emitter
			startTime := time.Now()
			defer func() {
				if task993.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task993.ran.Store(true)

			_1147_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task993.job = sched.Enqueue(ctx, cff.Job{
			Run: task993.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task993)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1148:12
		task994 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task994.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1148_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1148,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task994.run = func(ctx context.Context) (err error) {
			taskEmitter := task994.emitter
			startTime := time.Now()
			defer func() {
				if task994.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task994.ran.Store(true)

			_1148_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task994.job = sched.Enqueue(ctx, cff.Job{
			Run: task994.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task994)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1149:12
		task995 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task995.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1149_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1149,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task995.run = func(ctx context.Context) (err error) {
			taskEmitter := task995.emitter
			startTime := time.Now()
			defer func() {
				if task995.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task995.ran.Store(true)

			_1149_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task995.job = sched.Enqueue(ctx, cff.Job{
			Run: task995.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task995)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1150:12
		task996 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task996.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1150_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1150,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task996.run = func(ctx context.Context) (err error) {
			taskEmitter := task996.emitter
			startTime := time.Now()
			defer func() {
				if task996.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task996.ran.Store(true)

			_1150_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task996.job = sched.Enqueue(ctx, cff.Job{
			Run: task996.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task996)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1151:12
		task997 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task997.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1151_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1151,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task997.run = func(ctx context.Context) (err error) {
			taskEmitter := task997.emitter
			startTime := time.Now()
			defer func() {
				if task997.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task997.ran.Store(true)

			_1151_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task997.job = sched.Enqueue(ctx, cff.Job{
			Run: task997.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task997)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1152:12
		task998 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task998.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1152_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1152,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task998.run = func(ctx context.Context) (err error) {
			taskEmitter := task998.emitter
			startTime := time.Now()
			defer func() {
				if task998.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task998.ran.Store(true)

			_1152_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task998.job = sched.Enqueue(ctx, cff.Job{
			Run: task998.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task998)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1153:12
		task999 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task999.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1153_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1153,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task999.run = func(ctx context.Context) (err error) {
			taskEmitter := task999.emitter
			startTime := time.Now()
			defer func() {
				if task999.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task999.ran.Store(true)

			_1153_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task999.job = sched.Enqueue(ctx, cff.Job{
			Run: task999.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task999)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1154:12
		task1000 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1000.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1154_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1154,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1000.run = func(ctx context.Context) (err error) {
			taskEmitter := task1000.emitter
			startTime := time.Now()
			defer func() {
				if task1000.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1000.ran.Store(true)

			_1154_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1000.job = sched.Enqueue(ctx, cff.Job{
			Run: task1000.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1000)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1155:12
		task1001 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1001.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1155_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1155,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1001.run = func(ctx context.Context) (err error) {
			taskEmitter := task1001.emitter
			startTime := time.Now()
			defer func() {
				if task1001.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1001.ran.Store(true)

			_1155_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1001.job = sched.Enqueue(ctx, cff.Job{
			Run: task1001.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1001)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1156:12
		task1002 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1002.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1156_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1156,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1002.run = func(ctx context.Context) (err error) {
			taskEmitter := task1002.emitter
			startTime := time.Now()
			defer func() {
				if task1002.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1002.ran.Store(true)

			_1156_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1002.job = sched.Enqueue(ctx, cff.Job{
			Run: task1002.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1002)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1157:12
		task1003 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1003.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1157_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1157,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1003.run = func(ctx context.Context) (err error) {
			taskEmitter := task1003.emitter
			startTime := time.Now()
			defer func() {
				if task1003.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1003.ran.Store(true)

			_1157_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1003.job = sched.Enqueue(ctx, cff.Job{
			Run: task1003.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1003)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1158:12
		task1004 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1004.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1158_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1158,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1004.run = func(ctx context.Context) (err error) {
			taskEmitter := task1004.emitter
			startTime := time.Now()
			defer func() {
				if task1004.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1004.ran.Store(true)

			_1158_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1004.job = sched.Enqueue(ctx, cff.Job{
			Run: task1004.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1004)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1159:12
		task1005 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1005.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1159_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1159,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1005.run = func(ctx context.Context) (err error) {
			taskEmitter := task1005.emitter
			startTime := time.Now()
			defer func() {
				if task1005.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1005.ran.Store(true)

			_1159_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1005.job = sched.Enqueue(ctx, cff.Job{
			Run: task1005.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1005)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1160:12
		task1006 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1006.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1160_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1160,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1006.run = func(ctx context.Context) (err error) {
			taskEmitter := task1006.emitter
			startTime := time.Now()
			defer func() {
				if task1006.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1006.ran.Store(true)

			_1160_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1006.job = sched.Enqueue(ctx, cff.Job{
			Run: task1006.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1006)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1161:12
		task1007 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1007.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1161_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1161,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1007.run = func(ctx context.Context) (err error) {
			taskEmitter := task1007.emitter
			startTime := time.Now()
			defer func() {
				if task1007.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1007.ran.Store(true)

			_1161_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1007.job = sched.Enqueue(ctx, cff.Job{
			Run: task1007.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1007)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1162:12
		task1008 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1008.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1162_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1162,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1008.run = func(ctx context.Context) (err error) {
			taskEmitter := task1008.emitter
			startTime := time.Now()
			defer func() {
				if task1008.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1008.ran.Store(true)

			_1162_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1008.job = sched.Enqueue(ctx, cff.Job{
			Run: task1008.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1008)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1163:12
		task1009 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1009.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1163_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1163,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1009.run = func(ctx context.Context) (err error) {
			taskEmitter := task1009.emitter
			startTime := time.Now()
			defer func() {
				if task1009.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1009.ran.Store(true)

			_1163_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1009.job = sched.Enqueue(ctx, cff.Job{
			Run: task1009.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1009)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1164:12
		task1010 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1010.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1164_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1164,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1010.run = func(ctx context.Context) (err error) {
			taskEmitter := task1010.emitter
			startTime := time.Now()
			defer func() {
				if task1010.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1010.ran.Store(true)

			_1164_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1010.job = sched.Enqueue(ctx, cff.Job{
			Run: task1010.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1010)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1165:12
		task1011 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1011.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1165_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1165,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1011.run = func(ctx context.Context) (err error) {
			taskEmitter := task1011.emitter
			startTime := time.Now()
			defer func() {
				if task1011.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1011.ran.Store(true)

			_1165_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1011.job = sched.Enqueue(ctx, cff.Job{
			Run: task1011.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1011)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1166:12
		task1012 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1012.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1166_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1166,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1012.run = func(ctx context.Context) (err error) {
			taskEmitter := task1012.emitter
			startTime := time.Now()
			defer func() {
				if task1012.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1012.ran.Store(true)

			_1166_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1012.job = sched.Enqueue(ctx, cff.Job{
			Run: task1012.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1012)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1167:12
		task1013 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1013.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1167_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1167,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1013.run = func(ctx context.Context) (err error) {
			taskEmitter := task1013.emitter
			startTime := time.Now()
			defer func() {
				if task1013.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1013.ran.Store(true)

			_1167_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1013.job = sched.Enqueue(ctx, cff.Job{
			Run: task1013.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1013)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1168:12
		task1014 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1014.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1168_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1168,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1014.run = func(ctx context.Context) (err error) {
			taskEmitter := task1014.emitter
			startTime := time.Now()
			defer func() {
				if task1014.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1014.ran.Store(true)

			_1168_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1014.job = sched.Enqueue(ctx, cff.Job{
			Run: task1014.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1014)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1169:12
		task1015 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1015.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1169_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1169,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1015.run = func(ctx context.Context) (err error) {
			taskEmitter := task1015.emitter
			startTime := time.Now()
			defer func() {
				if task1015.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1015.ran.Store(true)

			_1169_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1015.job = sched.Enqueue(ctx, cff.Job{
			Run: task1015.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1015)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1170:12
		task1016 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1016.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1170_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1170,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1016.run = func(ctx context.Context) (err error) {
			taskEmitter := task1016.emitter
			startTime := time.Now()
			defer func() {
				if task1016.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1016.ran.Store(true)

			_1170_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1016.job = sched.Enqueue(ctx, cff.Job{
			Run: task1016.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1016)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1171:12
		task1017 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1017.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1171_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1171,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1017.run = func(ctx context.Context) (err error) {
			taskEmitter := task1017.emitter
			startTime := time.Now()
			defer func() {
				if task1017.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1017.ran.Store(true)

			_1171_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1017.job = sched.Enqueue(ctx, cff.Job{
			Run: task1017.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1017)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1172:12
		task1018 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1018.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1172_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1172,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1018.run = func(ctx context.Context) (err error) {
			taskEmitter := task1018.emitter
			startTime := time.Now()
			defer func() {
				if task1018.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1018.ran.Store(true)

			_1172_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1018.job = sched.Enqueue(ctx, cff.Job{
			Run: task1018.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1018)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1173:12
		task1019 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1019.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1173_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1173,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1019.run = func(ctx context.Context) (err error) {
			taskEmitter := task1019.emitter
			startTime := time.Now()
			defer func() {
				if task1019.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1019.ran.Store(true)

			_1173_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1019.job = sched.Enqueue(ctx, cff.Job{
			Run: task1019.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1019)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1174:12
		task1020 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1020.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1174_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1174,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1020.run = func(ctx context.Context) (err error) {
			taskEmitter := task1020.emitter
			startTime := time.Now()
			defer func() {
				if task1020.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1020.ran.Store(true)

			_1174_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1020.job = sched.Enqueue(ctx, cff.Job{
			Run: task1020.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1020)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1175:12
		task1021 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1021.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1175_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1175,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1021.run = func(ctx context.Context) (err error) {
			taskEmitter := task1021.emitter
			startTime := time.Now()
			defer func() {
				if task1021.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1021.ran.Store(true)

			_1175_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1021.job = sched.Enqueue(ctx, cff.Job{
			Run: task1021.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1021)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1176:12
		task1022 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1022.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1176_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1176,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1022.run = func(ctx context.Context) (err error) {
			taskEmitter := task1022.emitter
			startTime := time.Now()
			defer func() {
				if task1022.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1022.ran.Store(true)

			_1176_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1022.job = sched.Enqueue(ctx, cff.Job{
			Run: task1022.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1022)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1177:12
		task1023 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1023.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1177_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1177,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1023.run = func(ctx context.Context) (err error) {
			taskEmitter := task1023.emitter
			startTime := time.Now()
			defer func() {
				if task1023.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1023.ran.Store(true)

			_1177_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1023.job = sched.Enqueue(ctx, cff.Job{
			Run: task1023.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1023)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1178:12
		task1024 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1024.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1178_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1178,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1024.run = func(ctx context.Context) (err error) {
			taskEmitter := task1024.emitter
			startTime := time.Now()
			defer func() {
				if task1024.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1024.ran.Store(true)

			_1178_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1024.job = sched.Enqueue(ctx, cff.Job{
			Run: task1024.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1024)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1179:12
		task1025 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1025.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1179_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1179,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1025.run = func(ctx context.Context) (err error) {
			taskEmitter := task1025.emitter
			startTime := time.Now()
			defer func() {
				if task1025.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1025.ran.Store(true)

			_1179_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1025.job = sched.Enqueue(ctx, cff.Job{
			Run: task1025.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1025)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1180:12
		task1026 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1026.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1180_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1180,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1026.run = func(ctx context.Context) (err error) {
			taskEmitter := task1026.emitter
			startTime := time.Now()
			defer func() {
				if task1026.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1026.ran.Store(true)

			_1180_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1026.job = sched.Enqueue(ctx, cff.Job{
			Run: task1026.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1026)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1181:12
		task1027 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1027.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1181_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1181,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1027.run = func(ctx context.Context) (err error) {
			taskEmitter := task1027.emitter
			startTime := time.Now()
			defer func() {
				if task1027.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1027.ran.Store(true)

			_1181_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1027.job = sched.Enqueue(ctx, cff.Job{
			Run: task1027.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1027)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1182:12
		task1028 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1028.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1182_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1182,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1028.run = func(ctx context.Context) (err error) {
			taskEmitter := task1028.emitter
			startTime := time.Now()
			defer func() {
				if task1028.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1028.ran.Store(true)

			_1182_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1028.job = sched.Enqueue(ctx, cff.Job{
			Run: task1028.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1028)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1183:12
		task1029 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1029.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1183_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1183,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1029.run = func(ctx context.Context) (err error) {
			taskEmitter := task1029.emitter
			startTime := time.Now()
			defer func() {
				if task1029.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1029.ran.Store(true)

			_1183_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1029.job = sched.Enqueue(ctx, cff.Job{
			Run: task1029.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1029)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1184:12
		task1030 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1030.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1184_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1184,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1030.run = func(ctx context.Context) (err error) {
			taskEmitter := task1030.emitter
			startTime := time.Now()
			defer func() {
				if task1030.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1030.ran.Store(true)

			_1184_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1030.job = sched.Enqueue(ctx, cff.Job{
			Run: task1030.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1030)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1185:12
		task1031 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1031.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1185_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1185,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1031.run = func(ctx context.Context) (err error) {
			taskEmitter := task1031.emitter
			startTime := time.Now()
			defer func() {
				if task1031.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1031.ran.Store(true)

			_1185_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1031.job = sched.Enqueue(ctx, cff.Job{
			Run: task1031.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1031)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1186:12
		task1032 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1032.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1186_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1186,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1032.run = func(ctx context.Context) (err error) {
			taskEmitter := task1032.emitter
			startTime := time.Now()
			defer func() {
				if task1032.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1032.ran.Store(true)

			_1186_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1032.job = sched.Enqueue(ctx, cff.Job{
			Run: task1032.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1032)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1187:12
		task1033 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1033.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1187_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1187,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1033.run = func(ctx context.Context) (err error) {
			taskEmitter := task1033.emitter
			startTime := time.Now()
			defer func() {
				if task1033.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1033.ran.Store(true)

			_1187_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1033.job = sched.Enqueue(ctx, cff.Job{
			Run: task1033.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1033)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1188:12
		task1034 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1034.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1188_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1188,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1034.run = func(ctx context.Context) (err error) {
			taskEmitter := task1034.emitter
			startTime := time.Now()
			defer func() {
				if task1034.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1034.ran.Store(true)

			_1188_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1034.job = sched.Enqueue(ctx, cff.Job{
			Run: task1034.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1034)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1189:12
		task1035 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1035.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1189_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1189,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1035.run = func(ctx context.Context) (err error) {
			taskEmitter := task1035.emitter
			startTime := time.Now()
			defer func() {
				if task1035.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1035.ran.Store(true)

			_1189_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1035.job = sched.Enqueue(ctx, cff.Job{
			Run: task1035.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1035)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1190:12
		task1036 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1036.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1190_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1190,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1036.run = func(ctx context.Context) (err error) {
			taskEmitter := task1036.emitter
			startTime := time.Now()
			defer func() {
				if task1036.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1036.ran.Store(true)

			_1190_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1036.job = sched.Enqueue(ctx, cff.Job{
			Run: task1036.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1036)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1191:12
		task1037 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1037.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1191_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1191,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1037.run = func(ctx context.Context) (err error) {
			taskEmitter := task1037.emitter
			startTime := time.Now()
			defer func() {
				if task1037.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1037.ran.Store(true)

			_1191_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1037.job = sched.Enqueue(ctx, cff.Job{
			Run: task1037.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1037)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1192:12
		task1038 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1038.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1192_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1192,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1038.run = func(ctx context.Context) (err error) {
			taskEmitter := task1038.emitter
			startTime := time.Now()
			defer func() {
				if task1038.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1038.ran.Store(true)

			_1192_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1038.job = sched.Enqueue(ctx, cff.Job{
			Run: task1038.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1038)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1193:12
		task1039 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1039.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1193_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1193,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1039.run = func(ctx context.Context) (err error) {
			taskEmitter := task1039.emitter
			startTime := time.Now()
			defer func() {
				if task1039.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1039.ran.Store(true)

			_1193_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1039.job = sched.Enqueue(ctx, cff.Job{
			Run: task1039.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1039)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1194:12
		task1040 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1040.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1194_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1194,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1040.run = func(ctx context.Context) (err error) {
			taskEmitter := task1040.emitter
			startTime := time.Now()
			defer func() {
				if task1040.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1040.ran.Store(true)

			_1194_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1040.job = sched.Enqueue(ctx, cff.Job{
			Run: task1040.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1040)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1195:12
		task1041 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1041.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1195_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1195,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1041.run = func(ctx context.Context) (err error) {
			taskEmitter := task1041.emitter
			startTime := time.Now()
			defer func() {
				if task1041.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1041.ran.Store(true)

			_1195_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1041.job = sched.Enqueue(ctx, cff.Job{
			Run: task1041.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1041)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1196:12
		task1042 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1042.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1196_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1196,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1042.run = func(ctx context.Context) (err error) {
			taskEmitter := task1042.emitter
			startTime := time.Now()
			defer func() {
				if task1042.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1042.ran.Store(true)

			_1196_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1042.job = sched.Enqueue(ctx, cff.Job{
			Run: task1042.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1042)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1197:12
		task1043 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1043.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1197_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1197,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1043.run = func(ctx context.Context) (err error) {
			taskEmitter := task1043.emitter
			startTime := time.Now()
			defer func() {
				if task1043.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1043.ran.Store(true)

			_1197_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1043.job = sched.Enqueue(ctx, cff.Job{
			Run: task1043.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1043)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1198:12
		task1044 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1044.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1198_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1198,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1044.run = func(ctx context.Context) (err error) {
			taskEmitter := task1044.emitter
			startTime := time.Now()
			defer func() {
				if task1044.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1044.ran.Store(true)

			_1198_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1044.job = sched.Enqueue(ctx, cff.Job{
			Run: task1044.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1044)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1199:12
		task1045 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1045.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1199_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1199,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1045.run = func(ctx context.Context) (err error) {
			taskEmitter := task1045.emitter
			startTime := time.Now()
			defer func() {
				if task1045.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1045.ran.Store(true)

			_1199_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1045.job = sched.Enqueue(ctx, cff.Job{
			Run: task1045.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1045)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1200:12
		task1046 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1046.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1200_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1200,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1046.run = func(ctx context.Context) (err error) {
			taskEmitter := task1046.emitter
			startTime := time.Now()
			defer func() {
				if task1046.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1046.ran.Store(true)

			_1200_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1046.job = sched.Enqueue(ctx, cff.Job{
			Run: task1046.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1046)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1201:12
		task1047 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1047.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1201_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1201,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1047.run = func(ctx context.Context) (err error) {
			taskEmitter := task1047.emitter
			startTime := time.Now()
			defer func() {
				if task1047.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1047.ran.Store(true)

			_1201_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1047.job = sched.Enqueue(ctx, cff.Job{
			Run: task1047.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1047)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1202:12
		task1048 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1048.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1202_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1202,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1048.run = func(ctx context.Context) (err error) {
			taskEmitter := task1048.emitter
			startTime := time.Now()
			defer func() {
				if task1048.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1048.ran.Store(true)

			_1202_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1048.job = sched.Enqueue(ctx, cff.Job{
			Run: task1048.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1048)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1203:12
		task1049 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1049.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1203_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1203,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1049.run = func(ctx context.Context) (err error) {
			taskEmitter := task1049.emitter
			startTime := time.Now()
			defer func() {
				if task1049.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1049.ran.Store(true)

			_1203_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1049.job = sched.Enqueue(ctx, cff.Job{
			Run: task1049.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1049)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1204:12
		task1050 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1050.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1204_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1204,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1050.run = func(ctx context.Context) (err error) {
			taskEmitter := task1050.emitter
			startTime := time.Now()
			defer func() {
				if task1050.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1050.ran.Store(true)

			_1204_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1050.job = sched.Enqueue(ctx, cff.Job{
			Run: task1050.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1050)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1205:12
		task1051 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1051.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1205_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1205,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1051.run = func(ctx context.Context) (err error) {
			taskEmitter := task1051.emitter
			startTime := time.Now()
			defer func() {
				if task1051.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1051.ran.Store(true)

			_1205_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1051.job = sched.Enqueue(ctx, cff.Job{
			Run: task1051.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1051)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1206:12
		task1052 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1052.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1206_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1206,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1052.run = func(ctx context.Context) (err error) {
			taskEmitter := task1052.emitter
			startTime := time.Now()
			defer func() {
				if task1052.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1052.ran.Store(true)

			_1206_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1052.job = sched.Enqueue(ctx, cff.Job{
			Run: task1052.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1052)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1207:12
		task1053 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1053.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1207_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1207,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1053.run = func(ctx context.Context) (err error) {
			taskEmitter := task1053.emitter
			startTime := time.Now()
			defer func() {
				if task1053.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1053.ran.Store(true)

			_1207_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1053.job = sched.Enqueue(ctx, cff.Job{
			Run: task1053.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1053)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1208:12
		task1054 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1054.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1208_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1208,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1054.run = func(ctx context.Context) (err error) {
			taskEmitter := task1054.emitter
			startTime := time.Now()
			defer func() {
				if task1054.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1054.ran.Store(true)

			_1208_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1054.job = sched.Enqueue(ctx, cff.Job{
			Run: task1054.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1054)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1209:12
		task1055 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1055.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1209_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1209,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1055.run = func(ctx context.Context) (err error) {
			taskEmitter := task1055.emitter
			startTime := time.Now()
			defer func() {
				if task1055.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1055.ran.Store(true)

			_1209_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1055.job = sched.Enqueue(ctx, cff.Job{
			Run: task1055.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1055)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1210:12
		task1056 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1056.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1210_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1210,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1056.run = func(ctx context.Context) (err error) {
			taskEmitter := task1056.emitter
			startTime := time.Now()
			defer func() {
				if task1056.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1056.ran.Store(true)

			_1210_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1056.job = sched.Enqueue(ctx, cff.Job{
			Run: task1056.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1056)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1211:12
		task1057 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1057.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1211_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1211,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1057.run = func(ctx context.Context) (err error) {
			taskEmitter := task1057.emitter
			startTime := time.Now()
			defer func() {
				if task1057.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1057.ran.Store(true)

			_1211_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1057.job = sched.Enqueue(ctx, cff.Job{
			Run: task1057.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1057)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1212:12
		task1058 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1058.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1212_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1212,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1058.run = func(ctx context.Context) (err error) {
			taskEmitter := task1058.emitter
			startTime := time.Now()
			defer func() {
				if task1058.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1058.ran.Store(true)

			_1212_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1058.job = sched.Enqueue(ctx, cff.Job{
			Run: task1058.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1058)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1213:12
		task1059 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1059.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1213_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1213,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1059.run = func(ctx context.Context) (err error) {
			taskEmitter := task1059.emitter
			startTime := time.Now()
			defer func() {
				if task1059.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1059.ran.Store(true)

			_1213_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1059.job = sched.Enqueue(ctx, cff.Job{
			Run: task1059.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1059)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1214:12
		task1060 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1060.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1214_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1214,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1060.run = func(ctx context.Context) (err error) {
			taskEmitter := task1060.emitter
			startTime := time.Now()
			defer func() {
				if task1060.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1060.ran.Store(true)

			_1214_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1060.job = sched.Enqueue(ctx, cff.Job{
			Run: task1060.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1060)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1215:12
		task1061 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1061.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1215_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1215,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1061.run = func(ctx context.Context) (err error) {
			taskEmitter := task1061.emitter
			startTime := time.Now()
			defer func() {
				if task1061.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1061.ran.Store(true)

			_1215_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1061.job = sched.Enqueue(ctx, cff.Job{
			Run: task1061.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1061)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1216:12
		task1062 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1062.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1216_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1216,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1062.run = func(ctx context.Context) (err error) {
			taskEmitter := task1062.emitter
			startTime := time.Now()
			defer func() {
				if task1062.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1062.ran.Store(true)

			_1216_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1062.job = sched.Enqueue(ctx, cff.Job{
			Run: task1062.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1062)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1217:12
		task1063 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1063.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1217_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1217,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1063.run = func(ctx context.Context) (err error) {
			taskEmitter := task1063.emitter
			startTime := time.Now()
			defer func() {
				if task1063.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1063.ran.Store(true)

			_1217_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1063.job = sched.Enqueue(ctx, cff.Job{
			Run: task1063.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1063)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1218:12
		task1064 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1064.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1218_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1218,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1064.run = func(ctx context.Context) (err error) {
			taskEmitter := task1064.emitter
			startTime := time.Now()
			defer func() {
				if task1064.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1064.ran.Store(true)

			_1218_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1064.job = sched.Enqueue(ctx, cff.Job{
			Run: task1064.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1064)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1219:12
		task1065 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1065.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1219_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1219,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1065.run = func(ctx context.Context) (err error) {
			taskEmitter := task1065.emitter
			startTime := time.Now()
			defer func() {
				if task1065.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1065.ran.Store(true)

			_1219_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1065.job = sched.Enqueue(ctx, cff.Job{
			Run: task1065.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1065)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1220:12
		task1066 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1066.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1220_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1220,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1066.run = func(ctx context.Context) (err error) {
			taskEmitter := task1066.emitter
			startTime := time.Now()
			defer func() {
				if task1066.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1066.ran.Store(true)

			_1220_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1066.job = sched.Enqueue(ctx, cff.Job{
			Run: task1066.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1066)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1221:12
		task1067 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1067.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1221_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1221,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1067.run = func(ctx context.Context) (err error) {
			taskEmitter := task1067.emitter
			startTime := time.Now()
			defer func() {
				if task1067.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1067.ran.Store(true)

			_1221_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1067.job = sched.Enqueue(ctx, cff.Job{
			Run: task1067.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1067)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1222:12
		task1068 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1068.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1222_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1222,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1068.run = func(ctx context.Context) (err error) {
			taskEmitter := task1068.emitter
			startTime := time.Now()
			defer func() {
				if task1068.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1068.ran.Store(true)

			_1222_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1068.job = sched.Enqueue(ctx, cff.Job{
			Run: task1068.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1068)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1223:12
		task1069 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1069.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1223_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1223,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1069.run = func(ctx context.Context) (err error) {
			taskEmitter := task1069.emitter
			startTime := time.Now()
			defer func() {
				if task1069.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1069.ran.Store(true)

			_1223_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1069.job = sched.Enqueue(ctx, cff.Job{
			Run: task1069.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1069)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1224:12
		task1070 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1070.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1224_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1224,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1070.run = func(ctx context.Context) (err error) {
			taskEmitter := task1070.emitter
			startTime := time.Now()
			defer func() {
				if task1070.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1070.ran.Store(true)

			_1224_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1070.job = sched.Enqueue(ctx, cff.Job{
			Run: task1070.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1070)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1225:12
		task1071 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1071.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1225_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1225,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1071.run = func(ctx context.Context) (err error) {
			taskEmitter := task1071.emitter
			startTime := time.Now()
			defer func() {
				if task1071.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1071.ran.Store(true)

			_1225_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1071.job = sched.Enqueue(ctx, cff.Job{
			Run: task1071.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1071)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1226:12
		task1072 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1072.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1226_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1226,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1072.run = func(ctx context.Context) (err error) {
			taskEmitter := task1072.emitter
			startTime := time.Now()
			defer func() {
				if task1072.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1072.ran.Store(true)

			_1226_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1072.job = sched.Enqueue(ctx, cff.Job{
			Run: task1072.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1072)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1227:12
		task1073 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1073.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1227_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1227,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1073.run = func(ctx context.Context) (err error) {
			taskEmitter := task1073.emitter
			startTime := time.Now()
			defer func() {
				if task1073.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1073.ran.Store(true)

			_1227_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1073.job = sched.Enqueue(ctx, cff.Job{
			Run: task1073.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1073)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1228:12
		task1074 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1074.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1228_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1228,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1074.run = func(ctx context.Context) (err error) {
			taskEmitter := task1074.emitter
			startTime := time.Now()
			defer func() {
				if task1074.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1074.ran.Store(true)

			_1228_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1074.job = sched.Enqueue(ctx, cff.Job{
			Run: task1074.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1074)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1229:12
		task1075 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1075.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1229_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1229,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1075.run = func(ctx context.Context) (err error) {
			taskEmitter := task1075.emitter
			startTime := time.Now()
			defer func() {
				if task1075.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1075.ran.Store(true)

			_1229_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1075.job = sched.Enqueue(ctx, cff.Job{
			Run: task1075.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1075)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1230:12
		task1076 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1076.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1230_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1230,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1076.run = func(ctx context.Context) (err error) {
			taskEmitter := task1076.emitter
			startTime := time.Now()
			defer func() {
				if task1076.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1076.ran.Store(true)

			_1230_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1076.job = sched.Enqueue(ctx, cff.Job{
			Run: task1076.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1076)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1231:12
		task1077 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1077.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1231_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1231,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1077.run = func(ctx context.Context) (err error) {
			taskEmitter := task1077.emitter
			startTime := time.Now()
			defer func() {
				if task1077.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1077.ran.Store(true)

			_1231_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1077.job = sched.Enqueue(ctx, cff.Job{
			Run: task1077.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1077)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1232:12
		task1078 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1078.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1232_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1232,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1078.run = func(ctx context.Context) (err error) {
			taskEmitter := task1078.emitter
			startTime := time.Now()
			defer func() {
				if task1078.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1078.ran.Store(true)

			_1232_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1078.job = sched.Enqueue(ctx, cff.Job{
			Run: task1078.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1078)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1233:12
		task1079 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1079.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1233_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1233,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1079.run = func(ctx context.Context) (err error) {
			taskEmitter := task1079.emitter
			startTime := time.Now()
			defer func() {
				if task1079.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1079.ran.Store(true)

			_1233_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1079.job = sched.Enqueue(ctx, cff.Job{
			Run: task1079.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1079)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1234:12
		task1080 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1080.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1234_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1234,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1080.run = func(ctx context.Context) (err error) {
			taskEmitter := task1080.emitter
			startTime := time.Now()
			defer func() {
				if task1080.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1080.ran.Store(true)

			_1234_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1080.job = sched.Enqueue(ctx, cff.Job{
			Run: task1080.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1080)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1235:12
		task1081 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1081.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1235_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1235,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1081.run = func(ctx context.Context) (err error) {
			taskEmitter := task1081.emitter
			startTime := time.Now()
			defer func() {
				if task1081.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1081.ran.Store(true)

			_1235_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1081.job = sched.Enqueue(ctx, cff.Job{
			Run: task1081.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1081)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1236:12
		task1082 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1082.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1236_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1236,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1082.run = func(ctx context.Context) (err error) {
			taskEmitter := task1082.emitter
			startTime := time.Now()
			defer func() {
				if task1082.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1082.ran.Store(true)

			_1236_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1082.job = sched.Enqueue(ctx, cff.Job{
			Run: task1082.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1082)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1237:12
		task1083 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1083.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1237_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1237,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1083.run = func(ctx context.Context) (err error) {
			taskEmitter := task1083.emitter
			startTime := time.Now()
			defer func() {
				if task1083.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1083.ran.Store(true)

			_1237_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1083.job = sched.Enqueue(ctx, cff.Job{
			Run: task1083.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1083)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1238:12
		task1084 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1084.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1238_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1238,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1084.run = func(ctx context.Context) (err error) {
			taskEmitter := task1084.emitter
			startTime := time.Now()
			defer func() {
				if task1084.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1084.ran.Store(true)

			_1238_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1084.job = sched.Enqueue(ctx, cff.Job{
			Run: task1084.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1084)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1239:12
		task1085 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1085.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1239_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1239,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1085.run = func(ctx context.Context) (err error) {
			taskEmitter := task1085.emitter
			startTime := time.Now()
			defer func() {
				if task1085.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1085.ran.Store(true)

			_1239_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1085.job = sched.Enqueue(ctx, cff.Job{
			Run: task1085.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1085)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1240:12
		task1086 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1086.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1240_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1240,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1086.run = func(ctx context.Context) (err error) {
			taskEmitter := task1086.emitter
			startTime := time.Now()
			defer func() {
				if task1086.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1086.ran.Store(true)

			_1240_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1086.job = sched.Enqueue(ctx, cff.Job{
			Run: task1086.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1086)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1241:12
		task1087 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1087.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1241_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1241,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1087.run = func(ctx context.Context) (err error) {
			taskEmitter := task1087.emitter
			startTime := time.Now()
			defer func() {
				if task1087.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1087.ran.Store(true)

			_1241_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1087.job = sched.Enqueue(ctx, cff.Job{
			Run: task1087.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1087)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1242:12
		task1088 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1088.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1242_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1242,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1088.run = func(ctx context.Context) (err error) {
			taskEmitter := task1088.emitter
			startTime := time.Now()
			defer func() {
				if task1088.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1088.ran.Store(true)

			_1242_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1088.job = sched.Enqueue(ctx, cff.Job{
			Run: task1088.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1088)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1243:12
		task1089 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1089.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1243_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1243,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1089.run = func(ctx context.Context) (err error) {
			taskEmitter := task1089.emitter
			startTime := time.Now()
			defer func() {
				if task1089.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1089.ran.Store(true)

			_1243_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1089.job = sched.Enqueue(ctx, cff.Job{
			Run: task1089.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1089)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1244:12
		task1090 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1090.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1244_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1244,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1090.run = func(ctx context.Context) (err error) {
			taskEmitter := task1090.emitter
			startTime := time.Now()
			defer func() {
				if task1090.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1090.ran.Store(true)

			_1244_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1090.job = sched.Enqueue(ctx, cff.Job{
			Run: task1090.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1090)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1245:12
		task1091 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1091.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1245_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1245,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1091.run = func(ctx context.Context) (err error) {
			taskEmitter := task1091.emitter
			startTime := time.Now()
			defer func() {
				if task1091.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1091.ran.Store(true)

			_1245_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1091.job = sched.Enqueue(ctx, cff.Job{
			Run: task1091.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1091)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1246:12
		task1092 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1092.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1246_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1246,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1092.run = func(ctx context.Context) (err error) {
			taskEmitter := task1092.emitter
			startTime := time.Now()
			defer func() {
				if task1092.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1092.ran.Store(true)

			_1246_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1092.job = sched.Enqueue(ctx, cff.Job{
			Run: task1092.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1092)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1247:12
		task1093 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1093.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1247_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1247,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1093.run = func(ctx context.Context) (err error) {
			taskEmitter := task1093.emitter
			startTime := time.Now()
			defer func() {
				if task1093.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1093.ran.Store(true)

			_1247_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1093.job = sched.Enqueue(ctx, cff.Job{
			Run: task1093.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1093)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1248:12
		task1094 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1094.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1248_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1248,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1094.run = func(ctx context.Context) (err error) {
			taskEmitter := task1094.emitter
			startTime := time.Now()
			defer func() {
				if task1094.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1094.ran.Store(true)

			_1248_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1094.job = sched.Enqueue(ctx, cff.Job{
			Run: task1094.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1094)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1249:12
		task1095 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1095.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1249_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1249,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1095.run = func(ctx context.Context) (err error) {
			taskEmitter := task1095.emitter
			startTime := time.Now()
			defer func() {
				if task1095.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1095.ran.Store(true)

			_1249_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1095.job = sched.Enqueue(ctx, cff.Job{
			Run: task1095.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1095)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1250:12
		task1096 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1096.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1250_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1250,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1096.run = func(ctx context.Context) (err error) {
			taskEmitter := task1096.emitter
			startTime := time.Now()
			defer func() {
				if task1096.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1096.ran.Store(true)

			_1250_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1096.job = sched.Enqueue(ctx, cff.Job{
			Run: task1096.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1096)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1251:12
		task1097 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1097.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1251_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1251,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1097.run = func(ctx context.Context) (err error) {
			taskEmitter := task1097.emitter
			startTime := time.Now()
			defer func() {
				if task1097.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1097.ran.Store(true)

			_1251_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1097.job = sched.Enqueue(ctx, cff.Job{
			Run: task1097.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1097)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1252:12
		task1098 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1098.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1252_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1252,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1098.run = func(ctx context.Context) (err error) {
			taskEmitter := task1098.emitter
			startTime := time.Now()
			defer func() {
				if task1098.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1098.ran.Store(true)

			_1252_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1098.job = sched.Enqueue(ctx, cff.Job{
			Run: task1098.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1098)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1253:12
		task1099 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1099.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1253_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1253,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1099.run = func(ctx context.Context) (err error) {
			taskEmitter := task1099.emitter
			startTime := time.Now()
			defer func() {
				if task1099.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1099.ran.Store(true)

			_1253_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1099.job = sched.Enqueue(ctx, cff.Job{
			Run: task1099.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1099)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1254:12
		task1100 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1100.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1254_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1254,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1100.run = func(ctx context.Context) (err error) {
			taskEmitter := task1100.emitter
			startTime := time.Now()
			defer func() {
				if task1100.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1100.ran.Store(true)

			_1254_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1100.job = sched.Enqueue(ctx, cff.Job{
			Run: task1100.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1100)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1255:12
		task1101 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1101.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1255_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1255,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1101.run = func(ctx context.Context) (err error) {
			taskEmitter := task1101.emitter
			startTime := time.Now()
			defer func() {
				if task1101.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1101.ran.Store(true)

			_1255_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1101.job = sched.Enqueue(ctx, cff.Job{
			Run: task1101.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1101)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1256:12
		task1102 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1102.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1256_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1256,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1102.run = func(ctx context.Context) (err error) {
			taskEmitter := task1102.emitter
			startTime := time.Now()
			defer func() {
				if task1102.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1102.ran.Store(true)

			_1256_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1102.job = sched.Enqueue(ctx, cff.Job{
			Run: task1102.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1102)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1257:12
		task1103 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1103.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1257_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1257,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1103.run = func(ctx context.Context) (err error) {
			taskEmitter := task1103.emitter
			startTime := time.Now()
			defer func() {
				if task1103.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1103.ran.Store(true)

			_1257_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1103.job = sched.Enqueue(ctx, cff.Job{
			Run: task1103.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1103)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1258:12
		task1104 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1104.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1258_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1258,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1104.run = func(ctx context.Context) (err error) {
			taskEmitter := task1104.emitter
			startTime := time.Now()
			defer func() {
				if task1104.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1104.ran.Store(true)

			_1258_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1104.job = sched.Enqueue(ctx, cff.Job{
			Run: task1104.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1104)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1259:12
		task1105 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1105.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1259_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1259,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1105.run = func(ctx context.Context) (err error) {
			taskEmitter := task1105.emitter
			startTime := time.Now()
			defer func() {
				if task1105.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1105.ran.Store(true)

			_1259_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1105.job = sched.Enqueue(ctx, cff.Job{
			Run: task1105.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1105)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1260:12
		task1106 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1106.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1260_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1260,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1106.run = func(ctx context.Context) (err error) {
			taskEmitter := task1106.emitter
			startTime := time.Now()
			defer func() {
				if task1106.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1106.ran.Store(true)

			_1260_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1106.job = sched.Enqueue(ctx, cff.Job{
			Run: task1106.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1106)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1261:12
		task1107 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1107.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1261_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1261,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1107.run = func(ctx context.Context) (err error) {
			taskEmitter := task1107.emitter
			startTime := time.Now()
			defer func() {
				if task1107.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1107.ran.Store(true)

			_1261_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1107.job = sched.Enqueue(ctx, cff.Job{
			Run: task1107.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1107)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1262:12
		task1108 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1108.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1262_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1262,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1108.run = func(ctx context.Context) (err error) {
			taskEmitter := task1108.emitter
			startTime := time.Now()
			defer func() {
				if task1108.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1108.ran.Store(true)

			_1262_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1108.job = sched.Enqueue(ctx, cff.Job{
			Run: task1108.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1108)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1263:12
		task1109 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1109.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1263_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1263,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1109.run = func(ctx context.Context) (err error) {
			taskEmitter := task1109.emitter
			startTime := time.Now()
			defer func() {
				if task1109.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1109.ran.Store(true)

			_1263_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1109.job = sched.Enqueue(ctx, cff.Job{
			Run: task1109.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1109)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1264:12
		task1110 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1110.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1264_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1264,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1110.run = func(ctx context.Context) (err error) {
			taskEmitter := task1110.emitter
			startTime := time.Now()
			defer func() {
				if task1110.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1110.ran.Store(true)

			_1264_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1110.job = sched.Enqueue(ctx, cff.Job{
			Run: task1110.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1110)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1265:12
		task1111 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1111.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1265_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1265,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1111.run = func(ctx context.Context) (err error) {
			taskEmitter := task1111.emitter
			startTime := time.Now()
			defer func() {
				if task1111.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1111.ran.Store(true)

			_1265_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1111.job = sched.Enqueue(ctx, cff.Job{
			Run: task1111.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1111)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1266:12
		task1112 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1112.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1266_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1266,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1112.run = func(ctx context.Context) (err error) {
			taskEmitter := task1112.emitter
			startTime := time.Now()
			defer func() {
				if task1112.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1112.ran.Store(true)

			_1266_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1112.job = sched.Enqueue(ctx, cff.Job{
			Run: task1112.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1112)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1267:12
		task1113 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1113.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1267_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1267,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1113.run = func(ctx context.Context) (err error) {
			taskEmitter := task1113.emitter
			startTime := time.Now()
			defer func() {
				if task1113.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1113.ran.Store(true)

			_1267_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1113.job = sched.Enqueue(ctx, cff.Job{
			Run: task1113.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1113)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1268:12
		task1114 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1114.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1268_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1268,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1114.run = func(ctx context.Context) (err error) {
			taskEmitter := task1114.emitter
			startTime := time.Now()
			defer func() {
				if task1114.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1114.ran.Store(true)

			_1268_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1114.job = sched.Enqueue(ctx, cff.Job{
			Run: task1114.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1114)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1269:12
		task1115 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1115.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1269_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1269,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1115.run = func(ctx context.Context) (err error) {
			taskEmitter := task1115.emitter
			startTime := time.Now()
			defer func() {
				if task1115.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1115.ran.Store(true)

			_1269_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1115.job = sched.Enqueue(ctx, cff.Job{
			Run: task1115.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1115)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1270:12
		task1116 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1116.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1270_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1270,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1116.run = func(ctx context.Context) (err error) {
			taskEmitter := task1116.emitter
			startTime := time.Now()
			defer func() {
				if task1116.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1116.ran.Store(true)

			_1270_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1116.job = sched.Enqueue(ctx, cff.Job{
			Run: task1116.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1116)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1271:12
		task1117 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1117.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1271_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1271,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1117.run = func(ctx context.Context) (err error) {
			taskEmitter := task1117.emitter
			startTime := time.Now()
			defer func() {
				if task1117.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1117.ran.Store(true)

			_1271_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1117.job = sched.Enqueue(ctx, cff.Job{
			Run: task1117.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1117)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1272:12
		task1118 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1118.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1272_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1272,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1118.run = func(ctx context.Context) (err error) {
			taskEmitter := task1118.emitter
			startTime := time.Now()
			defer func() {
				if task1118.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1118.ran.Store(true)

			_1272_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1118.job = sched.Enqueue(ctx, cff.Job{
			Run: task1118.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1118)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1273:12
		task1119 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1119.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1273_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1273,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1119.run = func(ctx context.Context) (err error) {
			taskEmitter := task1119.emitter
			startTime := time.Now()
			defer func() {
				if task1119.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1119.ran.Store(true)

			_1273_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1119.job = sched.Enqueue(ctx, cff.Job{
			Run: task1119.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1119)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1274:12
		task1120 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1120.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1274_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1274,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1120.run = func(ctx context.Context) (err error) {
			taskEmitter := task1120.emitter
			startTime := time.Now()
			defer func() {
				if task1120.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1120.ran.Store(true)

			_1274_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1120.job = sched.Enqueue(ctx, cff.Job{
			Run: task1120.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1120)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1275:12
		task1121 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1121.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1275_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1275,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1121.run = func(ctx context.Context) (err error) {
			taskEmitter := task1121.emitter
			startTime := time.Now()
			defer func() {
				if task1121.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1121.ran.Store(true)

			_1275_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1121.job = sched.Enqueue(ctx, cff.Job{
			Run: task1121.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1121)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1276:12
		task1122 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1122.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1276_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1276,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1122.run = func(ctx context.Context) (err error) {
			taskEmitter := task1122.emitter
			startTime := time.Now()
			defer func() {
				if task1122.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1122.ran.Store(true)

			_1276_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1122.job = sched.Enqueue(ctx, cff.Job{
			Run: task1122.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1122)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1277:12
		task1123 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1123.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1277_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1277,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1123.run = func(ctx context.Context) (err error) {
			taskEmitter := task1123.emitter
			startTime := time.Now()
			defer func() {
				if task1123.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1123.ran.Store(true)

			_1277_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1123.job = sched.Enqueue(ctx, cff.Job{
			Run: task1123.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1123)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1278:12
		task1124 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1124.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1278_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1278,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1124.run = func(ctx context.Context) (err error) {
			taskEmitter := task1124.emitter
			startTime := time.Now()
			defer func() {
				if task1124.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1124.ran.Store(true)

			_1278_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1124.job = sched.Enqueue(ctx, cff.Job{
			Run: task1124.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1124)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1279:12
		task1125 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1125.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1279_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1279,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1125.run = func(ctx context.Context) (err error) {
			taskEmitter := task1125.emitter
			startTime := time.Now()
			defer func() {
				if task1125.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1125.ran.Store(true)

			_1279_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1125.job = sched.Enqueue(ctx, cff.Job{
			Run: task1125.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1125)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1280:12
		task1126 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1126.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1280_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1280,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1126.run = func(ctx context.Context) (err error) {
			taskEmitter := task1126.emitter
			startTime := time.Now()
			defer func() {
				if task1126.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1126.ran.Store(true)

			_1280_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1126.job = sched.Enqueue(ctx, cff.Job{
			Run: task1126.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1126)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1281:12
		task1127 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1127.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1281_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1281,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1127.run = func(ctx context.Context) (err error) {
			taskEmitter := task1127.emitter
			startTime := time.Now()
			defer func() {
				if task1127.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1127.ran.Store(true)

			_1281_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1127.job = sched.Enqueue(ctx, cff.Job{
			Run: task1127.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1127)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1282:12
		task1128 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1128.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1282_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1282,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1128.run = func(ctx context.Context) (err error) {
			taskEmitter := task1128.emitter
			startTime := time.Now()
			defer func() {
				if task1128.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1128.ran.Store(true)

			_1282_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1128.job = sched.Enqueue(ctx, cff.Job{
			Run: task1128.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1128)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1283:12
		task1129 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1129.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1283_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1283,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1129.run = func(ctx context.Context) (err error) {
			taskEmitter := task1129.emitter
			startTime := time.Now()
			defer func() {
				if task1129.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1129.ran.Store(true)

			_1283_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1129.job = sched.Enqueue(ctx, cff.Job{
			Run: task1129.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1129)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1284:12
		task1130 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1130.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1284_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1284,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1130.run = func(ctx context.Context) (err error) {
			taskEmitter := task1130.emitter
			startTime := time.Now()
			defer func() {
				if task1130.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1130.ran.Store(true)

			_1284_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1130.job = sched.Enqueue(ctx, cff.Job{
			Run: task1130.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1130)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1285:12
		task1131 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1131.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1285_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1285,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1131.run = func(ctx context.Context) (err error) {
			taskEmitter := task1131.emitter
			startTime := time.Now()
			defer func() {
				if task1131.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1131.ran.Store(true)

			_1285_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1131.job = sched.Enqueue(ctx, cff.Job{
			Run: task1131.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1131)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1286:12
		task1132 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1132.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1286_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1286,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1132.run = func(ctx context.Context) (err error) {
			taskEmitter := task1132.emitter
			startTime := time.Now()
			defer func() {
				if task1132.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1132.ran.Store(true)

			_1286_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1132.job = sched.Enqueue(ctx, cff.Job{
			Run: task1132.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1132)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1287:12
		task1133 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1133.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1287_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1287,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1133.run = func(ctx context.Context) (err error) {
			taskEmitter := task1133.emitter
			startTime := time.Now()
			defer func() {
				if task1133.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1133.ran.Store(true)

			_1287_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1133.job = sched.Enqueue(ctx, cff.Job{
			Run: task1133.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1133)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1288:12
		task1134 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1134.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1288_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1288,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1134.run = func(ctx context.Context) (err error) {
			taskEmitter := task1134.emitter
			startTime := time.Now()
			defer func() {
				if task1134.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1134.ran.Store(true)

			_1288_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1134.job = sched.Enqueue(ctx, cff.Job{
			Run: task1134.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1134)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1289:12
		task1135 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1135.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1289_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1289,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1135.run = func(ctx context.Context) (err error) {
			taskEmitter := task1135.emitter
			startTime := time.Now()
			defer func() {
				if task1135.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1135.ran.Store(true)

			_1289_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1135.job = sched.Enqueue(ctx, cff.Job{
			Run: task1135.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1135)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1290:12
		task1136 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1136.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1290_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1290,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1136.run = func(ctx context.Context) (err error) {
			taskEmitter := task1136.emitter
			startTime := time.Now()
			defer func() {
				if task1136.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1136.ran.Store(true)

			_1290_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1136.job = sched.Enqueue(ctx, cff.Job{
			Run: task1136.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1136)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1291:12
		task1137 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1137.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1291_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1291,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1137.run = func(ctx context.Context) (err error) {
			taskEmitter := task1137.emitter
			startTime := time.Now()
			defer func() {
				if task1137.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1137.ran.Store(true)

			_1291_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1137.job = sched.Enqueue(ctx, cff.Job{
			Run: task1137.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1137)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1292:12
		task1138 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1138.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1292_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1292,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1138.run = func(ctx context.Context) (err error) {
			taskEmitter := task1138.emitter
			startTime := time.Now()
			defer func() {
				if task1138.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1138.ran.Store(true)

			_1292_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1138.job = sched.Enqueue(ctx, cff.Job{
			Run: task1138.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1138)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1293:12
		task1139 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1139.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1293_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1293,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1139.run = func(ctx context.Context) (err error) {
			taskEmitter := task1139.emitter
			startTime := time.Now()
			defer func() {
				if task1139.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1139.ran.Store(true)

			_1293_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1139.job = sched.Enqueue(ctx, cff.Job{
			Run: task1139.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1139)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1294:12
		task1140 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1140.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1294_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1294,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1140.run = func(ctx context.Context) (err error) {
			taskEmitter := task1140.emitter
			startTime := time.Now()
			defer func() {
				if task1140.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1140.ran.Store(true)

			_1294_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1140.job = sched.Enqueue(ctx, cff.Job{
			Run: task1140.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1140)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1295:12
		task1141 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1141.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1295_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1295,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1141.run = func(ctx context.Context) (err error) {
			taskEmitter := task1141.emitter
			startTime := time.Now()
			defer func() {
				if task1141.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1141.ran.Store(true)

			_1295_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1141.job = sched.Enqueue(ctx, cff.Job{
			Run: task1141.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1141)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1296:12
		task1142 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1142.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1296_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1296,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1142.run = func(ctx context.Context) (err error) {
			taskEmitter := task1142.emitter
			startTime := time.Now()
			defer func() {
				if task1142.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1142.ran.Store(true)

			_1296_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1142.job = sched.Enqueue(ctx, cff.Job{
			Run: task1142.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1142)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1297:12
		task1143 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1143.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1297_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1297,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1143.run = func(ctx context.Context) (err error) {
			taskEmitter := task1143.emitter
			startTime := time.Now()
			defer func() {
				if task1143.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1143.ran.Store(true)

			_1297_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1143.job = sched.Enqueue(ctx, cff.Job{
			Run: task1143.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1143)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1298:12
		task1144 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1144.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1298_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1298,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1144.run = func(ctx context.Context) (err error) {
			taskEmitter := task1144.emitter
			startTime := time.Now()
			defer func() {
				if task1144.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1144.ran.Store(true)

			_1298_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1144.job = sched.Enqueue(ctx, cff.Job{
			Run: task1144.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1144)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1299:12
		task1145 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1145.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1299_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1299,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1145.run = func(ctx context.Context) (err error) {
			taskEmitter := task1145.emitter
			startTime := time.Now()
			defer func() {
				if task1145.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1145.ran.Store(true)

			_1299_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1145.job = sched.Enqueue(ctx, cff.Job{
			Run: task1145.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1145)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1300:12
		task1146 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1146.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1300_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1300,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1146.run = func(ctx context.Context) (err error) {
			taskEmitter := task1146.emitter
			startTime := time.Now()
			defer func() {
				if task1146.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1146.ran.Store(true)

			_1300_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1146.job = sched.Enqueue(ctx, cff.Job{
			Run: task1146.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1146)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1301:12
		task1147 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1147.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1301_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1301,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1147.run = func(ctx context.Context) (err error) {
			taskEmitter := task1147.emitter
			startTime := time.Now()
			defer func() {
				if task1147.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1147.ran.Store(true)

			_1301_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1147.job = sched.Enqueue(ctx, cff.Job{
			Run: task1147.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1147)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1302:12
		task1148 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1148.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1302_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1302,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1148.run = func(ctx context.Context) (err error) {
			taskEmitter := task1148.emitter
			startTime := time.Now()
			defer func() {
				if task1148.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1148.ran.Store(true)

			_1302_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1148.job = sched.Enqueue(ctx, cff.Job{
			Run: task1148.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1148)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1303:12
		task1149 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1149.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1303_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1303,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1149.run = func(ctx context.Context) (err error) {
			taskEmitter := task1149.emitter
			startTime := time.Now()
			defer func() {
				if task1149.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1149.ran.Store(true)

			_1303_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1149.job = sched.Enqueue(ctx, cff.Job{
			Run: task1149.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1149)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1304:12
		task1150 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1150.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1304_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1304,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1150.run = func(ctx context.Context) (err error) {
			taskEmitter := task1150.emitter
			startTime := time.Now()
			defer func() {
				if task1150.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1150.ran.Store(true)

			_1304_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1150.job = sched.Enqueue(ctx, cff.Job{
			Run: task1150.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1150)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1305:12
		task1151 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1151.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1305_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1305,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1151.run = func(ctx context.Context) (err error) {
			taskEmitter := task1151.emitter
			startTime := time.Now()
			defer func() {
				if task1151.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1151.ran.Store(true)

			_1305_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1151.job = sched.Enqueue(ctx, cff.Job{
			Run: task1151.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1151)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1306:12
		task1152 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1152.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1306_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1306,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1152.run = func(ctx context.Context) (err error) {
			taskEmitter := task1152.emitter
			startTime := time.Now()
			defer func() {
				if task1152.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1152.ran.Store(true)

			_1306_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1152.job = sched.Enqueue(ctx, cff.Job{
			Run: task1152.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1152)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1307:12
		task1153 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1153.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1307_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1307,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1153.run = func(ctx context.Context) (err error) {
			taskEmitter := task1153.emitter
			startTime := time.Now()
			defer func() {
				if task1153.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1153.ran.Store(true)

			_1307_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1153.job = sched.Enqueue(ctx, cff.Job{
			Run: task1153.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1153)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1308:12
		task1154 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1154.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1308_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1308,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1154.run = func(ctx context.Context) (err error) {
			taskEmitter := task1154.emitter
			startTime := time.Now()
			defer func() {
				if task1154.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1154.ran.Store(true)

			_1308_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1154.job = sched.Enqueue(ctx, cff.Job{
			Run: task1154.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1154)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1309:12
		task1155 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1155.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1309_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1309,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1155.run = func(ctx context.Context) (err error) {
			taskEmitter := task1155.emitter
			startTime := time.Now()
			defer func() {
				if task1155.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1155.ran.Store(true)

			_1309_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1155.job = sched.Enqueue(ctx, cff.Job{
			Run: task1155.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1155)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1310:12
		task1156 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1156.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1310_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1310,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1156.run = func(ctx context.Context) (err error) {
			taskEmitter := task1156.emitter
			startTime := time.Now()
			defer func() {
				if task1156.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1156.ran.Store(true)

			_1310_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1156.job = sched.Enqueue(ctx, cff.Job{
			Run: task1156.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1156)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1311:12
		task1157 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1157.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1311_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1311,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1157.run = func(ctx context.Context) (err error) {
			taskEmitter := task1157.emitter
			startTime := time.Now()
			defer func() {
				if task1157.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1157.ran.Store(true)

			_1311_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1157.job = sched.Enqueue(ctx, cff.Job{
			Run: task1157.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1157)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1312:12
		task1158 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1158.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1312_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1312,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1158.run = func(ctx context.Context) (err error) {
			taskEmitter := task1158.emitter
			startTime := time.Now()
			defer func() {
				if task1158.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1158.ran.Store(true)

			_1312_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1158.job = sched.Enqueue(ctx, cff.Job{
			Run: task1158.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1158)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1313:12
		task1159 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1159.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1313_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1313,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1159.run = func(ctx context.Context) (err error) {
			taskEmitter := task1159.emitter
			startTime := time.Now()
			defer func() {
				if task1159.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1159.ran.Store(true)

			_1313_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1159.job = sched.Enqueue(ctx, cff.Job{
			Run: task1159.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1159)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1314:12
		task1160 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1160.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1314_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1314,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1160.run = func(ctx context.Context) (err error) {
			taskEmitter := task1160.emitter
			startTime := time.Now()
			defer func() {
				if task1160.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1160.ran.Store(true)

			_1314_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1160.job = sched.Enqueue(ctx, cff.Job{
			Run: task1160.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1160)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1315:12
		task1161 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1161.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1315_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1315,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1161.run = func(ctx context.Context) (err error) {
			taskEmitter := task1161.emitter
			startTime := time.Now()
			defer func() {
				if task1161.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1161.ran.Store(true)

			_1315_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1161.job = sched.Enqueue(ctx, cff.Job{
			Run: task1161.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1161)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1316:12
		task1162 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1162.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1316_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1316,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1162.run = func(ctx context.Context) (err error) {
			taskEmitter := task1162.emitter
			startTime := time.Now()
			defer func() {
				if task1162.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1162.ran.Store(true)

			_1316_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1162.job = sched.Enqueue(ctx, cff.Job{
			Run: task1162.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1162)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1317:12
		task1163 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1163.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1317_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1317,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1163.run = func(ctx context.Context) (err error) {
			taskEmitter := task1163.emitter
			startTime := time.Now()
			defer func() {
				if task1163.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1163.ran.Store(true)

			_1317_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1163.job = sched.Enqueue(ctx, cff.Job{
			Run: task1163.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1163)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1318:12
		task1164 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1164.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1318_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1318,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1164.run = func(ctx context.Context) (err error) {
			taskEmitter := task1164.emitter
			startTime := time.Now()
			defer func() {
				if task1164.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1164.ran.Store(true)

			_1318_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1164.job = sched.Enqueue(ctx, cff.Job{
			Run: task1164.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1164)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1319:12
		task1165 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1165.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1319_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1319,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1165.run = func(ctx context.Context) (err error) {
			taskEmitter := task1165.emitter
			startTime := time.Now()
			defer func() {
				if task1165.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1165.ran.Store(true)

			_1319_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1165.job = sched.Enqueue(ctx, cff.Job{
			Run: task1165.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1165)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1320:12
		task1166 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1166.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1320_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1320,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1166.run = func(ctx context.Context) (err error) {
			taskEmitter := task1166.emitter
			startTime := time.Now()
			defer func() {
				if task1166.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1166.ran.Store(true)

			_1320_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1166.job = sched.Enqueue(ctx, cff.Job{
			Run: task1166.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1166)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1321:12
		task1167 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1167.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1321_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1321,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1167.run = func(ctx context.Context) (err error) {
			taskEmitter := task1167.emitter
			startTime := time.Now()
			defer func() {
				if task1167.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1167.ran.Store(true)

			_1321_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1167.job = sched.Enqueue(ctx, cff.Job{
			Run: task1167.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1167)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1322:12
		task1168 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1168.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1322_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1322,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1168.run = func(ctx context.Context) (err error) {
			taskEmitter := task1168.emitter
			startTime := time.Now()
			defer func() {
				if task1168.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1168.ran.Store(true)

			_1322_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1168.job = sched.Enqueue(ctx, cff.Job{
			Run: task1168.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1168)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1323:12
		task1169 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1169.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1323_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1323,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1169.run = func(ctx context.Context) (err error) {
			taskEmitter := task1169.emitter
			startTime := time.Now()
			defer func() {
				if task1169.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1169.ran.Store(true)

			_1323_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1169.job = sched.Enqueue(ctx, cff.Job{
			Run: task1169.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1169)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1324:12
		task1170 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1170.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1324_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1324,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1170.run = func(ctx context.Context) (err error) {
			taskEmitter := task1170.emitter
			startTime := time.Now()
			defer func() {
				if task1170.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1170.ran.Store(true)

			_1324_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1170.job = sched.Enqueue(ctx, cff.Job{
			Run: task1170.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1170)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1325:12
		task1171 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1171.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1325_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1325,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1171.run = func(ctx context.Context) (err error) {
			taskEmitter := task1171.emitter
			startTime := time.Now()
			defer func() {
				if task1171.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1171.ran.Store(true)

			_1325_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1171.job = sched.Enqueue(ctx, cff.Job{
			Run: task1171.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1171)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1326:12
		task1172 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1172.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1326_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1326,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1172.run = func(ctx context.Context) (err error) {
			taskEmitter := task1172.emitter
			startTime := time.Now()
			defer func() {
				if task1172.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1172.ran.Store(true)

			_1326_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1172.job = sched.Enqueue(ctx, cff.Job{
			Run: task1172.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1172)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1327:12
		task1173 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1173.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1327_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1327,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1173.run = func(ctx context.Context) (err error) {
			taskEmitter := task1173.emitter
			startTime := time.Now()
			defer func() {
				if task1173.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1173.ran.Store(true)

			_1327_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1173.job = sched.Enqueue(ctx, cff.Job{
			Run: task1173.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1173)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1328:12
		task1174 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1174.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1328_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1328,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1174.run = func(ctx context.Context) (err error) {
			taskEmitter := task1174.emitter
			startTime := time.Now()
			defer func() {
				if task1174.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1174.ran.Store(true)

			_1328_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1174.job = sched.Enqueue(ctx, cff.Job{
			Run: task1174.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1174)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1329:12
		task1175 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1175.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1329_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1329,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1175.run = func(ctx context.Context) (err error) {
			taskEmitter := task1175.emitter
			startTime := time.Now()
			defer func() {
				if task1175.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1175.ran.Store(true)

			_1329_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1175.job = sched.Enqueue(ctx, cff.Job{
			Run: task1175.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1175)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1330:12
		task1176 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1176.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1330_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1330,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1176.run = func(ctx context.Context) (err error) {
			taskEmitter := task1176.emitter
			startTime := time.Now()
			defer func() {
				if task1176.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1176.ran.Store(true)

			_1330_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1176.job = sched.Enqueue(ctx, cff.Job{
			Run: task1176.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1176)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1331:12
		task1177 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1177.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1331_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1331,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1177.run = func(ctx context.Context) (err error) {
			taskEmitter := task1177.emitter
			startTime := time.Now()
			defer func() {
				if task1177.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1177.ran.Store(true)

			_1331_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1177.job = sched.Enqueue(ctx, cff.Job{
			Run: task1177.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1177)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1332:12
		task1178 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1178.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1332_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1332,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1178.run = func(ctx context.Context) (err error) {
			taskEmitter := task1178.emitter
			startTime := time.Now()
			defer func() {
				if task1178.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1178.ran.Store(true)

			_1332_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1178.job = sched.Enqueue(ctx, cff.Job{
			Run: task1178.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1178)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1333:12
		task1179 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1179.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1333_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1333,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1179.run = func(ctx context.Context) (err error) {
			taskEmitter := task1179.emitter
			startTime := time.Now()
			defer func() {
				if task1179.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1179.ran.Store(true)

			_1333_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1179.job = sched.Enqueue(ctx, cff.Job{
			Run: task1179.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1179)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1334:12
		task1180 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1180.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1334_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1334,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1180.run = func(ctx context.Context) (err error) {
			taskEmitter := task1180.emitter
			startTime := time.Now()
			defer func() {
				if task1180.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1180.ran.Store(true)

			_1334_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1180.job = sched.Enqueue(ctx, cff.Job{
			Run: task1180.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1180)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1335:12
		task1181 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1181.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1335_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1335,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1181.run = func(ctx context.Context) (err error) {
			taskEmitter := task1181.emitter
			startTime := time.Now()
			defer func() {
				if task1181.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1181.ran.Store(true)

			_1335_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1181.job = sched.Enqueue(ctx, cff.Job{
			Run: task1181.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1181)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1336:12
		task1182 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1182.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1336_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1336,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1182.run = func(ctx context.Context) (err error) {
			taskEmitter := task1182.emitter
			startTime := time.Now()
			defer func() {
				if task1182.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1182.ran.Store(true)

			_1336_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1182.job = sched.Enqueue(ctx, cff.Job{
			Run: task1182.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1182)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1337:12
		task1183 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1183.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1337_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1337,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1183.run = func(ctx context.Context) (err error) {
			taskEmitter := task1183.emitter
			startTime := time.Now()
			defer func() {
				if task1183.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1183.ran.Store(true)

			_1337_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1183.job = sched.Enqueue(ctx, cff.Job{
			Run: task1183.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1183)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1338:12
		task1184 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1184.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1338_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1338,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1184.run = func(ctx context.Context) (err error) {
			taskEmitter := task1184.emitter
			startTime := time.Now()
			defer func() {
				if task1184.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1184.ran.Store(true)

			_1338_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1184.job = sched.Enqueue(ctx, cff.Job{
			Run: task1184.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1184)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1339:12
		task1185 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1185.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1339_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1339,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1185.run = func(ctx context.Context) (err error) {
			taskEmitter := task1185.emitter
			startTime := time.Now()
			defer func() {
				if task1185.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1185.ran.Store(true)

			_1339_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1185.job = sched.Enqueue(ctx, cff.Job{
			Run: task1185.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1185)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1340:12
		task1186 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1186.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1340_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1340,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1186.run = func(ctx context.Context) (err error) {
			taskEmitter := task1186.emitter
			startTime := time.Now()
			defer func() {
				if task1186.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1186.ran.Store(true)

			_1340_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1186.job = sched.Enqueue(ctx, cff.Job{
			Run: task1186.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1186)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1341:12
		task1187 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1187.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1341_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1341,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1187.run = func(ctx context.Context) (err error) {
			taskEmitter := task1187.emitter
			startTime := time.Now()
			defer func() {
				if task1187.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1187.ran.Store(true)

			_1341_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1187.job = sched.Enqueue(ctx, cff.Job{
			Run: task1187.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1187)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1342:12
		task1188 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1188.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1342_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1342,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1188.run = func(ctx context.Context) (err error) {
			taskEmitter := task1188.emitter
			startTime := time.Now()
			defer func() {
				if task1188.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1188.ran.Store(true)

			_1342_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1188.job = sched.Enqueue(ctx, cff.Job{
			Run: task1188.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1188)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1343:12
		task1189 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1189.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1343_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1343,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1189.run = func(ctx context.Context) (err error) {
			taskEmitter := task1189.emitter
			startTime := time.Now()
			defer func() {
				if task1189.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1189.ran.Store(true)

			_1343_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1189.job = sched.Enqueue(ctx, cff.Job{
			Run: task1189.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1189)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1344:12
		task1190 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1190.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1344_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1344,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1190.run = func(ctx context.Context) (err error) {
			taskEmitter := task1190.emitter
			startTime := time.Now()
			defer func() {
				if task1190.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1190.ran.Store(true)

			_1344_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1190.job = sched.Enqueue(ctx, cff.Job{
			Run: task1190.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1190)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1345:12
		task1191 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1191.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1345_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1345,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1191.run = func(ctx context.Context) (err error) {
			taskEmitter := task1191.emitter
			startTime := time.Now()
			defer func() {
				if task1191.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1191.ran.Store(true)

			_1345_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1191.job = sched.Enqueue(ctx, cff.Job{
			Run: task1191.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1191)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1346:12
		task1192 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1192.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1346_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1346,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1192.run = func(ctx context.Context) (err error) {
			taskEmitter := task1192.emitter
			startTime := time.Now()
			defer func() {
				if task1192.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1192.ran.Store(true)

			_1346_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1192.job = sched.Enqueue(ctx, cff.Job{
			Run: task1192.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1192)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1347:12
		task1193 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1193.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1347_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1347,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1193.run = func(ctx context.Context) (err error) {
			taskEmitter := task1193.emitter
			startTime := time.Now()
			defer func() {
				if task1193.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1193.ran.Store(true)

			_1347_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1193.job = sched.Enqueue(ctx, cff.Job{
			Run: task1193.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1193)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1348:12
		task1194 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1194.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1348_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1348,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1194.run = func(ctx context.Context) (err error) {
			taskEmitter := task1194.emitter
			startTime := time.Now()
			defer func() {
				if task1194.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1194.ran.Store(true)

			_1348_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1194.job = sched.Enqueue(ctx, cff.Job{
			Run: task1194.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1194)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1349:12
		task1195 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1195.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1349_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1349,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1195.run = func(ctx context.Context) (err error) {
			taskEmitter := task1195.emitter
			startTime := time.Now()
			defer func() {
				if task1195.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1195.ran.Store(true)

			_1349_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1195.job = sched.Enqueue(ctx, cff.Job{
			Run: task1195.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1195)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1350:12
		task1196 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1196.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1350_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1350,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1196.run = func(ctx context.Context) (err error) {
			taskEmitter := task1196.emitter
			startTime := time.Now()
			defer func() {
				if task1196.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1196.ran.Store(true)

			_1350_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1196.job = sched.Enqueue(ctx, cff.Job{
			Run: task1196.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1196)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1351:12
		task1197 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1197.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1351_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1351,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1197.run = func(ctx context.Context) (err error) {
			taskEmitter := task1197.emitter
			startTime := time.Now()
			defer func() {
				if task1197.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1197.ran.Store(true)

			_1351_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1197.job = sched.Enqueue(ctx, cff.Job{
			Run: task1197.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1197)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1352:12
		task1198 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1198.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1352_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1352,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1198.run = func(ctx context.Context) (err error) {
			taskEmitter := task1198.emitter
			startTime := time.Now()
			defer func() {
				if task1198.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1198.ran.Store(true)

			_1352_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1198.job = sched.Enqueue(ctx, cff.Job{
			Run: task1198.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1198)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1353:12
		task1199 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1199.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1353_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1353,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1199.run = func(ctx context.Context) (err error) {
			taskEmitter := task1199.emitter
			startTime := time.Now()
			defer func() {
				if task1199.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1199.ran.Store(true)

			_1353_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1199.job = sched.Enqueue(ctx, cff.Job{
			Run: task1199.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1199)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1354:12
		task1200 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1200.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1354_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1354,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1200.run = func(ctx context.Context) (err error) {
			taskEmitter := task1200.emitter
			startTime := time.Now()
			defer func() {
				if task1200.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1200.ran.Store(true)

			_1354_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1200.job = sched.Enqueue(ctx, cff.Job{
			Run: task1200.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1200)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1355:12
		task1201 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1201.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1355_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1355,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1201.run = func(ctx context.Context) (err error) {
			taskEmitter := task1201.emitter
			startTime := time.Now()
			defer func() {
				if task1201.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1201.ran.Store(true)

			_1355_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1201.job = sched.Enqueue(ctx, cff.Job{
			Run: task1201.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1201)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1356:12
		task1202 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1202.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1356_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1356,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1202.run = func(ctx context.Context) (err error) {
			taskEmitter := task1202.emitter
			startTime := time.Now()
			defer func() {
				if task1202.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1202.ran.Store(true)

			_1356_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1202.job = sched.Enqueue(ctx, cff.Job{
			Run: task1202.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1202)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1357:12
		task1203 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1203.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1357_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1357,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1203.run = func(ctx context.Context) (err error) {
			taskEmitter := task1203.emitter
			startTime := time.Now()
			defer func() {
				if task1203.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1203.ran.Store(true)

			_1357_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1203.job = sched.Enqueue(ctx, cff.Job{
			Run: task1203.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1203)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1358:12
		task1204 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1204.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1358_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1358,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1204.run = func(ctx context.Context) (err error) {
			taskEmitter := task1204.emitter
			startTime := time.Now()
			defer func() {
				if task1204.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1204.ran.Store(true)

			_1358_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1204.job = sched.Enqueue(ctx, cff.Job{
			Run: task1204.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1204)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1359:12
		task1205 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1205.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1359_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1359,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1205.run = func(ctx context.Context) (err error) {
			taskEmitter := task1205.emitter
			startTime := time.Now()
			defer func() {
				if task1205.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1205.ran.Store(true)

			_1359_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1205.job = sched.Enqueue(ctx, cff.Job{
			Run: task1205.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1205)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1360:12
		task1206 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1206.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1360_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1360,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1206.run = func(ctx context.Context) (err error) {
			taskEmitter := task1206.emitter
			startTime := time.Now()
			defer func() {
				if task1206.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1206.ran.Store(true)

			_1360_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1206.job = sched.Enqueue(ctx, cff.Job{
			Run: task1206.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1206)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1361:12
		task1207 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1207.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1361_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1361,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1207.run = func(ctx context.Context) (err error) {
			taskEmitter := task1207.emitter
			startTime := time.Now()
			defer func() {
				if task1207.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1207.ran.Store(true)

			_1361_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1207.job = sched.Enqueue(ctx, cff.Job{
			Run: task1207.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1207)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1362:12
		task1208 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1208.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1362_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1362,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1208.run = func(ctx context.Context) (err error) {
			taskEmitter := task1208.emitter
			startTime := time.Now()
			defer func() {
				if task1208.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1208.ran.Store(true)

			_1362_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1208.job = sched.Enqueue(ctx, cff.Job{
			Run: task1208.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1208)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1363:12
		task1209 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1209.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1363_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1363,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1209.run = func(ctx context.Context) (err error) {
			taskEmitter := task1209.emitter
			startTime := time.Now()
			defer func() {
				if task1209.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1209.ran.Store(true)

			_1363_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1209.job = sched.Enqueue(ctx, cff.Job{
			Run: task1209.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1209)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1364:12
		task1210 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1210.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1364_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1364,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1210.run = func(ctx context.Context) (err error) {
			taskEmitter := task1210.emitter
			startTime := time.Now()
			defer func() {
				if task1210.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1210.ran.Store(true)

			_1364_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1210.job = sched.Enqueue(ctx, cff.Job{
			Run: task1210.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1210)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1365:12
		task1211 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1211.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1365_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1365,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1211.run = func(ctx context.Context) (err error) {
			taskEmitter := task1211.emitter
			startTime := time.Now()
			defer func() {
				if task1211.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1211.ran.Store(true)

			_1365_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1211.job = sched.Enqueue(ctx, cff.Job{
			Run: task1211.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1211)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1366:12
		task1212 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1212.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1366_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1366,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1212.run = func(ctx context.Context) (err error) {
			taskEmitter := task1212.emitter
			startTime := time.Now()
			defer func() {
				if task1212.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1212.ran.Store(true)

			_1366_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1212.job = sched.Enqueue(ctx, cff.Job{
			Run: task1212.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1212)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1367:12
		task1213 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1213.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1367_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1367,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1213.run = func(ctx context.Context) (err error) {
			taskEmitter := task1213.emitter
			startTime := time.Now()
			defer func() {
				if task1213.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1213.ran.Store(true)

			_1367_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1213.job = sched.Enqueue(ctx, cff.Job{
			Run: task1213.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1213)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1368:12
		task1214 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1214.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1368_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1368,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1214.run = func(ctx context.Context) (err error) {
			taskEmitter := task1214.emitter
			startTime := time.Now()
			defer func() {
				if task1214.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1214.ran.Store(true)

			_1368_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1214.job = sched.Enqueue(ctx, cff.Job{
			Run: task1214.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1214)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1369:12
		task1215 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1215.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1369_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1369,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1215.run = func(ctx context.Context) (err error) {
			taskEmitter := task1215.emitter
			startTime := time.Now()
			defer func() {
				if task1215.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1215.ran.Store(true)

			_1369_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1215.job = sched.Enqueue(ctx, cff.Job{
			Run: task1215.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1215)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1370:12
		task1216 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1216.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1370_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1370,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1216.run = func(ctx context.Context) (err error) {
			taskEmitter := task1216.emitter
			startTime := time.Now()
			defer func() {
				if task1216.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1216.ran.Store(true)

			_1370_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1216.job = sched.Enqueue(ctx, cff.Job{
			Run: task1216.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1216)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1371:12
		task1217 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1217.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1371_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1371,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1217.run = func(ctx context.Context) (err error) {
			taskEmitter := task1217.emitter
			startTime := time.Now()
			defer func() {
				if task1217.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1217.ran.Store(true)

			_1371_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1217.job = sched.Enqueue(ctx, cff.Job{
			Run: task1217.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1217)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1372:12
		task1218 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1218.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1372_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1372,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1218.run = func(ctx context.Context) (err error) {
			taskEmitter := task1218.emitter
			startTime := time.Now()
			defer func() {
				if task1218.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1218.ran.Store(true)

			_1372_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1218.job = sched.Enqueue(ctx, cff.Job{
			Run: task1218.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1218)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1373:12
		task1219 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1219.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1373_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1373,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1219.run = func(ctx context.Context) (err error) {
			taskEmitter := task1219.emitter
			startTime := time.Now()
			defer func() {
				if task1219.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1219.ran.Store(true)

			_1373_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1219.job = sched.Enqueue(ctx, cff.Job{
			Run: task1219.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1219)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1374:12
		task1220 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1220.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1374_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1374,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1220.run = func(ctx context.Context) (err error) {
			taskEmitter := task1220.emitter
			startTime := time.Now()
			defer func() {
				if task1220.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1220.ran.Store(true)

			_1374_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1220.job = sched.Enqueue(ctx, cff.Job{
			Run: task1220.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1220)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1375:12
		task1221 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1221.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1375_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1375,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1221.run = func(ctx context.Context) (err error) {
			taskEmitter := task1221.emitter
			startTime := time.Now()
			defer func() {
				if task1221.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1221.ran.Store(true)

			_1375_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1221.job = sched.Enqueue(ctx, cff.Job{
			Run: task1221.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1221)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1376:12
		task1222 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1222.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1376_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1376,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1222.run = func(ctx context.Context) (err error) {
			taskEmitter := task1222.emitter
			startTime := time.Now()
			defer func() {
				if task1222.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1222.ran.Store(true)

			_1376_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1222.job = sched.Enqueue(ctx, cff.Job{
			Run: task1222.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1222)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1377:12
		task1223 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1223.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1377_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1377,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1223.run = func(ctx context.Context) (err error) {
			taskEmitter := task1223.emitter
			startTime := time.Now()
			defer func() {
				if task1223.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1223.ran.Store(true)

			_1377_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1223.job = sched.Enqueue(ctx, cff.Job{
			Run: task1223.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1223)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1378:12
		task1224 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1224.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1378_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1378,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1224.run = func(ctx context.Context) (err error) {
			taskEmitter := task1224.emitter
			startTime := time.Now()
			defer func() {
				if task1224.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1224.ran.Store(true)

			_1378_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1224.job = sched.Enqueue(ctx, cff.Job{
			Run: task1224.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1224)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1379:12
		task1225 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1225.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1379_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1379,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1225.run = func(ctx context.Context) (err error) {
			taskEmitter := task1225.emitter
			startTime := time.Now()
			defer func() {
				if task1225.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1225.ran.Store(true)

			_1379_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1225.job = sched.Enqueue(ctx, cff.Job{
			Run: task1225.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1225)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1380:12
		task1226 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1226.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1380_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1380,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1226.run = func(ctx context.Context) (err error) {
			taskEmitter := task1226.emitter
			startTime := time.Now()
			defer func() {
				if task1226.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1226.ran.Store(true)

			_1380_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1226.job = sched.Enqueue(ctx, cff.Job{
			Run: task1226.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1226)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1381:12
		task1227 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1227.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1381_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1381,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1227.run = func(ctx context.Context) (err error) {
			taskEmitter := task1227.emitter
			startTime := time.Now()
			defer func() {
				if task1227.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1227.ran.Store(true)

			_1381_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1227.job = sched.Enqueue(ctx, cff.Job{
			Run: task1227.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1227)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1382:12
		task1228 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1228.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1382_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1382,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1228.run = func(ctx context.Context) (err error) {
			taskEmitter := task1228.emitter
			startTime := time.Now()
			defer func() {
				if task1228.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1228.ran.Store(true)

			_1382_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1228.job = sched.Enqueue(ctx, cff.Job{
			Run: task1228.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1228)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1383:12
		task1229 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1229.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1383_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1383,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1229.run = func(ctx context.Context) (err error) {
			taskEmitter := task1229.emitter
			startTime := time.Now()
			defer func() {
				if task1229.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1229.ran.Store(true)

			_1383_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1229.job = sched.Enqueue(ctx, cff.Job{
			Run: task1229.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1229)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1384:12
		task1230 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1230.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1384_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1384,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1230.run = func(ctx context.Context) (err error) {
			taskEmitter := task1230.emitter
			startTime := time.Now()
			defer func() {
				if task1230.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1230.ran.Store(true)

			_1384_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1230.job = sched.Enqueue(ctx, cff.Job{
			Run: task1230.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1230)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1385:12
		task1231 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1231.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1385_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1385,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1231.run = func(ctx context.Context) (err error) {
			taskEmitter := task1231.emitter
			startTime := time.Now()
			defer func() {
				if task1231.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1231.ran.Store(true)

			_1385_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1231.job = sched.Enqueue(ctx, cff.Job{
			Run: task1231.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1231)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1386:12
		task1232 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1232.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1386_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1386,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1232.run = func(ctx context.Context) (err error) {
			taskEmitter := task1232.emitter
			startTime := time.Now()
			defer func() {
				if task1232.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1232.ran.Store(true)

			_1386_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1232.job = sched.Enqueue(ctx, cff.Job{
			Run: task1232.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1232)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1387:12
		task1233 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1233.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1387_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1387,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1233.run = func(ctx context.Context) (err error) {
			taskEmitter := task1233.emitter
			startTime := time.Now()
			defer func() {
				if task1233.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1233.ran.Store(true)

			_1387_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1233.job = sched.Enqueue(ctx, cff.Job{
			Run: task1233.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1233)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1388:12
		task1234 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1234.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1388_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1388,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1234.run = func(ctx context.Context) (err error) {
			taskEmitter := task1234.emitter
			startTime := time.Now()
			defer func() {
				if task1234.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1234.ran.Store(true)

			_1388_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1234.job = sched.Enqueue(ctx, cff.Job{
			Run: task1234.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1234)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1389:12
		task1235 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1235.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1389_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1389,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1235.run = func(ctx context.Context) (err error) {
			taskEmitter := task1235.emitter
			startTime := time.Now()
			defer func() {
				if task1235.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1235.ran.Store(true)

			_1389_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1235.job = sched.Enqueue(ctx, cff.Job{
			Run: task1235.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1235)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1390:12
		task1236 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1236.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1390_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1390,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1236.run = func(ctx context.Context) (err error) {
			taskEmitter := task1236.emitter
			startTime := time.Now()
			defer func() {
				if task1236.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1236.ran.Store(true)

			_1390_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1236.job = sched.Enqueue(ctx, cff.Job{
			Run: task1236.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1236)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1391:12
		task1237 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1237.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1391_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1391,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1237.run = func(ctx context.Context) (err error) {
			taskEmitter := task1237.emitter
			startTime := time.Now()
			defer func() {
				if task1237.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1237.ran.Store(true)

			_1391_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1237.job = sched.Enqueue(ctx, cff.Job{
			Run: task1237.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1237)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1392:12
		task1238 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1238.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1392_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1392,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1238.run = func(ctx context.Context) (err error) {
			taskEmitter := task1238.emitter
			startTime := time.Now()
			defer func() {
				if task1238.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1238.ran.Store(true)

			_1392_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1238.job = sched.Enqueue(ctx, cff.Job{
			Run: task1238.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1238)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1393:12
		task1239 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1239.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1393_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1393,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1239.run = func(ctx context.Context) (err error) {
			taskEmitter := task1239.emitter
			startTime := time.Now()
			defer func() {
				if task1239.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1239.ran.Store(true)

			_1393_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1239.job = sched.Enqueue(ctx, cff.Job{
			Run: task1239.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1239)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1394:12
		task1240 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1240.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1394_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1394,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1240.run = func(ctx context.Context) (err error) {
			taskEmitter := task1240.emitter
			startTime := time.Now()
			defer func() {
				if task1240.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1240.ran.Store(true)

			_1394_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1240.job = sched.Enqueue(ctx, cff.Job{
			Run: task1240.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1240)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1395:12
		task1241 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1241.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1395_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1395,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1241.run = func(ctx context.Context) (err error) {
			taskEmitter := task1241.emitter
			startTime := time.Now()
			defer func() {
				if task1241.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1241.ran.Store(true)

			_1395_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1241.job = sched.Enqueue(ctx, cff.Job{
			Run: task1241.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1241)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1396:12
		task1242 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1242.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1396_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1396,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1242.run = func(ctx context.Context) (err error) {
			taskEmitter := task1242.emitter
			startTime := time.Now()
			defer func() {
				if task1242.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1242.ran.Store(true)

			_1396_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1242.job = sched.Enqueue(ctx, cff.Job{
			Run: task1242.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1242)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1397:12
		task1243 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1243.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1397_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1397,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1243.run = func(ctx context.Context) (err error) {
			taskEmitter := task1243.emitter
			startTime := time.Now()
			defer func() {
				if task1243.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1243.ran.Store(true)

			_1397_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1243.job = sched.Enqueue(ctx, cff.Job{
			Run: task1243.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1243)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1398:12
		task1244 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1244.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1398_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1398,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1244.run = func(ctx context.Context) (err error) {
			taskEmitter := task1244.emitter
			startTime := time.Now()
			defer func() {
				if task1244.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1244.ran.Store(true)

			_1398_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1244.job = sched.Enqueue(ctx, cff.Job{
			Run: task1244.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1244)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1399:12
		task1245 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1245.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1399_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1399,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1245.run = func(ctx context.Context) (err error) {
			taskEmitter := task1245.emitter
			startTime := time.Now()
			defer func() {
				if task1245.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1245.ran.Store(true)

			_1399_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1245.job = sched.Enqueue(ctx, cff.Job{
			Run: task1245.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1245)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1400:12
		task1246 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1246.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1400_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1400,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1246.run = func(ctx context.Context) (err error) {
			taskEmitter := task1246.emitter
			startTime := time.Now()
			defer func() {
				if task1246.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1246.ran.Store(true)

			_1400_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1246.job = sched.Enqueue(ctx, cff.Job{
			Run: task1246.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1246)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1401:12
		task1247 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1247.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1401_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1401,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1247.run = func(ctx context.Context) (err error) {
			taskEmitter := task1247.emitter
			startTime := time.Now()
			defer func() {
				if task1247.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1247.ran.Store(true)

			_1401_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1247.job = sched.Enqueue(ctx, cff.Job{
			Run: task1247.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1247)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1402:12
		task1248 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1248.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1402_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1402,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1248.run = func(ctx context.Context) (err error) {
			taskEmitter := task1248.emitter
			startTime := time.Now()
			defer func() {
				if task1248.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1248.ran.Store(true)

			_1402_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1248.job = sched.Enqueue(ctx, cff.Job{
			Run: task1248.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1248)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1403:12
		task1249 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1249.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1403_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1403,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1249.run = func(ctx context.Context) (err error) {
			taskEmitter := task1249.emitter
			startTime := time.Now()
			defer func() {
				if task1249.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1249.ran.Store(true)

			_1403_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1249.job = sched.Enqueue(ctx, cff.Job{
			Run: task1249.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1249)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1404:12
		task1250 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1250.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1404_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1404,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1250.run = func(ctx context.Context) (err error) {
			taskEmitter := task1250.emitter
			startTime := time.Now()
			defer func() {
				if task1250.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1250.ran.Store(true)

			_1404_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1250.job = sched.Enqueue(ctx, cff.Job{
			Run: task1250.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1250)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1405:12
		task1251 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1251.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1405_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1405,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1251.run = func(ctx context.Context) (err error) {
			taskEmitter := task1251.emitter
			startTime := time.Now()
			defer func() {
				if task1251.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1251.ran.Store(true)

			_1405_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1251.job = sched.Enqueue(ctx, cff.Job{
			Run: task1251.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1251)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1406:12
		task1252 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1252.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1406_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1406,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1252.run = func(ctx context.Context) (err error) {
			taskEmitter := task1252.emitter
			startTime := time.Now()
			defer func() {
				if task1252.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1252.ran.Store(true)

			_1406_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1252.job = sched.Enqueue(ctx, cff.Job{
			Run: task1252.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1252)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1407:12
		task1253 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1253.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1407_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1407,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1253.run = func(ctx context.Context) (err error) {
			taskEmitter := task1253.emitter
			startTime := time.Now()
			defer func() {
				if task1253.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1253.ran.Store(true)

			_1407_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1253.job = sched.Enqueue(ctx, cff.Job{
			Run: task1253.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1253)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1408:12
		task1254 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1254.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1408_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1408,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1254.run = func(ctx context.Context) (err error) {
			taskEmitter := task1254.emitter
			startTime := time.Now()
			defer func() {
				if task1254.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1254.ran.Store(true)

			_1408_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1254.job = sched.Enqueue(ctx, cff.Job{
			Run: task1254.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1254)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1409:12
		task1255 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1255.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1409_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1409,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1255.run = func(ctx context.Context) (err error) {
			taskEmitter := task1255.emitter
			startTime := time.Now()
			defer func() {
				if task1255.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1255.ran.Store(true)

			_1409_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1255.job = sched.Enqueue(ctx, cff.Job{
			Run: task1255.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1255)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1410:12
		task1256 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1256.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1410_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1410,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1256.run = func(ctx context.Context) (err error) {
			taskEmitter := task1256.emitter
			startTime := time.Now()
			defer func() {
				if task1256.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1256.ran.Store(true)

			_1410_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1256.job = sched.Enqueue(ctx, cff.Job{
			Run: task1256.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1256)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1411:12
		task1257 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1257.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1411_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1411,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1257.run = func(ctx context.Context) (err error) {
			taskEmitter := task1257.emitter
			startTime := time.Now()
			defer func() {
				if task1257.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1257.ran.Store(true)

			_1411_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1257.job = sched.Enqueue(ctx, cff.Job{
			Run: task1257.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1257)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1412:12
		task1258 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1258.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1412_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1412,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1258.run = func(ctx context.Context) (err error) {
			taskEmitter := task1258.emitter
			startTime := time.Now()
			defer func() {
				if task1258.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1258.ran.Store(true)

			_1412_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1258.job = sched.Enqueue(ctx, cff.Job{
			Run: task1258.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1258)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1413:12
		task1259 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1259.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1413_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1413,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1259.run = func(ctx context.Context) (err error) {
			taskEmitter := task1259.emitter
			startTime := time.Now()
			defer func() {
				if task1259.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1259.ran.Store(true)

			_1413_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1259.job = sched.Enqueue(ctx, cff.Job{
			Run: task1259.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1259)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1414:12
		task1260 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1260.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1414_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1414,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1260.run = func(ctx context.Context) (err error) {
			taskEmitter := task1260.emitter
			startTime := time.Now()
			defer func() {
				if task1260.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1260.ran.Store(true)

			_1414_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1260.job = sched.Enqueue(ctx, cff.Job{
			Run: task1260.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1260)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1415:12
		task1261 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1261.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1415_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1415,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1261.run = func(ctx context.Context) (err error) {
			taskEmitter := task1261.emitter
			startTime := time.Now()
			defer func() {
				if task1261.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1261.ran.Store(true)

			_1415_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1261.job = sched.Enqueue(ctx, cff.Job{
			Run: task1261.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1261)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1416:12
		task1262 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1262.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1416_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1416,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1262.run = func(ctx context.Context) (err error) {
			taskEmitter := task1262.emitter
			startTime := time.Now()
			defer func() {
				if task1262.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1262.ran.Store(true)

			_1416_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1262.job = sched.Enqueue(ctx, cff.Job{
			Run: task1262.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1262)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1417:12
		task1263 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1263.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1417_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1417,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1263.run = func(ctx context.Context) (err error) {
			taskEmitter := task1263.emitter
			startTime := time.Now()
			defer func() {
				if task1263.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1263.ran.Store(true)

			_1417_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1263.job = sched.Enqueue(ctx, cff.Job{
			Run: task1263.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1263)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1418:12
		task1264 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1264.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1418_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1418,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1264.run = func(ctx context.Context) (err error) {
			taskEmitter := task1264.emitter
			startTime := time.Now()
			defer func() {
				if task1264.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1264.ran.Store(true)

			_1418_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1264.job = sched.Enqueue(ctx, cff.Job{
			Run: task1264.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1264)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1419:12
		task1265 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1265.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1419_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1419,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1265.run = func(ctx context.Context) (err error) {
			taskEmitter := task1265.emitter
			startTime := time.Now()
			defer func() {
				if task1265.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1265.ran.Store(true)

			_1419_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1265.job = sched.Enqueue(ctx, cff.Job{
			Run: task1265.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1265)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1420:12
		task1266 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1266.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1420_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1420,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1266.run = func(ctx context.Context) (err error) {
			taskEmitter := task1266.emitter
			startTime := time.Now()
			defer func() {
				if task1266.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1266.ran.Store(true)

			_1420_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1266.job = sched.Enqueue(ctx, cff.Job{
			Run: task1266.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1266)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1421:12
		task1267 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1267.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1421_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1421,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1267.run = func(ctx context.Context) (err error) {
			taskEmitter := task1267.emitter
			startTime := time.Now()
			defer func() {
				if task1267.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1267.ran.Store(true)

			_1421_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1267.job = sched.Enqueue(ctx, cff.Job{
			Run: task1267.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1267)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1422:12
		task1268 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1268.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1422_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1422,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1268.run = func(ctx context.Context) (err error) {
			taskEmitter := task1268.emitter
			startTime := time.Now()
			defer func() {
				if task1268.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1268.ran.Store(true)

			_1422_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1268.job = sched.Enqueue(ctx, cff.Job{
			Run: task1268.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1268)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1423:12
		task1269 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1269.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1423_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1423,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1269.run = func(ctx context.Context) (err error) {
			taskEmitter := task1269.emitter
			startTime := time.Now()
			defer func() {
				if task1269.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1269.ran.Store(true)

			_1423_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1269.job = sched.Enqueue(ctx, cff.Job{
			Run: task1269.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1269)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1424:12
		task1270 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1270.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1424_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1424,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1270.run = func(ctx context.Context) (err error) {
			taskEmitter := task1270.emitter
			startTime := time.Now()
			defer func() {
				if task1270.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1270.ran.Store(true)

			_1424_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1270.job = sched.Enqueue(ctx, cff.Job{
			Run: task1270.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1270)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1425:12
		task1271 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1271.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1425_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1425,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1271.run = func(ctx context.Context) (err error) {
			taskEmitter := task1271.emitter
			startTime := time.Now()
			defer func() {
				if task1271.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1271.ran.Store(true)

			_1425_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1271.job = sched.Enqueue(ctx, cff.Job{
			Run: task1271.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1271)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1426:12
		task1272 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1272.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1426_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1426,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1272.run = func(ctx context.Context) (err error) {
			taskEmitter := task1272.emitter
			startTime := time.Now()
			defer func() {
				if task1272.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1272.ran.Store(true)

			_1426_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1272.job = sched.Enqueue(ctx, cff.Job{
			Run: task1272.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1272)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1427:12
		task1273 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1273.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1427_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1427,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1273.run = func(ctx context.Context) (err error) {
			taskEmitter := task1273.emitter
			startTime := time.Now()
			defer func() {
				if task1273.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1273.ran.Store(true)

			_1427_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1273.job = sched.Enqueue(ctx, cff.Job{
			Run: task1273.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1273)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1428:12
		task1274 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1274.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1428_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1428,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1274.run = func(ctx context.Context) (err error) {
			taskEmitter := task1274.emitter
			startTime := time.Now()
			defer func() {
				if task1274.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1274.ran.Store(true)

			_1428_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1274.job = sched.Enqueue(ctx, cff.Job{
			Run: task1274.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1274)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1429:12
		task1275 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1275.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1429_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1429,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1275.run = func(ctx context.Context) (err error) {
			taskEmitter := task1275.emitter
			startTime := time.Now()
			defer func() {
				if task1275.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1275.ran.Store(true)

			_1429_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1275.job = sched.Enqueue(ctx, cff.Job{
			Run: task1275.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1275)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1430:12
		task1276 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1276.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1430_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1430,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1276.run = func(ctx context.Context) (err error) {
			taskEmitter := task1276.emitter
			startTime := time.Now()
			defer func() {
				if task1276.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1276.ran.Store(true)

			_1430_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1276.job = sched.Enqueue(ctx, cff.Job{
			Run: task1276.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1276)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1431:12
		task1277 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1277.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1431_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1431,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1277.run = func(ctx context.Context) (err error) {
			taskEmitter := task1277.emitter
			startTime := time.Now()
			defer func() {
				if task1277.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1277.ran.Store(true)

			_1431_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1277.job = sched.Enqueue(ctx, cff.Job{
			Run: task1277.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1277)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1432:12
		task1278 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1278.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1432_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1432,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1278.run = func(ctx context.Context) (err error) {
			taskEmitter := task1278.emitter
			startTime := time.Now()
			defer func() {
				if task1278.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1278.ran.Store(true)

			_1432_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1278.job = sched.Enqueue(ctx, cff.Job{
			Run: task1278.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1278)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1433:12
		task1279 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1279.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1433_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1433,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1279.run = func(ctx context.Context) (err error) {
			taskEmitter := task1279.emitter
			startTime := time.Now()
			defer func() {
				if task1279.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1279.ran.Store(true)

			_1433_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1279.job = sched.Enqueue(ctx, cff.Job{
			Run: task1279.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1279)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1434:12
		task1280 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1280.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1434_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1434,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1280.run = func(ctx context.Context) (err error) {
			taskEmitter := task1280.emitter
			startTime := time.Now()
			defer func() {
				if task1280.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1280.ran.Store(true)

			_1434_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1280.job = sched.Enqueue(ctx, cff.Job{
			Run: task1280.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1280)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1435:12
		task1281 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1281.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1435_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1435,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1281.run = func(ctx context.Context) (err error) {
			taskEmitter := task1281.emitter
			startTime := time.Now()
			defer func() {
				if task1281.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1281.ran.Store(true)

			_1435_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1281.job = sched.Enqueue(ctx, cff.Job{
			Run: task1281.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1281)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1436:12
		task1282 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1282.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1436_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1436,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1282.run = func(ctx context.Context) (err error) {
			taskEmitter := task1282.emitter
			startTime := time.Now()
			defer func() {
				if task1282.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1282.ran.Store(true)

			_1436_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1282.job = sched.Enqueue(ctx, cff.Job{
			Run: task1282.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1282)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1437:12
		task1283 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1283.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1437_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1437,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1283.run = func(ctx context.Context) (err error) {
			taskEmitter := task1283.emitter
			startTime := time.Now()
			defer func() {
				if task1283.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1283.ran.Store(true)

			_1437_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1283.job = sched.Enqueue(ctx, cff.Job{
			Run: task1283.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1283)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1438:12
		task1284 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1284.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1438_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1438,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1284.run = func(ctx context.Context) (err error) {
			taskEmitter := task1284.emitter
			startTime := time.Now()
			defer func() {
				if task1284.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1284.ran.Store(true)

			_1438_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1284.job = sched.Enqueue(ctx, cff.Job{
			Run: task1284.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1284)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1439:12
		task1285 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1285.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1439_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1439,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1285.run = func(ctx context.Context) (err error) {
			taskEmitter := task1285.emitter
			startTime := time.Now()
			defer func() {
				if task1285.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1285.ran.Store(true)

			_1439_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1285.job = sched.Enqueue(ctx, cff.Job{
			Run: task1285.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1285)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1440:12
		task1286 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1286.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1440_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1440,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1286.run = func(ctx context.Context) (err error) {
			taskEmitter := task1286.emitter
			startTime := time.Now()
			defer func() {
				if task1286.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1286.ran.Store(true)

			_1440_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1286.job = sched.Enqueue(ctx, cff.Job{
			Run: task1286.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1286)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1441:12
		task1287 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1287.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1441_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1441,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1287.run = func(ctx context.Context) (err error) {
			taskEmitter := task1287.emitter
			startTime := time.Now()
			defer func() {
				if task1287.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1287.ran.Store(true)

			_1441_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1287.job = sched.Enqueue(ctx, cff.Job{
			Run: task1287.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1287)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1442:12
		task1288 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1288.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1442_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1442,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1288.run = func(ctx context.Context) (err error) {
			taskEmitter := task1288.emitter
			startTime := time.Now()
			defer func() {
				if task1288.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1288.ran.Store(true)

			_1442_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1288.job = sched.Enqueue(ctx, cff.Job{
			Run: task1288.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1288)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1443:12
		task1289 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1289.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1443_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1443,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1289.run = func(ctx context.Context) (err error) {
			taskEmitter := task1289.emitter
			startTime := time.Now()
			defer func() {
				if task1289.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1289.ran.Store(true)

			_1443_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1289.job = sched.Enqueue(ctx, cff.Job{
			Run: task1289.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1289)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1444:12
		task1290 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1290.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1444_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1444,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1290.run = func(ctx context.Context) (err error) {
			taskEmitter := task1290.emitter
			startTime := time.Now()
			defer func() {
				if task1290.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1290.ran.Store(true)

			_1444_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1290.job = sched.Enqueue(ctx, cff.Job{
			Run: task1290.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1290)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1445:12
		task1291 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1291.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1445_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1445,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1291.run = func(ctx context.Context) (err error) {
			taskEmitter := task1291.emitter
			startTime := time.Now()
			defer func() {
				if task1291.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1291.ran.Store(true)

			_1445_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1291.job = sched.Enqueue(ctx, cff.Job{
			Run: task1291.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1291)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1446:12
		task1292 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1292.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1446_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1446,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1292.run = func(ctx context.Context) (err error) {
			taskEmitter := task1292.emitter
			startTime := time.Now()
			defer func() {
				if task1292.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1292.ran.Store(true)

			_1446_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1292.job = sched.Enqueue(ctx, cff.Job{
			Run: task1292.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1292)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1447:12
		task1293 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1293.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1447_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1447,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1293.run = func(ctx context.Context) (err error) {
			taskEmitter := task1293.emitter
			startTime := time.Now()
			defer func() {
				if task1293.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1293.ran.Store(true)

			_1447_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1293.job = sched.Enqueue(ctx, cff.Job{
			Run: task1293.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1293)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1448:12
		task1294 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1294.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1448_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1448,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1294.run = func(ctx context.Context) (err error) {
			taskEmitter := task1294.emitter
			startTime := time.Now()
			defer func() {
				if task1294.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1294.ran.Store(true)

			_1448_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1294.job = sched.Enqueue(ctx, cff.Job{
			Run: task1294.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1294)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1449:12
		task1295 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1295.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1449_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1449,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1295.run = func(ctx context.Context) (err error) {
			taskEmitter := task1295.emitter
			startTime := time.Now()
			defer func() {
				if task1295.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1295.ran.Store(true)

			_1449_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1295.job = sched.Enqueue(ctx, cff.Job{
			Run: task1295.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1295)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1450:12
		task1296 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1296.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1450_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1450,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1296.run = func(ctx context.Context) (err error) {
			taskEmitter := task1296.emitter
			startTime := time.Now()
			defer func() {
				if task1296.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1296.ran.Store(true)

			_1450_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1296.job = sched.Enqueue(ctx, cff.Job{
			Run: task1296.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1296)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1451:12
		task1297 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1297.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1451_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1451,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1297.run = func(ctx context.Context) (err error) {
			taskEmitter := task1297.emitter
			startTime := time.Now()
			defer func() {
				if task1297.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1297.ran.Store(true)

			_1451_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1297.job = sched.Enqueue(ctx, cff.Job{
			Run: task1297.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1297)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1452:12
		task1298 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1298.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1452_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1452,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1298.run = func(ctx context.Context) (err error) {
			taskEmitter := task1298.emitter
			startTime := time.Now()
			defer func() {
				if task1298.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1298.ran.Store(true)

			_1452_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1298.job = sched.Enqueue(ctx, cff.Job{
			Run: task1298.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1298)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1453:12
		task1299 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1299.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1453_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1453,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1299.run = func(ctx context.Context) (err error) {
			taskEmitter := task1299.emitter
			startTime := time.Now()
			defer func() {
				if task1299.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1299.ran.Store(true)

			_1453_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1299.job = sched.Enqueue(ctx, cff.Job{
			Run: task1299.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1299)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1454:12
		task1300 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1300.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1454_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1454,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1300.run = func(ctx context.Context) (err error) {
			taskEmitter := task1300.emitter
			startTime := time.Now()
			defer func() {
				if task1300.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1300.ran.Store(true)

			_1454_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1300.job = sched.Enqueue(ctx, cff.Job{
			Run: task1300.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1300)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1455:12
		task1301 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1301.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1455_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1455,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1301.run = func(ctx context.Context) (err error) {
			taskEmitter := task1301.emitter
			startTime := time.Now()
			defer func() {
				if task1301.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1301.ran.Store(true)

			_1455_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1301.job = sched.Enqueue(ctx, cff.Job{
			Run: task1301.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1301)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1456:12
		task1302 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1302.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1456_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1456,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1302.run = func(ctx context.Context) (err error) {
			taskEmitter := task1302.emitter
			startTime := time.Now()
			defer func() {
				if task1302.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1302.ran.Store(true)

			_1456_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1302.job = sched.Enqueue(ctx, cff.Job{
			Run: task1302.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1302)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1457:12
		task1303 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1303.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1457_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1457,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1303.run = func(ctx context.Context) (err error) {
			taskEmitter := task1303.emitter
			startTime := time.Now()
			defer func() {
				if task1303.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1303.ran.Store(true)

			_1457_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1303.job = sched.Enqueue(ctx, cff.Job{
			Run: task1303.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1303)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1458:12
		task1304 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1304.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1458_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1458,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1304.run = func(ctx context.Context) (err error) {
			taskEmitter := task1304.emitter
			startTime := time.Now()
			defer func() {
				if task1304.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1304.ran.Store(true)

			_1458_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1304.job = sched.Enqueue(ctx, cff.Job{
			Run: task1304.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1304)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1459:12
		task1305 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1305.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1459_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1459,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1305.run = func(ctx context.Context) (err error) {
			taskEmitter := task1305.emitter
			startTime := time.Now()
			defer func() {
				if task1305.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1305.ran.Store(true)

			_1459_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1305.job = sched.Enqueue(ctx, cff.Job{
			Run: task1305.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1305)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1460:12
		task1306 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1306.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1460_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1460,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1306.run = func(ctx context.Context) (err error) {
			taskEmitter := task1306.emitter
			startTime := time.Now()
			defer func() {
				if task1306.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1306.ran.Store(true)

			_1460_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1306.job = sched.Enqueue(ctx, cff.Job{
			Run: task1306.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1306)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1461:12
		task1307 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1307.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1461_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1461,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1307.run = func(ctx context.Context) (err error) {
			taskEmitter := task1307.emitter
			startTime := time.Now()
			defer func() {
				if task1307.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1307.ran.Store(true)

			_1461_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1307.job = sched.Enqueue(ctx, cff.Job{
			Run: task1307.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1307)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1462:12
		task1308 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1308.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1462_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1462,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1308.run = func(ctx context.Context) (err error) {
			taskEmitter := task1308.emitter
			startTime := time.Now()
			defer func() {
				if task1308.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1308.ran.Store(true)

			_1462_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1308.job = sched.Enqueue(ctx, cff.Job{
			Run: task1308.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1308)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1463:12
		task1309 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1309.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1463_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1463,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1309.run = func(ctx context.Context) (err error) {
			taskEmitter := task1309.emitter
			startTime := time.Now()
			defer func() {
				if task1309.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1309.ran.Store(true)

			_1463_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1309.job = sched.Enqueue(ctx, cff.Job{
			Run: task1309.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1309)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1464:12
		task1310 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1310.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1464_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1464,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1310.run = func(ctx context.Context) (err error) {
			taskEmitter := task1310.emitter
			startTime := time.Now()
			defer func() {
				if task1310.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1310.ran.Store(true)

			_1464_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1310.job = sched.Enqueue(ctx, cff.Job{
			Run: task1310.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1310)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1465:12
		task1311 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1311.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1465_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1465,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1311.run = func(ctx context.Context) (err error) {
			taskEmitter := task1311.emitter
			startTime := time.Now()
			defer func() {
				if task1311.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1311.ran.Store(true)

			_1465_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1311.job = sched.Enqueue(ctx, cff.Job{
			Run: task1311.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1311)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1466:12
		task1312 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1312.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1466_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1466,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1312.run = func(ctx context.Context) (err error) {
			taskEmitter := task1312.emitter
			startTime := time.Now()
			defer func() {
				if task1312.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1312.ran.Store(true)

			_1466_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1312.job = sched.Enqueue(ctx, cff.Job{
			Run: task1312.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1312)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1467:12
		task1313 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1313.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1467_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1467,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1313.run = func(ctx context.Context) (err error) {
			taskEmitter := task1313.emitter
			startTime := time.Now()
			defer func() {
				if task1313.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1313.ran.Store(true)

			_1467_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1313.job = sched.Enqueue(ctx, cff.Job{
			Run: task1313.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1313)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1468:12
		task1314 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1314.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1468_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1468,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1314.run = func(ctx context.Context) (err error) {
			taskEmitter := task1314.emitter
			startTime := time.Now()
			defer func() {
				if task1314.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1314.ran.Store(true)

			_1468_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1314.job = sched.Enqueue(ctx, cff.Job{
			Run: task1314.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1314)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1469:12
		task1315 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1315.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1469_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1469,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1315.run = func(ctx context.Context) (err error) {
			taskEmitter := task1315.emitter
			startTime := time.Now()
			defer func() {
				if task1315.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1315.ran.Store(true)

			_1469_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1315.job = sched.Enqueue(ctx, cff.Job{
			Run: task1315.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1315)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1470:12
		task1316 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1316.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1470_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1470,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1316.run = func(ctx context.Context) (err error) {
			taskEmitter := task1316.emitter
			startTime := time.Now()
			defer func() {
				if task1316.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1316.ran.Store(true)

			_1470_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1316.job = sched.Enqueue(ctx, cff.Job{
			Run: task1316.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1316)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1471:12
		task1317 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1317.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1471_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1471,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1317.run = func(ctx context.Context) (err error) {
			taskEmitter := task1317.emitter
			startTime := time.Now()
			defer func() {
				if task1317.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1317.ran.Store(true)

			_1471_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1317.job = sched.Enqueue(ctx, cff.Job{
			Run: task1317.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1317)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1472:12
		task1318 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1318.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1472_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1472,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1318.run = func(ctx context.Context) (err error) {
			taskEmitter := task1318.emitter
			startTime := time.Now()
			defer func() {
				if task1318.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1318.ran.Store(true)

			_1472_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1318.job = sched.Enqueue(ctx, cff.Job{
			Run: task1318.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1318)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1473:12
		task1319 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1319.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1473_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1473,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1319.run = func(ctx context.Context) (err error) {
			taskEmitter := task1319.emitter
			startTime := time.Now()
			defer func() {
				if task1319.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1319.ran.Store(true)

			_1473_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1319.job = sched.Enqueue(ctx, cff.Job{
			Run: task1319.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1319)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1474:12
		task1320 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1320.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1474_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1474,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1320.run = func(ctx context.Context) (err error) {
			taskEmitter := task1320.emitter
			startTime := time.Now()
			defer func() {
				if task1320.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1320.ran.Store(true)

			_1474_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1320.job = sched.Enqueue(ctx, cff.Job{
			Run: task1320.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1320)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1475:12
		task1321 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1321.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1475_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1475,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1321.run = func(ctx context.Context) (err error) {
			taskEmitter := task1321.emitter
			startTime := time.Now()
			defer func() {
				if task1321.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1321.ran.Store(true)

			_1475_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1321.job = sched.Enqueue(ctx, cff.Job{
			Run: task1321.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1321)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1476:12
		task1322 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1322.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1476_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1476,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1322.run = func(ctx context.Context) (err error) {
			taskEmitter := task1322.emitter
			startTime := time.Now()
			defer func() {
				if task1322.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1322.ran.Store(true)

			_1476_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1322.job = sched.Enqueue(ctx, cff.Job{
			Run: task1322.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1322)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1477:12
		task1323 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1323.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1477_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1477,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1323.run = func(ctx context.Context) (err error) {
			taskEmitter := task1323.emitter
			startTime := time.Now()
			defer func() {
				if task1323.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1323.ran.Store(true)

			_1477_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1323.job = sched.Enqueue(ctx, cff.Job{
			Run: task1323.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1323)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1478:12
		task1324 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1324.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1478_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1478,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1324.run = func(ctx context.Context) (err error) {
			taskEmitter := task1324.emitter
			startTime := time.Now()
			defer func() {
				if task1324.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1324.ran.Store(true)

			_1478_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1324.job = sched.Enqueue(ctx, cff.Job{
			Run: task1324.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1324)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1479:12
		task1325 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1325.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1479_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1479,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1325.run = func(ctx context.Context) (err error) {
			taskEmitter := task1325.emitter
			startTime := time.Now()
			defer func() {
				if task1325.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1325.ran.Store(true)

			_1479_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1325.job = sched.Enqueue(ctx, cff.Job{
			Run: task1325.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1325)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1480:12
		task1326 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1326.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1480_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1480,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1326.run = func(ctx context.Context) (err error) {
			taskEmitter := task1326.emitter
			startTime := time.Now()
			defer func() {
				if task1326.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1326.ran.Store(true)

			_1480_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1326.job = sched.Enqueue(ctx, cff.Job{
			Run: task1326.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1326)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1481:12
		task1327 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1327.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1481_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1481,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1327.run = func(ctx context.Context) (err error) {
			taskEmitter := task1327.emitter
			startTime := time.Now()
			defer func() {
				if task1327.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1327.ran.Store(true)

			_1481_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1327.job = sched.Enqueue(ctx, cff.Job{
			Run: task1327.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1327)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1482:12
		task1328 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1328.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1482_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1482,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1328.run = func(ctx context.Context) (err error) {
			taskEmitter := task1328.emitter
			startTime := time.Now()
			defer func() {
				if task1328.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1328.ran.Store(true)

			_1482_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1328.job = sched.Enqueue(ctx, cff.Job{
			Run: task1328.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1328)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1483:12
		task1329 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1329.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1483_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1483,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1329.run = func(ctx context.Context) (err error) {
			taskEmitter := task1329.emitter
			startTime := time.Now()
			defer func() {
				if task1329.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1329.ran.Store(true)

			_1483_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1329.job = sched.Enqueue(ctx, cff.Job{
			Run: task1329.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1329)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1484:12
		task1330 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1330.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1484_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1484,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1330.run = func(ctx context.Context) (err error) {
			taskEmitter := task1330.emitter
			startTime := time.Now()
			defer func() {
				if task1330.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1330.ran.Store(true)

			_1484_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1330.job = sched.Enqueue(ctx, cff.Job{
			Run: task1330.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1330)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1485:12
		task1331 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1331.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1485_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1485,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1331.run = func(ctx context.Context) (err error) {
			taskEmitter := task1331.emitter
			startTime := time.Now()
			defer func() {
				if task1331.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1331.ran.Store(true)

			_1485_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1331.job = sched.Enqueue(ctx, cff.Job{
			Run: task1331.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1331)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1486:12
		task1332 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1332.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1486_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1486,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1332.run = func(ctx context.Context) (err error) {
			taskEmitter := task1332.emitter
			startTime := time.Now()
			defer func() {
				if task1332.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1332.ran.Store(true)

			_1486_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1332.job = sched.Enqueue(ctx, cff.Job{
			Run: task1332.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1332)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1487:12
		task1333 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1333.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1487_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1487,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1333.run = func(ctx context.Context) (err error) {
			taskEmitter := task1333.emitter
			startTime := time.Now()
			defer func() {
				if task1333.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1333.ran.Store(true)

			_1487_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1333.job = sched.Enqueue(ctx, cff.Job{
			Run: task1333.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1333)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1488:12
		task1334 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1334.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1488_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1488,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1334.run = func(ctx context.Context) (err error) {
			taskEmitter := task1334.emitter
			startTime := time.Now()
			defer func() {
				if task1334.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1334.ran.Store(true)

			_1488_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1334.job = sched.Enqueue(ctx, cff.Job{
			Run: task1334.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1334)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1489:12
		task1335 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1335.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1489_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1489,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1335.run = func(ctx context.Context) (err error) {
			taskEmitter := task1335.emitter
			startTime := time.Now()
			defer func() {
				if task1335.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1335.ran.Store(true)

			_1489_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1335.job = sched.Enqueue(ctx, cff.Job{
			Run: task1335.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1335)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1490:12
		task1336 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1336.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1490_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1490,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1336.run = func(ctx context.Context) (err error) {
			taskEmitter := task1336.emitter
			startTime := time.Now()
			defer func() {
				if task1336.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1336.ran.Store(true)

			_1490_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1336.job = sched.Enqueue(ctx, cff.Job{
			Run: task1336.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1336)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1491:12
		task1337 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1337.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1491_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1491,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1337.run = func(ctx context.Context) (err error) {
			taskEmitter := task1337.emitter
			startTime := time.Now()
			defer func() {
				if task1337.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1337.ran.Store(true)

			_1491_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1337.job = sched.Enqueue(ctx, cff.Job{
			Run: task1337.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1337)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1492:12
		task1338 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1338.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1492_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1492,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1338.run = func(ctx context.Context) (err error) {
			taskEmitter := task1338.emitter
			startTime := time.Now()
			defer func() {
				if task1338.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1338.ran.Store(true)

			_1492_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1338.job = sched.Enqueue(ctx, cff.Job{
			Run: task1338.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1338)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1493:12
		task1339 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1339.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1493_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1493,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1339.run = func(ctx context.Context) (err error) {
			taskEmitter := task1339.emitter
			startTime := time.Now()
			defer func() {
				if task1339.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1339.ran.Store(true)

			_1493_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1339.job = sched.Enqueue(ctx, cff.Job{
			Run: task1339.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1339)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1494:12
		task1340 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1340.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1494_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1494,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1340.run = func(ctx context.Context) (err error) {
			taskEmitter := task1340.emitter
			startTime := time.Now()
			defer func() {
				if task1340.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1340.ran.Store(true)

			_1494_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1340.job = sched.Enqueue(ctx, cff.Job{
			Run: task1340.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1340)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1495:12
		task1341 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1341.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1495_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1495,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1341.run = func(ctx context.Context) (err error) {
			taskEmitter := task1341.emitter
			startTime := time.Now()
			defer func() {
				if task1341.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1341.ran.Store(true)

			_1495_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1341.job = sched.Enqueue(ctx, cff.Job{
			Run: task1341.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1341)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1496:12
		task1342 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1342.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1496_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1496,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1342.run = func(ctx context.Context) (err error) {
			taskEmitter := task1342.emitter
			startTime := time.Now()
			defer func() {
				if task1342.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1342.ran.Store(true)

			_1496_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1342.job = sched.Enqueue(ctx, cff.Job{
			Run: task1342.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1342)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1497:12
		task1343 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1343.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1497_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1497,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1343.run = func(ctx context.Context) (err error) {
			taskEmitter := task1343.emitter
			startTime := time.Now()
			defer func() {
				if task1343.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1343.ran.Store(true)

			_1497_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1343.job = sched.Enqueue(ctx, cff.Job{
			Run: task1343.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1343)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1498:12
		task1344 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1344.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1498_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1498,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1344.run = func(ctx context.Context) (err error) {
			taskEmitter := task1344.emitter
			startTime := time.Now()
			defer func() {
				if task1344.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1344.ran.Store(true)

			_1498_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1344.job = sched.Enqueue(ctx, cff.Job{
			Run: task1344.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1344)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1499:12
		task1345 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1345.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1499_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1499,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1345.run = func(ctx context.Context) (err error) {
			taskEmitter := task1345.emitter
			startTime := time.Now()
			defer func() {
				if task1345.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1345.ran.Store(true)

			_1499_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1345.job = sched.Enqueue(ctx, cff.Job{
			Run: task1345.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1345)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1500:12
		task1346 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1346.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1500_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1500,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1346.run = func(ctx context.Context) (err error) {
			taskEmitter := task1346.emitter
			startTime := time.Now()
			defer func() {
				if task1346.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1346.ran.Store(true)

			_1500_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1346.job = sched.Enqueue(ctx, cff.Job{
			Run: task1346.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1346)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1501:12
		task1347 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1347.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1501_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1501,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1347.run = func(ctx context.Context) (err error) {
			taskEmitter := task1347.emitter
			startTime := time.Now()
			defer func() {
				if task1347.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1347.ran.Store(true)

			_1501_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1347.job = sched.Enqueue(ctx, cff.Job{
			Run: task1347.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1347)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1502:12
		task1348 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1348.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1502_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1502,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1348.run = func(ctx context.Context) (err error) {
			taskEmitter := task1348.emitter
			startTime := time.Now()
			defer func() {
				if task1348.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1348.ran.Store(true)

			_1502_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1348.job = sched.Enqueue(ctx, cff.Job{
			Run: task1348.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1348)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1503:12
		task1349 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1349.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1503_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1503,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1349.run = func(ctx context.Context) (err error) {
			taskEmitter := task1349.emitter
			startTime := time.Now()
			defer func() {
				if task1349.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1349.ran.Store(true)

			_1503_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1349.job = sched.Enqueue(ctx, cff.Job{
			Run: task1349.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1349)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1504:12
		task1350 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1350.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1504_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1504,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1350.run = func(ctx context.Context) (err error) {
			taskEmitter := task1350.emitter
			startTime := time.Now()
			defer func() {
				if task1350.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1350.ran.Store(true)

			_1504_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1350.job = sched.Enqueue(ctx, cff.Job{
			Run: task1350.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1350)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1505:12
		task1351 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1351.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1505_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1505,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1351.run = func(ctx context.Context) (err error) {
			taskEmitter := task1351.emitter
			startTime := time.Now()
			defer func() {
				if task1351.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1351.ran.Store(true)

			_1505_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1351.job = sched.Enqueue(ctx, cff.Job{
			Run: task1351.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1351)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1506:12
		task1352 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1352.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1506_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1506,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1352.run = func(ctx context.Context) (err error) {
			taskEmitter := task1352.emitter
			startTime := time.Now()
			defer func() {
				if task1352.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1352.ran.Store(true)

			_1506_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1352.job = sched.Enqueue(ctx, cff.Job{
			Run: task1352.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1352)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1507:12
		task1353 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1353.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1507_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1507,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1353.run = func(ctx context.Context) (err error) {
			taskEmitter := task1353.emitter
			startTime := time.Now()
			defer func() {
				if task1353.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1353.ran.Store(true)

			_1507_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1353.job = sched.Enqueue(ctx, cff.Job{
			Run: task1353.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1353)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1508:12
		task1354 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1354.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1508_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1508,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1354.run = func(ctx context.Context) (err error) {
			taskEmitter := task1354.emitter
			startTime := time.Now()
			defer func() {
				if task1354.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1354.ran.Store(true)

			_1508_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1354.job = sched.Enqueue(ctx, cff.Job{
			Run: task1354.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1354)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1509:12
		task1355 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1355.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1509_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1509,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1355.run = func(ctx context.Context) (err error) {
			taskEmitter := task1355.emitter
			startTime := time.Now()
			defer func() {
				if task1355.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1355.ran.Store(true)

			_1509_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1355.job = sched.Enqueue(ctx, cff.Job{
			Run: task1355.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1355)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1510:12
		task1356 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1356.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1510_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1510,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1356.run = func(ctx context.Context) (err error) {
			taskEmitter := task1356.emitter
			startTime := time.Now()
			defer func() {
				if task1356.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1356.ran.Store(true)

			_1510_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1356.job = sched.Enqueue(ctx, cff.Job{
			Run: task1356.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1356)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1511:12
		task1357 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1357.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1511_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1511,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1357.run = func(ctx context.Context) (err error) {
			taskEmitter := task1357.emitter
			startTime := time.Now()
			defer func() {
				if task1357.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1357.ran.Store(true)

			_1511_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1357.job = sched.Enqueue(ctx, cff.Job{
			Run: task1357.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1357)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1512:12
		task1358 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1358.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1512_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1512,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1358.run = func(ctx context.Context) (err error) {
			taskEmitter := task1358.emitter
			startTime := time.Now()
			defer func() {
				if task1358.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1358.ran.Store(true)

			_1512_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1358.job = sched.Enqueue(ctx, cff.Job{
			Run: task1358.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1358)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1513:12
		task1359 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1359.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1513_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1513,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1359.run = func(ctx context.Context) (err error) {
			taskEmitter := task1359.emitter
			startTime := time.Now()
			defer func() {
				if task1359.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1359.ran.Store(true)

			_1513_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1359.job = sched.Enqueue(ctx, cff.Job{
			Run: task1359.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1359)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1514:12
		task1360 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1360.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1514_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1514,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1360.run = func(ctx context.Context) (err error) {
			taskEmitter := task1360.emitter
			startTime := time.Now()
			defer func() {
				if task1360.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1360.ran.Store(true)

			_1514_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1360.job = sched.Enqueue(ctx, cff.Job{
			Run: task1360.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1360)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1515:12
		task1361 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1361.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1515_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1515,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1361.run = func(ctx context.Context) (err error) {
			taskEmitter := task1361.emitter
			startTime := time.Now()
			defer func() {
				if task1361.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1361.ran.Store(true)

			_1515_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1361.job = sched.Enqueue(ctx, cff.Job{
			Run: task1361.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1361)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1516:12
		task1362 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1362.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1516_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1516,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1362.run = func(ctx context.Context) (err error) {
			taskEmitter := task1362.emitter
			startTime := time.Now()
			defer func() {
				if task1362.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1362.ran.Store(true)

			_1516_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1362.job = sched.Enqueue(ctx, cff.Job{
			Run: task1362.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1362)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1517:12
		task1363 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1363.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1517_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1517,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1363.run = func(ctx context.Context) (err error) {
			taskEmitter := task1363.emitter
			startTime := time.Now()
			defer func() {
				if task1363.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1363.ran.Store(true)

			_1517_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1363.job = sched.Enqueue(ctx, cff.Job{
			Run: task1363.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1363)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1518:12
		task1364 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1364.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1518_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1518,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1364.run = func(ctx context.Context) (err error) {
			taskEmitter := task1364.emitter
			startTime := time.Now()
			defer func() {
				if task1364.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1364.ran.Store(true)

			_1518_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1364.job = sched.Enqueue(ctx, cff.Job{
			Run: task1364.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1364)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1519:12
		task1365 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1365.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1519_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1519,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1365.run = func(ctx context.Context) (err error) {
			taskEmitter := task1365.emitter
			startTime := time.Now()
			defer func() {
				if task1365.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1365.ran.Store(true)

			_1519_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1365.job = sched.Enqueue(ctx, cff.Job{
			Run: task1365.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1365)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1520:12
		task1366 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1366.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1520_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1520,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1366.run = func(ctx context.Context) (err error) {
			taskEmitter := task1366.emitter
			startTime := time.Now()
			defer func() {
				if task1366.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1366.ran.Store(true)

			_1520_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1366.job = sched.Enqueue(ctx, cff.Job{
			Run: task1366.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1366)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1521:12
		task1367 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1367.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1521_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1521,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1367.run = func(ctx context.Context) (err error) {
			taskEmitter := task1367.emitter
			startTime := time.Now()
			defer func() {
				if task1367.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1367.ran.Store(true)

			_1521_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1367.job = sched.Enqueue(ctx, cff.Job{
			Run: task1367.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1367)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1522:12
		task1368 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1368.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1522_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1522,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1368.run = func(ctx context.Context) (err error) {
			taskEmitter := task1368.emitter
			startTime := time.Now()
			defer func() {
				if task1368.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1368.ran.Store(true)

			_1522_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1368.job = sched.Enqueue(ctx, cff.Job{
			Run: task1368.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1368)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1523:12
		task1369 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1369.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1523_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1523,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1369.run = func(ctx context.Context) (err error) {
			taskEmitter := task1369.emitter
			startTime := time.Now()
			defer func() {
				if task1369.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1369.ran.Store(true)

			_1523_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1369.job = sched.Enqueue(ctx, cff.Job{
			Run: task1369.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1369)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1524:12
		task1370 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1370.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1524_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1524,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1370.run = func(ctx context.Context) (err error) {
			taskEmitter := task1370.emitter
			startTime := time.Now()
			defer func() {
				if task1370.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1370.ran.Store(true)

			_1524_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1370.job = sched.Enqueue(ctx, cff.Job{
			Run: task1370.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1370)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1525:12
		task1371 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1371.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1525_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1525,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1371.run = func(ctx context.Context) (err error) {
			taskEmitter := task1371.emitter
			startTime := time.Now()
			defer func() {
				if task1371.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1371.ran.Store(true)

			_1525_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1371.job = sched.Enqueue(ctx, cff.Job{
			Run: task1371.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1371)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1526:12
		task1372 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1372.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1526_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1526,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1372.run = func(ctx context.Context) (err error) {
			taskEmitter := task1372.emitter
			startTime := time.Now()
			defer func() {
				if task1372.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1372.ran.Store(true)

			_1526_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1372.job = sched.Enqueue(ctx, cff.Job{
			Run: task1372.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1372)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1527:12
		task1373 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1373.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1527_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1527,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1373.run = func(ctx context.Context) (err error) {
			taskEmitter := task1373.emitter
			startTime := time.Now()
			defer func() {
				if task1373.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1373.ran.Store(true)

			_1527_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1373.job = sched.Enqueue(ctx, cff.Job{
			Run: task1373.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1373)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1528:12
		task1374 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1374.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1528_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1528,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1374.run = func(ctx context.Context) (err error) {
			taskEmitter := task1374.emitter
			startTime := time.Now()
			defer func() {
				if task1374.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1374.ran.Store(true)

			_1528_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1374.job = sched.Enqueue(ctx, cff.Job{
			Run: task1374.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1374)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1529:12
		task1375 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1375.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1529_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1529,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1375.run = func(ctx context.Context) (err error) {
			taskEmitter := task1375.emitter
			startTime := time.Now()
			defer func() {
				if task1375.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1375.ran.Store(true)

			_1529_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1375.job = sched.Enqueue(ctx, cff.Job{
			Run: task1375.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1375)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1530:12
		task1376 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1376.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1530_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1530,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1376.run = func(ctx context.Context) (err error) {
			taskEmitter := task1376.emitter
			startTime := time.Now()
			defer func() {
				if task1376.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1376.ran.Store(true)

			_1530_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1376.job = sched.Enqueue(ctx, cff.Job{
			Run: task1376.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1376)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1531:12
		task1377 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1377.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1531_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1531,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1377.run = func(ctx context.Context) (err error) {
			taskEmitter := task1377.emitter
			startTime := time.Now()
			defer func() {
				if task1377.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1377.ran.Store(true)

			_1531_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1377.job = sched.Enqueue(ctx, cff.Job{
			Run: task1377.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1377)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1532:12
		task1378 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1378.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1532_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1532,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1378.run = func(ctx context.Context) (err error) {
			taskEmitter := task1378.emitter
			startTime := time.Now()
			defer func() {
				if task1378.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1378.ran.Store(true)

			_1532_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1378.job = sched.Enqueue(ctx, cff.Job{
			Run: task1378.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1378)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1533:12
		task1379 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1379.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1533_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1533,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1379.run = func(ctx context.Context) (err error) {
			taskEmitter := task1379.emitter
			startTime := time.Now()
			defer func() {
				if task1379.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1379.ran.Store(true)

			_1533_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1379.job = sched.Enqueue(ctx, cff.Job{
			Run: task1379.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1379)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1534:12
		task1380 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1380.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1534_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1534,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1380.run = func(ctx context.Context) (err error) {
			taskEmitter := task1380.emitter
			startTime := time.Now()
			defer func() {
				if task1380.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1380.ran.Store(true)

			_1534_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1380.job = sched.Enqueue(ctx, cff.Job{
			Run: task1380.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1380)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1535:12
		task1381 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1381.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1535_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1535,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1381.run = func(ctx context.Context) (err error) {
			taskEmitter := task1381.emitter
			startTime := time.Now()
			defer func() {
				if task1381.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1381.ran.Store(true)

			_1535_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1381.job = sched.Enqueue(ctx, cff.Job{
			Run: task1381.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1381)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1536:12
		task1382 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1382.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1536_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1536,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1382.run = func(ctx context.Context) (err error) {
			taskEmitter := task1382.emitter
			startTime := time.Now()
			defer func() {
				if task1382.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1382.ran.Store(true)

			_1536_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1382.job = sched.Enqueue(ctx, cff.Job{
			Run: task1382.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1382)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1537:12
		task1383 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1383.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1537_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1537,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1383.run = func(ctx context.Context) (err error) {
			taskEmitter := task1383.emitter
			startTime := time.Now()
			defer func() {
				if task1383.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1383.ran.Store(true)

			_1537_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1383.job = sched.Enqueue(ctx, cff.Job{
			Run: task1383.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1383)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1538:12
		task1384 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1384.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1538_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1538,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1384.run = func(ctx context.Context) (err error) {
			taskEmitter := task1384.emitter
			startTime := time.Now()
			defer func() {
				if task1384.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1384.ran.Store(true)

			_1538_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1384.job = sched.Enqueue(ctx, cff.Job{
			Run: task1384.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1384)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1539:12
		task1385 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1385.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1539_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1539,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1385.run = func(ctx context.Context) (err error) {
			taskEmitter := task1385.emitter
			startTime := time.Now()
			defer func() {
				if task1385.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1385.ran.Store(true)

			_1539_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1385.job = sched.Enqueue(ctx, cff.Job{
			Run: task1385.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1385)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1540:12
		task1386 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1386.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1540_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1540,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1386.run = func(ctx context.Context) (err error) {
			taskEmitter := task1386.emitter
			startTime := time.Now()
			defer func() {
				if task1386.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1386.ran.Store(true)

			_1540_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1386.job = sched.Enqueue(ctx, cff.Job{
			Run: task1386.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1386)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1541:12
		task1387 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1387.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1541_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1541,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1387.run = func(ctx context.Context) (err error) {
			taskEmitter := task1387.emitter
			startTime := time.Now()
			defer func() {
				if task1387.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1387.ran.Store(true)

			_1541_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1387.job = sched.Enqueue(ctx, cff.Job{
			Run: task1387.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1387)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1542:12
		task1388 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1388.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1542_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1542,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1388.run = func(ctx context.Context) (err error) {
			taskEmitter := task1388.emitter
			startTime := time.Now()
			defer func() {
				if task1388.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1388.ran.Store(true)

			_1542_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1388.job = sched.Enqueue(ctx, cff.Job{
			Run: task1388.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1388)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1543:12
		task1389 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1389.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1543_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1543,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1389.run = func(ctx context.Context) (err error) {
			taskEmitter := task1389.emitter
			startTime := time.Now()
			defer func() {
				if task1389.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1389.ran.Store(true)

			_1543_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1389.job = sched.Enqueue(ctx, cff.Job{
			Run: task1389.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1389)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1544:12
		task1390 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1390.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1544_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1544,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1390.run = func(ctx context.Context) (err error) {
			taskEmitter := task1390.emitter
			startTime := time.Now()
			defer func() {
				if task1390.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1390.ran.Store(true)

			_1544_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1390.job = sched.Enqueue(ctx, cff.Job{
			Run: task1390.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1390)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1545:12
		task1391 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1391.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1545_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1545,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1391.run = func(ctx context.Context) (err error) {
			taskEmitter := task1391.emitter
			startTime := time.Now()
			defer func() {
				if task1391.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1391.ran.Store(true)

			_1545_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1391.job = sched.Enqueue(ctx, cff.Job{
			Run: task1391.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1391)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1546:12
		task1392 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1392.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1546_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1546,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1392.run = func(ctx context.Context) (err error) {
			taskEmitter := task1392.emitter
			startTime := time.Now()
			defer func() {
				if task1392.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1392.ran.Store(true)

			_1546_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1392.job = sched.Enqueue(ctx, cff.Job{
			Run: task1392.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1392)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1547:12
		task1393 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1393.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1547_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1547,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1393.run = func(ctx context.Context) (err error) {
			taskEmitter := task1393.emitter
			startTime := time.Now()
			defer func() {
				if task1393.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1393.ran.Store(true)

			_1547_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1393.job = sched.Enqueue(ctx, cff.Job{
			Run: task1393.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1393)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1548:12
		task1394 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1394.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1548_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1548,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1394.run = func(ctx context.Context) (err error) {
			taskEmitter := task1394.emitter
			startTime := time.Now()
			defer func() {
				if task1394.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1394.ran.Store(true)

			_1548_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1394.job = sched.Enqueue(ctx, cff.Job{
			Run: task1394.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1394)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1549:12
		task1395 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1395.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1549_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1549,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1395.run = func(ctx context.Context) (err error) {
			taskEmitter := task1395.emitter
			startTime := time.Now()
			defer func() {
				if task1395.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1395.ran.Store(true)

			_1549_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1395.job = sched.Enqueue(ctx, cff.Job{
			Run: task1395.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1395)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1550:12
		task1396 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1396.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1550_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1550,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1396.run = func(ctx context.Context) (err error) {
			taskEmitter := task1396.emitter
			startTime := time.Now()
			defer func() {
				if task1396.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1396.ran.Store(true)

			_1550_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1396.job = sched.Enqueue(ctx, cff.Job{
			Run: task1396.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1396)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1551:12
		task1397 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1397.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1551_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1551,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1397.run = func(ctx context.Context) (err error) {
			taskEmitter := task1397.emitter
			startTime := time.Now()
			defer func() {
				if task1397.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1397.ran.Store(true)

			_1551_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1397.job = sched.Enqueue(ctx, cff.Job{
			Run: task1397.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1397)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1552:12
		task1398 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1398.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1552_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1552,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1398.run = func(ctx context.Context) (err error) {
			taskEmitter := task1398.emitter
			startTime := time.Now()
			defer func() {
				if task1398.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1398.ran.Store(true)

			_1552_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1398.job = sched.Enqueue(ctx, cff.Job{
			Run: task1398.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1398)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1553:12
		task1399 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1399.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1553_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1553,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1399.run = func(ctx context.Context) (err error) {
			taskEmitter := task1399.emitter
			startTime := time.Now()
			defer func() {
				if task1399.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1399.ran.Store(true)

			_1553_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1399.job = sched.Enqueue(ctx, cff.Job{
			Run: task1399.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1399)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1554:12
		task1400 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1400.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1554_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1554,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1400.run = func(ctx context.Context) (err error) {
			taskEmitter := task1400.emitter
			startTime := time.Now()
			defer func() {
				if task1400.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1400.ran.Store(true)

			_1554_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1400.job = sched.Enqueue(ctx, cff.Job{
			Run: task1400.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1400)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1555:12
		task1401 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1401.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1555_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1555,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1401.run = func(ctx context.Context) (err error) {
			taskEmitter := task1401.emitter
			startTime := time.Now()
			defer func() {
				if task1401.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1401.ran.Store(true)

			_1555_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1401.job = sched.Enqueue(ctx, cff.Job{
			Run: task1401.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1401)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1556:12
		task1402 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1402.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1556_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1556,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1402.run = func(ctx context.Context) (err error) {
			taskEmitter := task1402.emitter
			startTime := time.Now()
			defer func() {
				if task1402.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1402.ran.Store(true)

			_1556_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1402.job = sched.Enqueue(ctx, cff.Job{
			Run: task1402.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1402)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1557:12
		task1403 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1403.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1557_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1557,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1403.run = func(ctx context.Context) (err error) {
			taskEmitter := task1403.emitter
			startTime := time.Now()
			defer func() {
				if task1403.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1403.ran.Store(true)

			_1557_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1403.job = sched.Enqueue(ctx, cff.Job{
			Run: task1403.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1403)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1558:12
		task1404 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1404.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1558_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1558,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1404.run = func(ctx context.Context) (err error) {
			taskEmitter := task1404.emitter
			startTime := time.Now()
			defer func() {
				if task1404.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1404.ran.Store(true)

			_1558_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1404.job = sched.Enqueue(ctx, cff.Job{
			Run: task1404.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1404)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1559:12
		task1405 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1405.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1559_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1559,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1405.run = func(ctx context.Context) (err error) {
			taskEmitter := task1405.emitter
			startTime := time.Now()
			defer func() {
				if task1405.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1405.ran.Store(true)

			_1559_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1405.job = sched.Enqueue(ctx, cff.Job{
			Run: task1405.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1405)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1560:12
		task1406 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1406.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1560_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1560,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1406.run = func(ctx context.Context) (err error) {
			taskEmitter := task1406.emitter
			startTime := time.Now()
			defer func() {
				if task1406.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1406.ran.Store(true)

			_1560_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1406.job = sched.Enqueue(ctx, cff.Job{
			Run: task1406.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1406)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1561:12
		task1407 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1407.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1561_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1561,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1407.run = func(ctx context.Context) (err error) {
			taskEmitter := task1407.emitter
			startTime := time.Now()
			defer func() {
				if task1407.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1407.ran.Store(true)

			_1561_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1407.job = sched.Enqueue(ctx, cff.Job{
			Run: task1407.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1407)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1562:12
		task1408 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1408.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1562_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1562,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1408.run = func(ctx context.Context) (err error) {
			taskEmitter := task1408.emitter
			startTime := time.Now()
			defer func() {
				if task1408.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1408.ran.Store(true)

			_1562_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1408.job = sched.Enqueue(ctx, cff.Job{
			Run: task1408.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1408)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1563:12
		task1409 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1409.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1563_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1563,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1409.run = func(ctx context.Context) (err error) {
			taskEmitter := task1409.emitter
			startTime := time.Now()
			defer func() {
				if task1409.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1409.ran.Store(true)

			_1563_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1409.job = sched.Enqueue(ctx, cff.Job{
			Run: task1409.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1409)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1564:12
		task1410 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1410.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1564_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1564,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1410.run = func(ctx context.Context) (err error) {
			taskEmitter := task1410.emitter
			startTime := time.Now()
			defer func() {
				if task1410.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1410.ran.Store(true)

			_1564_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1410.job = sched.Enqueue(ctx, cff.Job{
			Run: task1410.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1410)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1565:12
		task1411 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1411.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1565_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1565,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1411.run = func(ctx context.Context) (err error) {
			taskEmitter := task1411.emitter
			startTime := time.Now()
			defer func() {
				if task1411.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1411.ran.Store(true)

			_1565_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1411.job = sched.Enqueue(ctx, cff.Job{
			Run: task1411.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1411)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1566:12
		task1412 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1412.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1566_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1566,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1412.run = func(ctx context.Context) (err error) {
			taskEmitter := task1412.emitter
			startTime := time.Now()
			defer func() {
				if task1412.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1412.ran.Store(true)

			_1566_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1412.job = sched.Enqueue(ctx, cff.Job{
			Run: task1412.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1412)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1567:12
		task1413 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1413.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1567_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1567,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1413.run = func(ctx context.Context) (err error) {
			taskEmitter := task1413.emitter
			startTime := time.Now()
			defer func() {
				if task1413.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1413.ran.Store(true)

			_1567_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1413.job = sched.Enqueue(ctx, cff.Job{
			Run: task1413.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1413)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1568:12
		task1414 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1414.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1568_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1568,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1414.run = func(ctx context.Context) (err error) {
			taskEmitter := task1414.emitter
			startTime := time.Now()
			defer func() {
				if task1414.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1414.ran.Store(true)

			_1568_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1414.job = sched.Enqueue(ctx, cff.Job{
			Run: task1414.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1414)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1569:12
		task1415 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1415.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1569_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1569,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1415.run = func(ctx context.Context) (err error) {
			taskEmitter := task1415.emitter
			startTime := time.Now()
			defer func() {
				if task1415.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1415.ran.Store(true)

			_1569_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1415.job = sched.Enqueue(ctx, cff.Job{
			Run: task1415.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1415)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1570:12
		task1416 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1416.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1570_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1570,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1416.run = func(ctx context.Context) (err error) {
			taskEmitter := task1416.emitter
			startTime := time.Now()
			defer func() {
				if task1416.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1416.ran.Store(true)

			_1570_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1416.job = sched.Enqueue(ctx, cff.Job{
			Run: task1416.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1416)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1571:12
		task1417 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1417.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1571_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1571,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1417.run = func(ctx context.Context) (err error) {
			taskEmitter := task1417.emitter
			startTime := time.Now()
			defer func() {
				if task1417.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1417.ran.Store(true)

			_1571_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1417.job = sched.Enqueue(ctx, cff.Job{
			Run: task1417.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1417)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1572:12
		task1418 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1418.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1572_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1572,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1418.run = func(ctx context.Context) (err error) {
			taskEmitter := task1418.emitter
			startTime := time.Now()
			defer func() {
				if task1418.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1418.ran.Store(true)

			_1572_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1418.job = sched.Enqueue(ctx, cff.Job{
			Run: task1418.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1418)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1573:12
		task1419 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1419.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1573_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1573,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1419.run = func(ctx context.Context) (err error) {
			taskEmitter := task1419.emitter
			startTime := time.Now()
			defer func() {
				if task1419.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1419.ran.Store(true)

			_1573_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1419.job = sched.Enqueue(ctx, cff.Job{
			Run: task1419.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1419)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1574:12
		task1420 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1420.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1574_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1574,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1420.run = func(ctx context.Context) (err error) {
			taskEmitter := task1420.emitter
			startTime := time.Now()
			defer func() {
				if task1420.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1420.ran.Store(true)

			_1574_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1420.job = sched.Enqueue(ctx, cff.Job{
			Run: task1420.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1420)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1575:12
		task1421 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1421.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1575_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1575,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1421.run = func(ctx context.Context) (err error) {
			taskEmitter := task1421.emitter
			startTime := time.Now()
			defer func() {
				if task1421.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1421.ran.Store(true)

			_1575_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1421.job = sched.Enqueue(ctx, cff.Job{
			Run: task1421.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1421)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1576:12
		task1422 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1422.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1576_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1576,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1422.run = func(ctx context.Context) (err error) {
			taskEmitter := task1422.emitter
			startTime := time.Now()
			defer func() {
				if task1422.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1422.ran.Store(true)

			_1576_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1422.job = sched.Enqueue(ctx, cff.Job{
			Run: task1422.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1422)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1577:12
		task1423 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1423.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1577_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1577,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1423.run = func(ctx context.Context) (err error) {
			taskEmitter := task1423.emitter
			startTime := time.Now()
			defer func() {
				if task1423.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1423.ran.Store(true)

			_1577_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1423.job = sched.Enqueue(ctx, cff.Job{
			Run: task1423.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1423)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1578:12
		task1424 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1424.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1578_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1578,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1424.run = func(ctx context.Context) (err error) {
			taskEmitter := task1424.emitter
			startTime := time.Now()
			defer func() {
				if task1424.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1424.ran.Store(true)

			_1578_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1424.job = sched.Enqueue(ctx, cff.Job{
			Run: task1424.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1424)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1579:12
		task1425 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1425.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1579_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1579,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1425.run = func(ctx context.Context) (err error) {
			taskEmitter := task1425.emitter
			startTime := time.Now()
			defer func() {
				if task1425.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1425.ran.Store(true)

			_1579_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1425.job = sched.Enqueue(ctx, cff.Job{
			Run: task1425.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1425)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1580:12
		task1426 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1426.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1580_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1580,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1426.run = func(ctx context.Context) (err error) {
			taskEmitter := task1426.emitter
			startTime := time.Now()
			defer func() {
				if task1426.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1426.ran.Store(true)

			_1580_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1426.job = sched.Enqueue(ctx, cff.Job{
			Run: task1426.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1426)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1581:12
		task1427 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1427.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1581_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1581,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1427.run = func(ctx context.Context) (err error) {
			taskEmitter := task1427.emitter
			startTime := time.Now()
			defer func() {
				if task1427.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1427.ran.Store(true)

			_1581_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1427.job = sched.Enqueue(ctx, cff.Job{
			Run: task1427.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1427)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1582:12
		task1428 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1428.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1582_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1582,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1428.run = func(ctx context.Context) (err error) {
			taskEmitter := task1428.emitter
			startTime := time.Now()
			defer func() {
				if task1428.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1428.ran.Store(true)

			_1582_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1428.job = sched.Enqueue(ctx, cff.Job{
			Run: task1428.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1428)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1583:12
		task1429 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1429.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1583_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1583,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1429.run = func(ctx context.Context) (err error) {
			taskEmitter := task1429.emitter
			startTime := time.Now()
			defer func() {
				if task1429.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1429.ran.Store(true)

			_1583_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1429.job = sched.Enqueue(ctx, cff.Job{
			Run: task1429.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1429)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1584:12
		task1430 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1430.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1584_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1584,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1430.run = func(ctx context.Context) (err error) {
			taskEmitter := task1430.emitter
			startTime := time.Now()
			defer func() {
				if task1430.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1430.ran.Store(true)

			_1584_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1430.job = sched.Enqueue(ctx, cff.Job{
			Run: task1430.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1430)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1585:12
		task1431 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1431.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1585_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1585,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1431.run = func(ctx context.Context) (err error) {
			taskEmitter := task1431.emitter
			startTime := time.Now()
			defer func() {
				if task1431.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1431.ran.Store(true)

			_1585_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1431.job = sched.Enqueue(ctx, cff.Job{
			Run: task1431.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1431)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1586:12
		task1432 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1432.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1586_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1586,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1432.run = func(ctx context.Context) (err error) {
			taskEmitter := task1432.emitter
			startTime := time.Now()
			defer func() {
				if task1432.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1432.ran.Store(true)

			_1586_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1432.job = sched.Enqueue(ctx, cff.Job{
			Run: task1432.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1432)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1587:12
		task1433 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1433.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1587_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1587,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1433.run = func(ctx context.Context) (err error) {
			taskEmitter := task1433.emitter
			startTime := time.Now()
			defer func() {
				if task1433.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1433.ran.Store(true)

			_1587_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1433.job = sched.Enqueue(ctx, cff.Job{
			Run: task1433.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1433)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1588:12
		task1434 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1434.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1588_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1588,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1434.run = func(ctx context.Context) (err error) {
			taskEmitter := task1434.emitter
			startTime := time.Now()
			defer func() {
				if task1434.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1434.ran.Store(true)

			_1588_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1434.job = sched.Enqueue(ctx, cff.Job{
			Run: task1434.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1434)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1589:12
		task1435 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1435.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1589_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1589,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1435.run = func(ctx context.Context) (err error) {
			taskEmitter := task1435.emitter
			startTime := time.Now()
			defer func() {
				if task1435.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1435.ran.Store(true)

			_1589_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1435.job = sched.Enqueue(ctx, cff.Job{
			Run: task1435.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1435)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1590:12
		task1436 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1436.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1590_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1590,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1436.run = func(ctx context.Context) (err error) {
			taskEmitter := task1436.emitter
			startTime := time.Now()
			defer func() {
				if task1436.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1436.ran.Store(true)

			_1590_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1436.job = sched.Enqueue(ctx, cff.Job{
			Run: task1436.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1436)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1591:12
		task1437 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1437.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1591_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1591,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1437.run = func(ctx context.Context) (err error) {
			taskEmitter := task1437.emitter
			startTime := time.Now()
			defer func() {
				if task1437.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1437.ran.Store(true)

			_1591_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1437.job = sched.Enqueue(ctx, cff.Job{
			Run: task1437.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1437)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1592:12
		task1438 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1438.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1592_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1592,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1438.run = func(ctx context.Context) (err error) {
			taskEmitter := task1438.emitter
			startTime := time.Now()
			defer func() {
				if task1438.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1438.ran.Store(true)

			_1592_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1438.job = sched.Enqueue(ctx, cff.Job{
			Run: task1438.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1438)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1593:12
		task1439 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1439.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1593_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1593,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1439.run = func(ctx context.Context) (err error) {
			taskEmitter := task1439.emitter
			startTime := time.Now()
			defer func() {
				if task1439.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1439.ran.Store(true)

			_1593_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1439.job = sched.Enqueue(ctx, cff.Job{
			Run: task1439.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1439)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1594:12
		task1440 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1440.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1594_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1594,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1440.run = func(ctx context.Context) (err error) {
			taskEmitter := task1440.emitter
			startTime := time.Now()
			defer func() {
				if task1440.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1440.ran.Store(true)

			_1594_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1440.job = sched.Enqueue(ctx, cff.Job{
			Run: task1440.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1440)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1595:12
		task1441 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1441.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1595_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1595,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1441.run = func(ctx context.Context) (err error) {
			taskEmitter := task1441.emitter
			startTime := time.Now()
			defer func() {
				if task1441.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1441.ran.Store(true)

			_1595_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1441.job = sched.Enqueue(ctx, cff.Job{
			Run: task1441.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1441)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1596:12
		task1442 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1442.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1596_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1596,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1442.run = func(ctx context.Context) (err error) {
			taskEmitter := task1442.emitter
			startTime := time.Now()
			defer func() {
				if task1442.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1442.ran.Store(true)

			_1596_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1442.job = sched.Enqueue(ctx, cff.Job{
			Run: task1442.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1442)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1597:12
		task1443 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1443.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1597_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1597,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1443.run = func(ctx context.Context) (err error) {
			taskEmitter := task1443.emitter
			startTime := time.Now()
			defer func() {
				if task1443.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1443.ran.Store(true)

			_1597_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1443.job = sched.Enqueue(ctx, cff.Job{
			Run: task1443.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1443)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1598:12
		task1444 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1444.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1598_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1598,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1444.run = func(ctx context.Context) (err error) {
			taskEmitter := task1444.emitter
			startTime := time.Now()
			defer func() {
				if task1444.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1444.ran.Store(true)

			_1598_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1444.job = sched.Enqueue(ctx, cff.Job{
			Run: task1444.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1444)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1599:12
		task1445 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1445.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1599_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1599,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1445.run = func(ctx context.Context) (err error) {
			taskEmitter := task1445.emitter
			startTime := time.Now()
			defer func() {
				if task1445.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1445.ran.Store(true)

			_1599_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1445.job = sched.Enqueue(ctx, cff.Job{
			Run: task1445.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1445)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1600:12
		task1446 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1446.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1600_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1600,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1446.run = func(ctx context.Context) (err error) {
			taskEmitter := task1446.emitter
			startTime := time.Now()
			defer func() {
				if task1446.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1446.ran.Store(true)

			_1600_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1446.job = sched.Enqueue(ctx, cff.Job{
			Run: task1446.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1446)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1601:12
		task1447 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1447.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1601_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1601,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1447.run = func(ctx context.Context) (err error) {
			taskEmitter := task1447.emitter
			startTime := time.Now()
			defer func() {
				if task1447.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1447.ran.Store(true)

			_1601_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1447.job = sched.Enqueue(ctx, cff.Job{
			Run: task1447.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1447)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1602:12
		task1448 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1448.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1602_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1602,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1448.run = func(ctx context.Context) (err error) {
			taskEmitter := task1448.emitter
			startTime := time.Now()
			defer func() {
				if task1448.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1448.ran.Store(true)

			_1602_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1448.job = sched.Enqueue(ctx, cff.Job{
			Run: task1448.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1448)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1603:12
		task1449 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1449.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1603_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1603,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1449.run = func(ctx context.Context) (err error) {
			taskEmitter := task1449.emitter
			startTime := time.Now()
			defer func() {
				if task1449.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1449.ran.Store(true)

			_1603_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1449.job = sched.Enqueue(ctx, cff.Job{
			Run: task1449.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1449)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1604:12
		task1450 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1450.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1604_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1604,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1450.run = func(ctx context.Context) (err error) {
			taskEmitter := task1450.emitter
			startTime := time.Now()
			defer func() {
				if task1450.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1450.ran.Store(true)

			_1604_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1450.job = sched.Enqueue(ctx, cff.Job{
			Run: task1450.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1450)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1605:12
		task1451 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1451.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1605_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1605,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1451.run = func(ctx context.Context) (err error) {
			taskEmitter := task1451.emitter
			startTime := time.Now()
			defer func() {
				if task1451.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1451.ran.Store(true)

			_1605_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1451.job = sched.Enqueue(ctx, cff.Job{
			Run: task1451.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1451)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1606:12
		task1452 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1452.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1606_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1606,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1452.run = func(ctx context.Context) (err error) {
			taskEmitter := task1452.emitter
			startTime := time.Now()
			defer func() {
				if task1452.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1452.ran.Store(true)

			_1606_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1452.job = sched.Enqueue(ctx, cff.Job{
			Run: task1452.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1452)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1607:12
		task1453 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1453.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1607_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1607,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1453.run = func(ctx context.Context) (err error) {
			taskEmitter := task1453.emitter
			startTime := time.Now()
			defer func() {
				if task1453.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1453.ran.Store(true)

			_1607_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1453.job = sched.Enqueue(ctx, cff.Job{
			Run: task1453.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1453)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1608:12
		task1454 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1454.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1608_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1608,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1454.run = func(ctx context.Context) (err error) {
			taskEmitter := task1454.emitter
			startTime := time.Now()
			defer func() {
				if task1454.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1454.ran.Store(true)

			_1608_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1454.job = sched.Enqueue(ctx, cff.Job{
			Run: task1454.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1454)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1609:12
		task1455 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1455.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1609_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1609,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1455.run = func(ctx context.Context) (err error) {
			taskEmitter := task1455.emitter
			startTime := time.Now()
			defer func() {
				if task1455.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1455.ran.Store(true)

			_1609_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1455.job = sched.Enqueue(ctx, cff.Job{
			Run: task1455.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1455)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1610:12
		task1456 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1456.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1610_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1610,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1456.run = func(ctx context.Context) (err error) {
			taskEmitter := task1456.emitter
			startTime := time.Now()
			defer func() {
				if task1456.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1456.ran.Store(true)

			_1610_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1456.job = sched.Enqueue(ctx, cff.Job{
			Run: task1456.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1456)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1611:12
		task1457 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1457.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1611_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1611,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1457.run = func(ctx context.Context) (err error) {
			taskEmitter := task1457.emitter
			startTime := time.Now()
			defer func() {
				if task1457.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1457.ran.Store(true)

			_1611_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1457.job = sched.Enqueue(ctx, cff.Job{
			Run: task1457.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1457)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1612:12
		task1458 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1458.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1612_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1612,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1458.run = func(ctx context.Context) (err error) {
			taskEmitter := task1458.emitter
			startTime := time.Now()
			defer func() {
				if task1458.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1458.ran.Store(true)

			_1612_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1458.job = sched.Enqueue(ctx, cff.Job{
			Run: task1458.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1458)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1613:12
		task1459 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1459.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1613_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1613,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1459.run = func(ctx context.Context) (err error) {
			taskEmitter := task1459.emitter
			startTime := time.Now()
			defer func() {
				if task1459.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1459.ran.Store(true)

			_1613_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1459.job = sched.Enqueue(ctx, cff.Job{
			Run: task1459.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1459)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1614:12
		task1460 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1460.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1614_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1614,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1460.run = func(ctx context.Context) (err error) {
			taskEmitter := task1460.emitter
			startTime := time.Now()
			defer func() {
				if task1460.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1460.ran.Store(true)

			_1614_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1460.job = sched.Enqueue(ctx, cff.Job{
			Run: task1460.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1460)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1615:12
		task1461 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1461.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1615_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1615,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1461.run = func(ctx context.Context) (err error) {
			taskEmitter := task1461.emitter
			startTime := time.Now()
			defer func() {
				if task1461.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1461.ran.Store(true)

			_1615_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1461.job = sched.Enqueue(ctx, cff.Job{
			Run: task1461.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1461)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1616:12
		task1462 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1462.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1616_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1616,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1462.run = func(ctx context.Context) (err error) {
			taskEmitter := task1462.emitter
			startTime := time.Now()
			defer func() {
				if task1462.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1462.ran.Store(true)

			_1616_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1462.job = sched.Enqueue(ctx, cff.Job{
			Run: task1462.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1462)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1617:12
		task1463 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1463.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1617_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1617,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1463.run = func(ctx context.Context) (err error) {
			taskEmitter := task1463.emitter
			startTime := time.Now()
			defer func() {
				if task1463.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1463.ran.Store(true)

			_1617_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1463.job = sched.Enqueue(ctx, cff.Job{
			Run: task1463.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1463)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1618:12
		task1464 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1464.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1618_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1618,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1464.run = func(ctx context.Context) (err error) {
			taskEmitter := task1464.emitter
			startTime := time.Now()
			defer func() {
				if task1464.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1464.ran.Store(true)

			_1618_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1464.job = sched.Enqueue(ctx, cff.Job{
			Run: task1464.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1464)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1619:12
		task1465 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1465.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1619_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1619,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1465.run = func(ctx context.Context) (err error) {
			taskEmitter := task1465.emitter
			startTime := time.Now()
			defer func() {
				if task1465.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1465.ran.Store(true)

			_1619_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1465.job = sched.Enqueue(ctx, cff.Job{
			Run: task1465.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1465)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1620:12
		task1466 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1466.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1620_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1620,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1466.run = func(ctx context.Context) (err error) {
			taskEmitter := task1466.emitter
			startTime := time.Now()
			defer func() {
				if task1466.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1466.ran.Store(true)

			_1620_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1466.job = sched.Enqueue(ctx, cff.Job{
			Run: task1466.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1466)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1621:12
		task1467 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1467.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1621_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1621,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1467.run = func(ctx context.Context) (err error) {
			taskEmitter := task1467.emitter
			startTime := time.Now()
			defer func() {
				if task1467.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1467.ran.Store(true)

			_1621_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1467.job = sched.Enqueue(ctx, cff.Job{
			Run: task1467.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1467)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1622:12
		task1468 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1468.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1622_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1622,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1468.run = func(ctx context.Context) (err error) {
			taskEmitter := task1468.emitter
			startTime := time.Now()
			defer func() {
				if task1468.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1468.ran.Store(true)

			_1622_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1468.job = sched.Enqueue(ctx, cff.Job{
			Run: task1468.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1468)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1623:12
		task1469 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1469.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1623_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1623,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1469.run = func(ctx context.Context) (err error) {
			taskEmitter := task1469.emitter
			startTime := time.Now()
			defer func() {
				if task1469.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1469.ran.Store(true)

			_1623_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1469.job = sched.Enqueue(ctx, cff.Job{
			Run: task1469.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1469)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1624:12
		task1470 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1470.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1624_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1624,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1470.run = func(ctx context.Context) (err error) {
			taskEmitter := task1470.emitter
			startTime := time.Now()
			defer func() {
				if task1470.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1470.ran.Store(true)

			_1624_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1470.job = sched.Enqueue(ctx, cff.Job{
			Run: task1470.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1470)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1625:12
		task1471 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1471.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1625_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1625,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1471.run = func(ctx context.Context) (err error) {
			taskEmitter := task1471.emitter
			startTime := time.Now()
			defer func() {
				if task1471.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1471.ran.Store(true)

			_1625_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1471.job = sched.Enqueue(ctx, cff.Job{
			Run: task1471.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1471)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1626:12
		task1472 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1472.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1626_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1626,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1472.run = func(ctx context.Context) (err error) {
			taskEmitter := task1472.emitter
			startTime := time.Now()
			defer func() {
				if task1472.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1472.ran.Store(true)

			_1626_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1472.job = sched.Enqueue(ctx, cff.Job{
			Run: task1472.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1472)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1627:12
		task1473 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1473.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1627_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1627,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1473.run = func(ctx context.Context) (err error) {
			taskEmitter := task1473.emitter
			startTime := time.Now()
			defer func() {
				if task1473.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1473.ran.Store(true)

			_1627_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1473.job = sched.Enqueue(ctx, cff.Job{
			Run: task1473.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1473)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1628:12
		task1474 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1474.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1628_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1628,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1474.run = func(ctx context.Context) (err error) {
			taskEmitter := task1474.emitter
			startTime := time.Now()
			defer func() {
				if task1474.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1474.ran.Store(true)

			_1628_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1474.job = sched.Enqueue(ctx, cff.Job{
			Run: task1474.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1474)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1629:12
		task1475 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1475.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1629_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1629,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1475.run = func(ctx context.Context) (err error) {
			taskEmitter := task1475.emitter
			startTime := time.Now()
			defer func() {
				if task1475.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1475.ran.Store(true)

			_1629_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1475.job = sched.Enqueue(ctx, cff.Job{
			Run: task1475.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1475)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1630:12
		task1476 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1476.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1630_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1630,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1476.run = func(ctx context.Context) (err error) {
			taskEmitter := task1476.emitter
			startTime := time.Now()
			defer func() {
				if task1476.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1476.ran.Store(true)

			_1630_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1476.job = sched.Enqueue(ctx, cff.Job{
			Run: task1476.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1476)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1631:12
		task1477 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1477.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1631_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1631,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1477.run = func(ctx context.Context) (err error) {
			taskEmitter := task1477.emitter
			startTime := time.Now()
			defer func() {
				if task1477.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1477.ran.Store(true)

			_1631_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1477.job = sched.Enqueue(ctx, cff.Job{
			Run: task1477.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1477)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1632:12
		task1478 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1478.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1632_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1632,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1478.run = func(ctx context.Context) (err error) {
			taskEmitter := task1478.emitter
			startTime := time.Now()
			defer func() {
				if task1478.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1478.ran.Store(true)

			_1632_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1478.job = sched.Enqueue(ctx, cff.Job{
			Run: task1478.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1478)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1633:12
		task1479 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1479.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1633_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1633,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1479.run = func(ctx context.Context) (err error) {
			taskEmitter := task1479.emitter
			startTime := time.Now()
			defer func() {
				if task1479.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1479.ran.Store(true)

			_1633_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1479.job = sched.Enqueue(ctx, cff.Job{
			Run: task1479.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1479)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1634:12
		task1480 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1480.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1634_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1634,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1480.run = func(ctx context.Context) (err error) {
			taskEmitter := task1480.emitter
			startTime := time.Now()
			defer func() {
				if task1480.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1480.ran.Store(true)

			_1634_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1480.job = sched.Enqueue(ctx, cff.Job{
			Run: task1480.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1480)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1635:12
		task1481 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1481.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1635_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1635,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1481.run = func(ctx context.Context) (err error) {
			taskEmitter := task1481.emitter
			startTime := time.Now()
			defer func() {
				if task1481.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1481.ran.Store(true)

			_1635_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1481.job = sched.Enqueue(ctx, cff.Job{
			Run: task1481.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1481)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1636:12
		task1482 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1482.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1636_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1636,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1482.run = func(ctx context.Context) (err error) {
			taskEmitter := task1482.emitter
			startTime := time.Now()
			defer func() {
				if task1482.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1482.ran.Store(true)

			_1636_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1482.job = sched.Enqueue(ctx, cff.Job{
			Run: task1482.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1482)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1637:12
		task1483 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1483.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1637_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1637,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1483.run = func(ctx context.Context) (err error) {
			taskEmitter := task1483.emitter
			startTime := time.Now()
			defer func() {
				if task1483.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1483.ran.Store(true)

			_1637_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1483.job = sched.Enqueue(ctx, cff.Job{
			Run: task1483.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1483)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1638:12
		task1484 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1484.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1638_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1638,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1484.run = func(ctx context.Context) (err error) {
			taskEmitter := task1484.emitter
			startTime := time.Now()
			defer func() {
				if task1484.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1484.ran.Store(true)

			_1638_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1484.job = sched.Enqueue(ctx, cff.Job{
			Run: task1484.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1484)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1639:12
		task1485 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1485.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1639_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1639,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1485.run = func(ctx context.Context) (err error) {
			taskEmitter := task1485.emitter
			startTime := time.Now()
			defer func() {
				if task1485.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1485.ran.Store(true)

			_1639_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1485.job = sched.Enqueue(ctx, cff.Job{
			Run: task1485.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1485)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1640:12
		task1486 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1486.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1640_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1640,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1486.run = func(ctx context.Context) (err error) {
			taskEmitter := task1486.emitter
			startTime := time.Now()
			defer func() {
				if task1486.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1486.ran.Store(true)

			_1640_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1486.job = sched.Enqueue(ctx, cff.Job{
			Run: task1486.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1486)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1641:12
		task1487 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1487.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1641_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1641,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1487.run = func(ctx context.Context) (err error) {
			taskEmitter := task1487.emitter
			startTime := time.Now()
			defer func() {
				if task1487.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1487.ran.Store(true)

			_1641_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1487.job = sched.Enqueue(ctx, cff.Job{
			Run: task1487.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1487)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1642:12
		task1488 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1488.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1642_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1642,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1488.run = func(ctx context.Context) (err error) {
			taskEmitter := task1488.emitter
			startTime := time.Now()
			defer func() {
				if task1488.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1488.ran.Store(true)

			_1642_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1488.job = sched.Enqueue(ctx, cff.Job{
			Run: task1488.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1488)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1643:12
		task1489 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1489.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1643_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1643,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1489.run = func(ctx context.Context) (err error) {
			taskEmitter := task1489.emitter
			startTime := time.Now()
			defer func() {
				if task1489.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1489.ran.Store(true)

			_1643_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1489.job = sched.Enqueue(ctx, cff.Job{
			Run: task1489.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1489)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1644:12
		task1490 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1490.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1644_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1644,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1490.run = func(ctx context.Context) (err error) {
			taskEmitter := task1490.emitter
			startTime := time.Now()
			defer func() {
				if task1490.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1490.ran.Store(true)

			_1644_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1490.job = sched.Enqueue(ctx, cff.Job{
			Run: task1490.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1490)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1645:12
		task1491 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1491.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1645_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1645,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1491.run = func(ctx context.Context) (err error) {
			taskEmitter := task1491.emitter
			startTime := time.Now()
			defer func() {
				if task1491.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1491.ran.Store(true)

			_1645_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1491.job = sched.Enqueue(ctx, cff.Job{
			Run: task1491.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1491)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1646:12
		task1492 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1492.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1646_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1646,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1492.run = func(ctx context.Context) (err error) {
			taskEmitter := task1492.emitter
			startTime := time.Now()
			defer func() {
				if task1492.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1492.ran.Store(true)

			_1646_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1492.job = sched.Enqueue(ctx, cff.Job{
			Run: task1492.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1492)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1647:12
		task1493 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1493.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1647_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1647,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1493.run = func(ctx context.Context) (err error) {
			taskEmitter := task1493.emitter
			startTime := time.Now()
			defer func() {
				if task1493.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1493.ran.Store(true)

			_1647_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1493.job = sched.Enqueue(ctx, cff.Job{
			Run: task1493.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1493)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1648:12
		task1494 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1494.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1648_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1648,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1494.run = func(ctx context.Context) (err error) {
			taskEmitter := task1494.emitter
			startTime := time.Now()
			defer func() {
				if task1494.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1494.ran.Store(true)

			_1648_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1494.job = sched.Enqueue(ctx, cff.Job{
			Run: task1494.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1494)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1649:12
		task1495 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1495.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1649_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1649,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1495.run = func(ctx context.Context) (err error) {
			taskEmitter := task1495.emitter
			startTime := time.Now()
			defer func() {
				if task1495.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1495.ran.Store(true)

			_1649_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1495.job = sched.Enqueue(ctx, cff.Job{
			Run: task1495.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1495)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1650:12
		task1496 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1496.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1650_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1650,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1496.run = func(ctx context.Context) (err error) {
			taskEmitter := task1496.emitter
			startTime := time.Now()
			defer func() {
				if task1496.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1496.ran.Store(true)

			_1650_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1496.job = sched.Enqueue(ctx, cff.Job{
			Run: task1496.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1496)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1651:12
		task1497 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1497.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1651_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1651,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1497.run = func(ctx context.Context) (err error) {
			taskEmitter := task1497.emitter
			startTime := time.Now()
			defer func() {
				if task1497.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1497.ran.Store(true)

			_1651_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1497.job = sched.Enqueue(ctx, cff.Job{
			Run: task1497.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1497)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1652:12
		task1498 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1498.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1652_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1652,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1498.run = func(ctx context.Context) (err error) {
			taskEmitter := task1498.emitter
			startTime := time.Now()
			defer func() {
				if task1498.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1498.ran.Store(true)

			_1652_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1498.job = sched.Enqueue(ctx, cff.Job{
			Run: task1498.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1498)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1653:12
		task1499 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1499.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1653_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1653,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1499.run = func(ctx context.Context) (err error) {
			taskEmitter := task1499.emitter
			startTime := time.Now()
			defer func() {
				if task1499.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1499.ran.Store(true)

			_1653_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1499.job = sched.Enqueue(ctx, cff.Job{
			Run: task1499.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1499)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1654:12
		task1500 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1500.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1654_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1654,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1500.run = func(ctx context.Context) (err error) {
			taskEmitter := task1500.emitter
			startTime := time.Now()
			defer func() {
				if task1500.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1500.ran.Store(true)

			_1654_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1500.job = sched.Enqueue(ctx, cff.Job{
			Run: task1500.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1500)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1655:12
		task1501 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1501.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1655_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1655,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1501.run = func(ctx context.Context) (err error) {
			taskEmitter := task1501.emitter
			startTime := time.Now()
			defer func() {
				if task1501.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1501.ran.Store(true)

			_1655_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1501.job = sched.Enqueue(ctx, cff.Job{
			Run: task1501.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1501)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1656:12
		task1502 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1502.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1656_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1656,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1502.run = func(ctx context.Context) (err error) {
			taskEmitter := task1502.emitter
			startTime := time.Now()
			defer func() {
				if task1502.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1502.ran.Store(true)

			_1656_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1502.job = sched.Enqueue(ctx, cff.Job{
			Run: task1502.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1502)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1657:12
		task1503 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1503.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1657_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1657,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1503.run = func(ctx context.Context) (err error) {
			taskEmitter := task1503.emitter
			startTime := time.Now()
			defer func() {
				if task1503.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1503.ran.Store(true)

			_1657_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1503.job = sched.Enqueue(ctx, cff.Job{
			Run: task1503.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1503)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1658:12
		task1504 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1504.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1658_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1658,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1504.run = func(ctx context.Context) (err error) {
			taskEmitter := task1504.emitter
			startTime := time.Now()
			defer func() {
				if task1504.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1504.ran.Store(true)

			_1658_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1504.job = sched.Enqueue(ctx, cff.Job{
			Run: task1504.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1504)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1659:12
		task1505 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1505.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1659_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1659,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1505.run = func(ctx context.Context) (err error) {
			taskEmitter := task1505.emitter
			startTime := time.Now()
			defer func() {
				if task1505.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1505.ran.Store(true)

			_1659_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1505.job = sched.Enqueue(ctx, cff.Job{
			Run: task1505.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1505)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1660:12
		task1506 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1506.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1660_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1660,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1506.run = func(ctx context.Context) (err error) {
			taskEmitter := task1506.emitter
			startTime := time.Now()
			defer func() {
				if task1506.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1506.ran.Store(true)

			_1660_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1506.job = sched.Enqueue(ctx, cff.Job{
			Run: task1506.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1506)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1661:12
		task1507 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1507.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1661_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1661,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1507.run = func(ctx context.Context) (err error) {
			taskEmitter := task1507.emitter
			startTime := time.Now()
			defer func() {
				if task1507.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1507.ran.Store(true)

			_1661_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1507.job = sched.Enqueue(ctx, cff.Job{
			Run: task1507.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1507)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1662:12
		task1508 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1508.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1662_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1662,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1508.run = func(ctx context.Context) (err error) {
			taskEmitter := task1508.emitter
			startTime := time.Now()
			defer func() {
				if task1508.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1508.ran.Store(true)

			_1662_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1508.job = sched.Enqueue(ctx, cff.Job{
			Run: task1508.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1508)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1663:12
		task1509 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1509.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1663_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1663,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1509.run = func(ctx context.Context) (err error) {
			taskEmitter := task1509.emitter
			startTime := time.Now()
			defer func() {
				if task1509.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1509.ran.Store(true)

			_1663_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1509.job = sched.Enqueue(ctx, cff.Job{
			Run: task1509.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1509)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1664:12
		task1510 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1510.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1664_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1664,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1510.run = func(ctx context.Context) (err error) {
			taskEmitter := task1510.emitter
			startTime := time.Now()
			defer func() {
				if task1510.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1510.ran.Store(true)

			_1664_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1510.job = sched.Enqueue(ctx, cff.Job{
			Run: task1510.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1510)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1665:12
		task1511 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1511.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1665_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1665,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1511.run = func(ctx context.Context) (err error) {
			taskEmitter := task1511.emitter
			startTime := time.Now()
			defer func() {
				if task1511.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1511.ran.Store(true)

			_1665_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1511.job = sched.Enqueue(ctx, cff.Job{
			Run: task1511.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1511)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1666:12
		task1512 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1512.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1666_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1666,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1512.run = func(ctx context.Context) (err error) {
			taskEmitter := task1512.emitter
			startTime := time.Now()
			defer func() {
				if task1512.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1512.ran.Store(true)

			_1666_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1512.job = sched.Enqueue(ctx, cff.Job{
			Run: task1512.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1512)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1667:12
		task1513 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1513.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1667_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1667,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1513.run = func(ctx context.Context) (err error) {
			taskEmitter := task1513.emitter
			startTime := time.Now()
			defer func() {
				if task1513.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1513.ran.Store(true)

			_1667_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1513.job = sched.Enqueue(ctx, cff.Job{
			Run: task1513.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1513)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1668:12
		task1514 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1514.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1668_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1668,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1514.run = func(ctx context.Context) (err error) {
			taskEmitter := task1514.emitter
			startTime := time.Now()
			defer func() {
				if task1514.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1514.ran.Store(true)

			_1668_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1514.job = sched.Enqueue(ctx, cff.Job{
			Run: task1514.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1514)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1669:12
		task1515 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1515.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1669_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1669,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1515.run = func(ctx context.Context) (err error) {
			taskEmitter := task1515.emitter
			startTime := time.Now()
			defer func() {
				if task1515.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1515.ran.Store(true)

			_1669_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1515.job = sched.Enqueue(ctx, cff.Job{
			Run: task1515.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1515)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1670:12
		task1516 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1516.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1670_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1670,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1516.run = func(ctx context.Context) (err error) {
			taskEmitter := task1516.emitter
			startTime := time.Now()
			defer func() {
				if task1516.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1516.ran.Store(true)

			_1670_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1516.job = sched.Enqueue(ctx, cff.Job{
			Run: task1516.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1516)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1671:12
		task1517 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1517.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1671_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1671,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1517.run = func(ctx context.Context) (err error) {
			taskEmitter := task1517.emitter
			startTime := time.Now()
			defer func() {
				if task1517.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1517.ran.Store(true)

			_1671_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1517.job = sched.Enqueue(ctx, cff.Job{
			Run: task1517.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1517)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1672:12
		task1518 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1518.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1672_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1672,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1518.run = func(ctx context.Context) (err error) {
			taskEmitter := task1518.emitter
			startTime := time.Now()
			defer func() {
				if task1518.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1518.ran.Store(true)

			_1672_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1518.job = sched.Enqueue(ctx, cff.Job{
			Run: task1518.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1518)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1673:12
		task1519 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1519.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1673_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1673,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1519.run = func(ctx context.Context) (err error) {
			taskEmitter := task1519.emitter
			startTime := time.Now()
			defer func() {
				if task1519.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1519.ran.Store(true)

			_1673_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1519.job = sched.Enqueue(ctx, cff.Job{
			Run: task1519.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1519)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1674:12
		task1520 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1520.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1674_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1674,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1520.run = func(ctx context.Context) (err error) {
			taskEmitter := task1520.emitter
			startTime := time.Now()
			defer func() {
				if task1520.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1520.ran.Store(true)

			_1674_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1520.job = sched.Enqueue(ctx, cff.Job{
			Run: task1520.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1520)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1675:12
		task1521 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1521.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1675_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1675,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1521.run = func(ctx context.Context) (err error) {
			taskEmitter := task1521.emitter
			startTime := time.Now()
			defer func() {
				if task1521.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1521.ran.Store(true)

			_1675_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1521.job = sched.Enqueue(ctx, cff.Job{
			Run: task1521.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1521)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1676:12
		task1522 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1522.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1676_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1676,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1522.run = func(ctx context.Context) (err error) {
			taskEmitter := task1522.emitter
			startTime := time.Now()
			defer func() {
				if task1522.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1522.ran.Store(true)

			_1676_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1522.job = sched.Enqueue(ctx, cff.Job{
			Run: task1522.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1522)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1677:12
		task1523 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1523.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1677_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1677,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1523.run = func(ctx context.Context) (err error) {
			taskEmitter := task1523.emitter
			startTime := time.Now()
			defer func() {
				if task1523.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1523.ran.Store(true)

			_1677_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1523.job = sched.Enqueue(ctx, cff.Job{
			Run: task1523.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1523)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1678:12
		task1524 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1524.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1678_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1678,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1524.run = func(ctx context.Context) (err error) {
			taskEmitter := task1524.emitter
			startTime := time.Now()
			defer func() {
				if task1524.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1524.ran.Store(true)

			_1678_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1524.job = sched.Enqueue(ctx, cff.Job{
			Run: task1524.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1524)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1679:12
		task1525 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1525.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1679_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1679,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1525.run = func(ctx context.Context) (err error) {
			taskEmitter := task1525.emitter
			startTime := time.Now()
			defer func() {
				if task1525.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1525.ran.Store(true)

			_1679_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1525.job = sched.Enqueue(ctx, cff.Job{
			Run: task1525.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1525)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1680:12
		task1526 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1526.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1680_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1680,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1526.run = func(ctx context.Context) (err error) {
			taskEmitter := task1526.emitter
			startTime := time.Now()
			defer func() {
				if task1526.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1526.ran.Store(true)

			_1680_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1526.job = sched.Enqueue(ctx, cff.Job{
			Run: task1526.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1526)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1681:12
		task1527 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1527.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1681_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1681,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1527.run = func(ctx context.Context) (err error) {
			taskEmitter := task1527.emitter
			startTime := time.Now()
			defer func() {
				if task1527.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1527.ran.Store(true)

			_1681_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1527.job = sched.Enqueue(ctx, cff.Job{
			Run: task1527.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1527)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1682:12
		task1528 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1528.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1682_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1682,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1528.run = func(ctx context.Context) (err error) {
			taskEmitter := task1528.emitter
			startTime := time.Now()
			defer func() {
				if task1528.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1528.ran.Store(true)

			_1682_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1528.job = sched.Enqueue(ctx, cff.Job{
			Run: task1528.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1528)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1683:12
		task1529 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1529.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1683_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1683,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1529.run = func(ctx context.Context) (err error) {
			taskEmitter := task1529.emitter
			startTime := time.Now()
			defer func() {
				if task1529.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1529.ran.Store(true)

			_1683_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1529.job = sched.Enqueue(ctx, cff.Job{
			Run: task1529.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1529)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1684:12
		task1530 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1530.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1684_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1684,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1530.run = func(ctx context.Context) (err error) {
			taskEmitter := task1530.emitter
			startTime := time.Now()
			defer func() {
				if task1530.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1530.ran.Store(true)

			_1684_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1530.job = sched.Enqueue(ctx, cff.Job{
			Run: task1530.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1530)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1685:12
		task1531 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1531.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1685_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1685,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1531.run = func(ctx context.Context) (err error) {
			taskEmitter := task1531.emitter
			startTime := time.Now()
			defer func() {
				if task1531.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1531.ran.Store(true)

			_1685_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1531.job = sched.Enqueue(ctx, cff.Job{
			Run: task1531.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1531)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1686:12
		task1532 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1532.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1686_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1686,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1532.run = func(ctx context.Context) (err error) {
			taskEmitter := task1532.emitter
			startTime := time.Now()
			defer func() {
				if task1532.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1532.ran.Store(true)

			_1686_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1532.job = sched.Enqueue(ctx, cff.Job{
			Run: task1532.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1532)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1687:12
		task1533 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1533.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1687_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1687,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1533.run = func(ctx context.Context) (err error) {
			taskEmitter := task1533.emitter
			startTime := time.Now()
			defer func() {
				if task1533.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1533.ran.Store(true)

			_1687_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1533.job = sched.Enqueue(ctx, cff.Job{
			Run: task1533.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1533)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1688:12
		task1534 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1534.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1688_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1688,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1534.run = func(ctx context.Context) (err error) {
			taskEmitter := task1534.emitter
			startTime := time.Now()
			defer func() {
				if task1534.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1534.ran.Store(true)

			_1688_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1534.job = sched.Enqueue(ctx, cff.Job{
			Run: task1534.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1534)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1689:12
		task1535 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1535.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1689_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1689,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1535.run = func(ctx context.Context) (err error) {
			taskEmitter := task1535.emitter
			startTime := time.Now()
			defer func() {
				if task1535.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1535.ran.Store(true)

			_1689_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1535.job = sched.Enqueue(ctx, cff.Job{
			Run: task1535.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1535)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1690:12
		task1536 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1536.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1690_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1690,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1536.run = func(ctx context.Context) (err error) {
			taskEmitter := task1536.emitter
			startTime := time.Now()
			defer func() {
				if task1536.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1536.ran.Store(true)

			_1690_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1536.job = sched.Enqueue(ctx, cff.Job{
			Run: task1536.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1536)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1691:12
		task1537 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1537.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1691_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1691,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1537.run = func(ctx context.Context) (err error) {
			taskEmitter := task1537.emitter
			startTime := time.Now()
			defer func() {
				if task1537.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1537.ran.Store(true)

			_1691_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1537.job = sched.Enqueue(ctx, cff.Job{
			Run: task1537.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1537)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1692:12
		task1538 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1538.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1692_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1692,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1538.run = func(ctx context.Context) (err error) {
			taskEmitter := task1538.emitter
			startTime := time.Now()
			defer func() {
				if task1538.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1538.ran.Store(true)

			_1692_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1538.job = sched.Enqueue(ctx, cff.Job{
			Run: task1538.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1538)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1693:12
		task1539 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1539.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1693_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1693,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1539.run = func(ctx context.Context) (err error) {
			taskEmitter := task1539.emitter
			startTime := time.Now()
			defer func() {
				if task1539.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1539.ran.Store(true)

			_1693_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1539.job = sched.Enqueue(ctx, cff.Job{
			Run: task1539.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1539)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1694:12
		task1540 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1540.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1694_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1694,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1540.run = func(ctx context.Context) (err error) {
			taskEmitter := task1540.emitter
			startTime := time.Now()
			defer func() {
				if task1540.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1540.ran.Store(true)

			_1694_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1540.job = sched.Enqueue(ctx, cff.Job{
			Run: task1540.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1540)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1695:12
		task1541 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1541.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1695_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1695,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1541.run = func(ctx context.Context) (err error) {
			taskEmitter := task1541.emitter
			startTime := time.Now()
			defer func() {
				if task1541.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1541.ran.Store(true)

			_1695_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1541.job = sched.Enqueue(ctx, cff.Job{
			Run: task1541.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1541)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1696:12
		task1542 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1542.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1696_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1696,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1542.run = func(ctx context.Context) (err error) {
			taskEmitter := task1542.emitter
			startTime := time.Now()
			defer func() {
				if task1542.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1542.ran.Store(true)

			_1696_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1542.job = sched.Enqueue(ctx, cff.Job{
			Run: task1542.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1542)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1697:12
		task1543 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1543.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1697_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1697,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1543.run = func(ctx context.Context) (err error) {
			taskEmitter := task1543.emitter
			startTime := time.Now()
			defer func() {
				if task1543.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1543.ran.Store(true)

			_1697_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1543.job = sched.Enqueue(ctx, cff.Job{
			Run: task1543.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1543)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1698:12
		task1544 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1544.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1698_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1698,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1544.run = func(ctx context.Context) (err error) {
			taskEmitter := task1544.emitter
			startTime := time.Now()
			defer func() {
				if task1544.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1544.ran.Store(true)

			_1698_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1544.job = sched.Enqueue(ctx, cff.Job{
			Run: task1544.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1544)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1699:12
		task1545 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1545.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1699_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1699,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1545.run = func(ctx context.Context) (err error) {
			taskEmitter := task1545.emitter
			startTime := time.Now()
			defer func() {
				if task1545.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1545.ran.Store(true)

			_1699_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1545.job = sched.Enqueue(ctx, cff.Job{
			Run: task1545.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1545)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1700:12
		task1546 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1546.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1700_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1700,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1546.run = func(ctx context.Context) (err error) {
			taskEmitter := task1546.emitter
			startTime := time.Now()
			defer func() {
				if task1546.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1546.ran.Store(true)

			_1700_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1546.job = sched.Enqueue(ctx, cff.Job{
			Run: task1546.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1546)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1701:12
		task1547 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1547.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1701_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1701,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1547.run = func(ctx context.Context) (err error) {
			taskEmitter := task1547.emitter
			startTime := time.Now()
			defer func() {
				if task1547.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1547.ran.Store(true)

			_1701_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1547.job = sched.Enqueue(ctx, cff.Job{
			Run: task1547.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1547)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1702:12
		task1548 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1548.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1702_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1702,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1548.run = func(ctx context.Context) (err error) {
			taskEmitter := task1548.emitter
			startTime := time.Now()
			defer func() {
				if task1548.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1548.ran.Store(true)

			_1702_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1548.job = sched.Enqueue(ctx, cff.Job{
			Run: task1548.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1548)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1703:12
		task1549 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1549.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1703_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1703,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1549.run = func(ctx context.Context) (err error) {
			taskEmitter := task1549.emitter
			startTime := time.Now()
			defer func() {
				if task1549.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1549.ran.Store(true)

			_1703_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1549.job = sched.Enqueue(ctx, cff.Job{
			Run: task1549.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1549)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1704:12
		task1550 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1550.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1704_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1704,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1550.run = func(ctx context.Context) (err error) {
			taskEmitter := task1550.emitter
			startTime := time.Now()
			defer func() {
				if task1550.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1550.ran.Store(true)

			_1704_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1550.job = sched.Enqueue(ctx, cff.Job{
			Run: task1550.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1550)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1705:12
		task1551 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1551.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1705_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1705,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1551.run = func(ctx context.Context) (err error) {
			taskEmitter := task1551.emitter
			startTime := time.Now()
			defer func() {
				if task1551.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1551.ran.Store(true)

			_1705_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1551.job = sched.Enqueue(ctx, cff.Job{
			Run: task1551.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1551)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1706:12
		task1552 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1552.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1706_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1706,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1552.run = func(ctx context.Context) (err error) {
			taskEmitter := task1552.emitter
			startTime := time.Now()
			defer func() {
				if task1552.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1552.ran.Store(true)

			_1706_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1552.job = sched.Enqueue(ctx, cff.Job{
			Run: task1552.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1552)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1707:12
		task1553 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1553.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1707_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1707,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1553.run = func(ctx context.Context) (err error) {
			taskEmitter := task1553.emitter
			startTime := time.Now()
			defer func() {
				if task1553.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1553.ran.Store(true)

			_1707_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1553.job = sched.Enqueue(ctx, cff.Job{
			Run: task1553.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1553)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1708:12
		task1554 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1554.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1708_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1708,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1554.run = func(ctx context.Context) (err error) {
			taskEmitter := task1554.emitter
			startTime := time.Now()
			defer func() {
				if task1554.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1554.ran.Store(true)

			_1708_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1554.job = sched.Enqueue(ctx, cff.Job{
			Run: task1554.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1554)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1709:12
		task1555 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1555.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1709_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1709,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1555.run = func(ctx context.Context) (err error) {
			taskEmitter := task1555.emitter
			startTime := time.Now()
			defer func() {
				if task1555.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1555.ran.Store(true)

			_1709_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1555.job = sched.Enqueue(ctx, cff.Job{
			Run: task1555.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1555)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1710:12
		task1556 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1556.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1710_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1710,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1556.run = func(ctx context.Context) (err error) {
			taskEmitter := task1556.emitter
			startTime := time.Now()
			defer func() {
				if task1556.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1556.ran.Store(true)

			_1710_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1556.job = sched.Enqueue(ctx, cff.Job{
			Run: task1556.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1556)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1711:12
		task1557 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1557.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1711_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1711,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1557.run = func(ctx context.Context) (err error) {
			taskEmitter := task1557.emitter
			startTime := time.Now()
			defer func() {
				if task1557.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1557.ran.Store(true)

			_1711_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1557.job = sched.Enqueue(ctx, cff.Job{
			Run: task1557.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1557)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1712:12
		task1558 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1558.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1712_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1712,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1558.run = func(ctx context.Context) (err error) {
			taskEmitter := task1558.emitter
			startTime := time.Now()
			defer func() {
				if task1558.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1558.ran.Store(true)

			_1712_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1558.job = sched.Enqueue(ctx, cff.Job{
			Run: task1558.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1558)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1713:12
		task1559 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1559.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1713_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1713,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1559.run = func(ctx context.Context) (err error) {
			taskEmitter := task1559.emitter
			startTime := time.Now()
			defer func() {
				if task1559.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1559.ran.Store(true)

			_1713_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1559.job = sched.Enqueue(ctx, cff.Job{
			Run: task1559.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1559)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1714:12
		task1560 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1560.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1714_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1714,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1560.run = func(ctx context.Context) (err error) {
			taskEmitter := task1560.emitter
			startTime := time.Now()
			defer func() {
				if task1560.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1560.ran.Store(true)

			_1714_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1560.job = sched.Enqueue(ctx, cff.Job{
			Run: task1560.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1560)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1715:12
		task1561 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1561.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1715_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1715,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1561.run = func(ctx context.Context) (err error) {
			taskEmitter := task1561.emitter
			startTime := time.Now()
			defer func() {
				if task1561.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1561.ran.Store(true)

			_1715_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1561.job = sched.Enqueue(ctx, cff.Job{
			Run: task1561.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1561)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1716:12
		task1562 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1562.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1716_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1716,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1562.run = func(ctx context.Context) (err error) {
			taskEmitter := task1562.emitter
			startTime := time.Now()
			defer func() {
				if task1562.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1562.ran.Store(true)

			_1716_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1562.job = sched.Enqueue(ctx, cff.Job{
			Run: task1562.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1562)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1717:12
		task1563 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1563.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1717_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1717,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1563.run = func(ctx context.Context) (err error) {
			taskEmitter := task1563.emitter
			startTime := time.Now()
			defer func() {
				if task1563.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1563.ran.Store(true)

			_1717_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1563.job = sched.Enqueue(ctx, cff.Job{
			Run: task1563.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1563)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1718:12
		task1564 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1564.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1718_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1718,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1564.run = func(ctx context.Context) (err error) {
			taskEmitter := task1564.emitter
			startTime := time.Now()
			defer func() {
				if task1564.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1564.ran.Store(true)

			_1718_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1564.job = sched.Enqueue(ctx, cff.Job{
			Run: task1564.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1564)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1719:12
		task1565 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1565.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1719_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1719,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1565.run = func(ctx context.Context) (err error) {
			taskEmitter := task1565.emitter
			startTime := time.Now()
			defer func() {
				if task1565.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1565.ran.Store(true)

			_1719_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1565.job = sched.Enqueue(ctx, cff.Job{
			Run: task1565.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1565)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1720:12
		task1566 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1566.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1720_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1720,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1566.run = func(ctx context.Context) (err error) {
			taskEmitter := task1566.emitter
			startTime := time.Now()
			defer func() {
				if task1566.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1566.ran.Store(true)

			_1720_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1566.job = sched.Enqueue(ctx, cff.Job{
			Run: task1566.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1566)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1721:12
		task1567 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1567.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1721_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1721,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1567.run = func(ctx context.Context) (err error) {
			taskEmitter := task1567.emitter
			startTime := time.Now()
			defer func() {
				if task1567.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1567.ran.Store(true)

			_1721_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1567.job = sched.Enqueue(ctx, cff.Job{
			Run: task1567.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1567)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1722:12
		task1568 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1568.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1722_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1722,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1568.run = func(ctx context.Context) (err error) {
			taskEmitter := task1568.emitter
			startTime := time.Now()
			defer func() {
				if task1568.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1568.ran.Store(true)

			_1722_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1568.job = sched.Enqueue(ctx, cff.Job{
			Run: task1568.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1568)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1723:12
		task1569 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1569.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1723_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1723,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1569.run = func(ctx context.Context) (err error) {
			taskEmitter := task1569.emitter
			startTime := time.Now()
			defer func() {
				if task1569.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1569.ran.Store(true)

			_1723_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1569.job = sched.Enqueue(ctx, cff.Job{
			Run: task1569.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1569)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1724:12
		task1570 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1570.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1724_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1724,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1570.run = func(ctx context.Context) (err error) {
			taskEmitter := task1570.emitter
			startTime := time.Now()
			defer func() {
				if task1570.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1570.ran.Store(true)

			_1724_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1570.job = sched.Enqueue(ctx, cff.Job{
			Run: task1570.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1570)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1725:12
		task1571 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1571.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1725_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1725,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1571.run = func(ctx context.Context) (err error) {
			taskEmitter := task1571.emitter
			startTime := time.Now()
			defer func() {
				if task1571.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1571.ran.Store(true)

			_1725_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1571.job = sched.Enqueue(ctx, cff.Job{
			Run: task1571.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1571)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1726:12
		task1572 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1572.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1726_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1726,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1572.run = func(ctx context.Context) (err error) {
			taskEmitter := task1572.emitter
			startTime := time.Now()
			defer func() {
				if task1572.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1572.ran.Store(true)

			_1726_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1572.job = sched.Enqueue(ctx, cff.Job{
			Run: task1572.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1572)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1727:12
		task1573 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1573.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1727_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1727,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1573.run = func(ctx context.Context) (err error) {
			taskEmitter := task1573.emitter
			startTime := time.Now()
			defer func() {
				if task1573.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1573.ran.Store(true)

			_1727_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1573.job = sched.Enqueue(ctx, cff.Job{
			Run: task1573.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1573)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1728:12
		task1574 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1574.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1728_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1728,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1574.run = func(ctx context.Context) (err error) {
			taskEmitter := task1574.emitter
			startTime := time.Now()
			defer func() {
				if task1574.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1574.ran.Store(true)

			_1728_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1574.job = sched.Enqueue(ctx, cff.Job{
			Run: task1574.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1574)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1729:12
		task1575 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1575.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1729_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1729,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1575.run = func(ctx context.Context) (err error) {
			taskEmitter := task1575.emitter
			startTime := time.Now()
			defer func() {
				if task1575.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1575.ran.Store(true)

			_1729_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1575.job = sched.Enqueue(ctx, cff.Job{
			Run: task1575.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1575)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1730:12
		task1576 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1576.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1730_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1730,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1576.run = func(ctx context.Context) (err error) {
			taskEmitter := task1576.emitter
			startTime := time.Now()
			defer func() {
				if task1576.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1576.ran.Store(true)

			_1730_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1576.job = sched.Enqueue(ctx, cff.Job{
			Run: task1576.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1576)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1731:12
		task1577 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1577.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1731_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1731,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1577.run = func(ctx context.Context) (err error) {
			taskEmitter := task1577.emitter
			startTime := time.Now()
			defer func() {
				if task1577.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1577.ran.Store(true)

			_1731_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1577.job = sched.Enqueue(ctx, cff.Job{
			Run: task1577.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1577)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1732:12
		task1578 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1578.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1732_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1732,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1578.run = func(ctx context.Context) (err error) {
			taskEmitter := task1578.emitter
			startTime := time.Now()
			defer func() {
				if task1578.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1578.ran.Store(true)

			_1732_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1578.job = sched.Enqueue(ctx, cff.Job{
			Run: task1578.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1578)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1733:12
		task1579 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1579.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1733_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1733,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1579.run = func(ctx context.Context) (err error) {
			taskEmitter := task1579.emitter
			startTime := time.Now()
			defer func() {
				if task1579.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1579.ran.Store(true)

			_1733_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1579.job = sched.Enqueue(ctx, cff.Job{
			Run: task1579.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1579)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1734:12
		task1580 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1580.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1734_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1734,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1580.run = func(ctx context.Context) (err error) {
			taskEmitter := task1580.emitter
			startTime := time.Now()
			defer func() {
				if task1580.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1580.ran.Store(true)

			_1734_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1580.job = sched.Enqueue(ctx, cff.Job{
			Run: task1580.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1580)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1735:12
		task1581 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1581.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1735_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1735,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1581.run = func(ctx context.Context) (err error) {
			taskEmitter := task1581.emitter
			startTime := time.Now()
			defer func() {
				if task1581.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1581.ran.Store(true)

			_1735_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1581.job = sched.Enqueue(ctx, cff.Job{
			Run: task1581.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1581)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1736:12
		task1582 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1582.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1736_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1736,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1582.run = func(ctx context.Context) (err error) {
			taskEmitter := task1582.emitter
			startTime := time.Now()
			defer func() {
				if task1582.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1582.ran.Store(true)

			_1736_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1582.job = sched.Enqueue(ctx, cff.Job{
			Run: task1582.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1582)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1737:12
		task1583 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1583.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1737_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1737,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1583.run = func(ctx context.Context) (err error) {
			taskEmitter := task1583.emitter
			startTime := time.Now()
			defer func() {
				if task1583.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1583.ran.Store(true)

			_1737_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1583.job = sched.Enqueue(ctx, cff.Job{
			Run: task1583.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1583)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1738:12
		task1584 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1584.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1738_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1738,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1584.run = func(ctx context.Context) (err error) {
			taskEmitter := task1584.emitter
			startTime := time.Now()
			defer func() {
				if task1584.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1584.ran.Store(true)

			_1738_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1584.job = sched.Enqueue(ctx, cff.Job{
			Run: task1584.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1584)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1739:12
		task1585 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1585.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1739_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1739,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1585.run = func(ctx context.Context) (err error) {
			taskEmitter := task1585.emitter
			startTime := time.Now()
			defer func() {
				if task1585.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1585.ran.Store(true)

			_1739_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1585.job = sched.Enqueue(ctx, cff.Job{
			Run: task1585.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1585)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1740:12
		task1586 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1586.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1740_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1740,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1586.run = func(ctx context.Context) (err error) {
			taskEmitter := task1586.emitter
			startTime := time.Now()
			defer func() {
				if task1586.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1586.ran.Store(true)

			_1740_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1586.job = sched.Enqueue(ctx, cff.Job{
			Run: task1586.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1586)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1741:12
		task1587 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1587.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1741_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1741,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1587.run = func(ctx context.Context) (err error) {
			taskEmitter := task1587.emitter
			startTime := time.Now()
			defer func() {
				if task1587.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1587.ran.Store(true)

			_1741_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1587.job = sched.Enqueue(ctx, cff.Job{
			Run: task1587.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1587)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1742:12
		task1588 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1588.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1742_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1742,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1588.run = func(ctx context.Context) (err error) {
			taskEmitter := task1588.emitter
			startTime := time.Now()
			defer func() {
				if task1588.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1588.ran.Store(true)

			_1742_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1588.job = sched.Enqueue(ctx, cff.Job{
			Run: task1588.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1588)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1743:12
		task1589 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1589.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1743_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1743,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1589.run = func(ctx context.Context) (err error) {
			taskEmitter := task1589.emitter
			startTime := time.Now()
			defer func() {
				if task1589.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1589.ran.Store(true)

			_1743_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1589.job = sched.Enqueue(ctx, cff.Job{
			Run: task1589.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1589)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1744:12
		task1590 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1590.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1744_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1744,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1590.run = func(ctx context.Context) (err error) {
			taskEmitter := task1590.emitter
			startTime := time.Now()
			defer func() {
				if task1590.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1590.ran.Store(true)

			_1744_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1590.job = sched.Enqueue(ctx, cff.Job{
			Run: task1590.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1590)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1745:12
		task1591 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1591.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1745_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1745,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1591.run = func(ctx context.Context) (err error) {
			taskEmitter := task1591.emitter
			startTime := time.Now()
			defer func() {
				if task1591.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1591.ran.Store(true)

			_1745_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1591.job = sched.Enqueue(ctx, cff.Job{
			Run: task1591.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1591)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1746:12
		task1592 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1592.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1746_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1746,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1592.run = func(ctx context.Context) (err error) {
			taskEmitter := task1592.emitter
			startTime := time.Now()
			defer func() {
				if task1592.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1592.ran.Store(true)

			_1746_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1592.job = sched.Enqueue(ctx, cff.Job{
			Run: task1592.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1592)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1747:12
		task1593 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1593.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1747_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1747,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1593.run = func(ctx context.Context) (err error) {
			taskEmitter := task1593.emitter
			startTime := time.Now()
			defer func() {
				if task1593.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1593.ran.Store(true)

			_1747_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1593.job = sched.Enqueue(ctx, cff.Job{
			Run: task1593.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1593)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1748:12
		task1594 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1594.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1748_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1748,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1594.run = func(ctx context.Context) (err error) {
			taskEmitter := task1594.emitter
			startTime := time.Now()
			defer func() {
				if task1594.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1594.ran.Store(true)

			_1748_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1594.job = sched.Enqueue(ctx, cff.Job{
			Run: task1594.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1594)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1749:12
		task1595 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1595.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1749_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1749,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1595.run = func(ctx context.Context) (err error) {
			taskEmitter := task1595.emitter
			startTime := time.Now()
			defer func() {
				if task1595.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1595.ran.Store(true)

			_1749_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1595.job = sched.Enqueue(ctx, cff.Job{
			Run: task1595.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1595)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1750:12
		task1596 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1596.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1750_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1750,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1596.run = func(ctx context.Context) (err error) {
			taskEmitter := task1596.emitter
			startTime := time.Now()
			defer func() {
				if task1596.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1596.ran.Store(true)

			_1750_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1596.job = sched.Enqueue(ctx, cff.Job{
			Run: task1596.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1596)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1751:12
		task1597 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1597.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1751_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1751,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1597.run = func(ctx context.Context) (err error) {
			taskEmitter := task1597.emitter
			startTime := time.Now()
			defer func() {
				if task1597.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1597.ran.Store(true)

			_1751_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1597.job = sched.Enqueue(ctx, cff.Job{
			Run: task1597.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1597)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1752:12
		task1598 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1598.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1752_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1752,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1598.run = func(ctx context.Context) (err error) {
			taskEmitter := task1598.emitter
			startTime := time.Now()
			defer func() {
				if task1598.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1598.ran.Store(true)

			_1752_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1598.job = sched.Enqueue(ctx, cff.Job{
			Run: task1598.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1598)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1753:12
		task1599 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1599.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1753_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1753,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1599.run = func(ctx context.Context) (err error) {
			taskEmitter := task1599.emitter
			startTime := time.Now()
			defer func() {
				if task1599.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1599.ran.Store(true)

			_1753_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1599.job = sched.Enqueue(ctx, cff.Job{
			Run: task1599.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1599)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1754:12
		task1600 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1600.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1754_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1754,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1600.run = func(ctx context.Context) (err error) {
			taskEmitter := task1600.emitter
			startTime := time.Now()
			defer func() {
				if task1600.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1600.ran.Store(true)

			_1754_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1600.job = sched.Enqueue(ctx, cff.Job{
			Run: task1600.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1600)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1755:12
		task1601 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1601.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1755_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1755,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1601.run = func(ctx context.Context) (err error) {
			taskEmitter := task1601.emitter
			startTime := time.Now()
			defer func() {
				if task1601.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1601.ran.Store(true)

			_1755_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1601.job = sched.Enqueue(ctx, cff.Job{
			Run: task1601.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1601)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1756:12
		task1602 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1602.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1756_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1756,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1602.run = func(ctx context.Context) (err error) {
			taskEmitter := task1602.emitter
			startTime := time.Now()
			defer func() {
				if task1602.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1602.ran.Store(true)

			_1756_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1602.job = sched.Enqueue(ctx, cff.Job{
			Run: task1602.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1602)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1757:12
		task1603 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1603.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1757_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1757,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1603.run = func(ctx context.Context) (err error) {
			taskEmitter := task1603.emitter
			startTime := time.Now()
			defer func() {
				if task1603.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1603.ran.Store(true)

			_1757_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1603.job = sched.Enqueue(ctx, cff.Job{
			Run: task1603.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1603)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1758:12
		task1604 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1604.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1758_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1758,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1604.run = func(ctx context.Context) (err error) {
			taskEmitter := task1604.emitter
			startTime := time.Now()
			defer func() {
				if task1604.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1604.ran.Store(true)

			_1758_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1604.job = sched.Enqueue(ctx, cff.Job{
			Run: task1604.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1604)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1759:12
		task1605 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1605.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1759_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1759,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1605.run = func(ctx context.Context) (err error) {
			taskEmitter := task1605.emitter
			startTime := time.Now()
			defer func() {
				if task1605.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1605.ran.Store(true)

			_1759_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1605.job = sched.Enqueue(ctx, cff.Job{
			Run: task1605.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1605)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1760:12
		task1606 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1606.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1760_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1760,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1606.run = func(ctx context.Context) (err error) {
			taskEmitter := task1606.emitter
			startTime := time.Now()
			defer func() {
				if task1606.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1606.ran.Store(true)

			_1760_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1606.job = sched.Enqueue(ctx, cff.Job{
			Run: task1606.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1606)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1761:12
		task1607 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1607.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1761_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1761,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1607.run = func(ctx context.Context) (err error) {
			taskEmitter := task1607.emitter
			startTime := time.Now()
			defer func() {
				if task1607.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1607.ran.Store(true)

			_1761_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1607.job = sched.Enqueue(ctx, cff.Job{
			Run: task1607.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1607)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1762:12
		task1608 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1608.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1762_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1762,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1608.run = func(ctx context.Context) (err error) {
			taskEmitter := task1608.emitter
			startTime := time.Now()
			defer func() {
				if task1608.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1608.ran.Store(true)

			_1762_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1608.job = sched.Enqueue(ctx, cff.Job{
			Run: task1608.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1608)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1763:12
		task1609 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1609.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1763_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1763,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1609.run = func(ctx context.Context) (err error) {
			taskEmitter := task1609.emitter
			startTime := time.Now()
			defer func() {
				if task1609.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1609.ran.Store(true)

			_1763_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1609.job = sched.Enqueue(ctx, cff.Job{
			Run: task1609.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1609)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1764:12
		task1610 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1610.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1764_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1764,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1610.run = func(ctx context.Context) (err error) {
			taskEmitter := task1610.emitter
			startTime := time.Now()
			defer func() {
				if task1610.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1610.ran.Store(true)

			_1764_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1610.job = sched.Enqueue(ctx, cff.Job{
			Run: task1610.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1610)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1765:12
		task1611 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1611.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1765_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1765,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1611.run = func(ctx context.Context) (err error) {
			taskEmitter := task1611.emitter
			startTime := time.Now()
			defer func() {
				if task1611.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1611.ran.Store(true)

			_1765_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1611.job = sched.Enqueue(ctx, cff.Job{
			Run: task1611.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1611)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1766:12
		task1612 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1612.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1766_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1766,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1612.run = func(ctx context.Context) (err error) {
			taskEmitter := task1612.emitter
			startTime := time.Now()
			defer func() {
				if task1612.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1612.ran.Store(true)

			_1766_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1612.job = sched.Enqueue(ctx, cff.Job{
			Run: task1612.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1612)

		// go.uber.org/cff/internal/tests/benchmark/benchmark.go:1767:12
		task1613 := new(struct {
			emitter cff.TaskEmitter
			ran     cff.AtomicBool
			run     func(context.Context) error
			job     *cff.ScheduledJob
		})
		task1613.emitter = emitter.TaskInit(
			&cff.TaskInfo{
				Name:   _1767_47,
				File:   "go.uber.org/cff/internal/tests/benchmark/benchmark.go",
				Line:   1767,
				Column: 12,
			},
			&cff.DirectiveInfo{
				Name:      flowInfo.Name,
				Directive: cff.FlowDirective,
				File:      flowInfo.File,
				Line:      flowInfo.Line,
				Column:    flowInfo.Column,
			},
		)
		task1613.run = func(ctx context.Context) (err error) {
			taskEmitter := task1613.emitter
			startTime := time.Now()
			defer func() {
				if task1613.ran.Load() {
					taskEmitter.TaskDone(ctx, time.Since(startTime))
				}
			}()

			defer func() {
				recovered := recover()
				if recovered != nil {
					taskEmitter.TaskPanic(ctx, recovered)
					err = fmt.Errorf("task panic: %v", recovered)
				}
			}()

			defer task1613.ran.Store(true)

			_1767_12(v3)

			taskEmitter.TaskSuccess(ctx)

			return
		}

		task1613.job = sched.Enqueue(ctx, cff.Job{
			Run: task1613.run,
			Dependencies: []*cff.ScheduledJob{
				task614.job,
			},
		})
		tasks = append(tasks, task1613)

		if err := sched.Wait(ctx); err != nil {
			flowEmitter.FlowError(ctx, err)
			return err
		}

		*(_764_15) = v3 // float64

		flowEmitter.FlowSuccess(ctx)
		return nil
	}()
	return res
}
